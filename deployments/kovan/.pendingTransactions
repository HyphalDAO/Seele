{
  "0x9d5c7bfc8cf698ab74eda7d7bfa10a692b6291544cbf68597e4ef2851b814b9c": {
    "name": "SimpleMemberVoting",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "SimpleMemberVoting",
      "sourceName": "contracts/votingStrategies/SimpleMemberVoting.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_UsulModule",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_votingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumNumerator_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_timeLockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "_members",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "name": "MemberAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "name": "MemberRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "ProposalReceived",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldQuorumNumerator",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newQuorumNumerator",
              "type": "uint256"
            }
          ],
          "name": "QuorumNumeratorUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "UsulModule",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "StrategySetup",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "previousTimeLock",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newTimeLockPeriod",
              "type": "uint256"
            }
          ],
          "name": "TimeLockUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousUsul",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newUsul",
              "type": "address"
            }
          ],
          "name": "UsulSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "VoteFinalized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            }
          ],
          "name": "Voted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "previousVotingPeriod",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newVotingPeriod",
              "type": "uint256"
            }
          ],
          "name": "VotingPeriodUpdated",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "UsulModule",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "VOTE_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "name": "addMember",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "calculateWeight",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "finalizeStrategy",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasVoted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "isPassed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "memberCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "members",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "proposals",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "yesVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "noVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "abstainVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "quorum",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "quorumDenominator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "quorumNumerator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "receiveProposal",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "member",
              "type": "address"
            }
          ],
          "name": "removeMember",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "initParams",
              "type": "bytes"
            }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_Usul",
              "type": "address"
            }
          ],
          "name": "setUsul",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "timeLockPeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newQuorumNumerator",
              "type": "uint256"
            }
          ],
          "name": "updateQuorumNumerator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newTimeLockPeriod",
              "type": "uint256"
            }
          ],
          "name": "updateTimeLockPeriod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newPeriod",
              "type": "uint256"
            }
          ],
          "name": "updateVotingPeriod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "vote",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "voteSignature",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "votingPeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806378446bc111610104578063a7713a70116100a2578063d69be91c11610071578063d69be91c146104e6578063ef00ef4314610516578063f2fde38b14610532578063f8ce560a1461054e576101cf565b8063a7713a7014610474578063a8a829c114610492578063bf1b5efd146104ae578063ca6d56dc146104ca576101cf565b806386522973116100de57806386522973146103fe5780638da5cb5b1461041c57806397c3d3341461043a578063a4f9edbf14610458576101cf565b806378446bc1146103a857806379bfb089146103c65780637a3ff4d2146103e2576101cf565b80631f2c562e11610171578063494031831161014b578063494031831461033257806354fd4d5014610362578063715018a614610380578063747691df1461038a576101cf565b80631f2c562e146102ca578063224f3263146102e65780634385963214610302576101cf565b806306fdde03116101ad57806306fdde031461024257806308ae4b0c146102605780630b1ca49a1461029057806311aee380146102ac576101cf565b8063013cf08b146101d457806302a251a31461020857806306f3f9e614610226575b600080fd5b6101ee60048036038101906101e99190612577565b61057e565b6040516101ff959493929190612f1b565b60405180910390f35b6102106105b4565b60405161021d9190612ed7565b60405180910390f35b610240600480360381019061023b9190612577565b6105ba565b005b61024a610642565b6040516102579190612c35565b60405180910390f35b61027a600480360381019061027591906123e7565b6106d0565b6040516102879190612b30565b60405180910390f35b6102aa60048036038101906102a591906123e7565b6106f0565b005b6102b46108a9565b6040516102c19190612ed7565b60405180910390f35b6102e460048036038101906102df9190612680565b6108af565b005b61030060048036038101906102fb919061252e565b610921565b005b61031c600480360381019061031791906125d1565b610a49565b6040516103299190612b30565b60405180910390f35b61034c60048036038101906103479190612577565b610ab4565b6040516103599190612b30565b60405180910390f35b61036a610c07565b6040516103779190612c35565b60405180910390f35b610388610c44565b005b610392610ccc565b60405161039f9190612ad0565b60405180910390f35b6103b0610cf2565b6040516103bd9190612ed7565b60405180910390f35b6103e060048036038101906103db9190612577565b610cf8565b005b6103fc60048036038101906103f79190612577565b610dd4565b005b610406610e9b565b6040516104139190612b4b565b60405180910390f35b610424610ebf565b6040516104319190612ad0565b60405180910390f35b610442610ee9565b60405161044f9190612ed7565b60405180910390f35b610472600480360381019061046d919061252e565b610ef2565b005b61047c611194565b6040516104899190612ed7565b60405180910390f35b6104ac60048036038101906104a791906123e7565b61119e565b005b6104c860048036038101906104c39190612611565b6112e0565b005b6104e460048036038101906104df91906123e7565b6112f0565b005b61050060048036038101906104fb91906124ee565b6114a9565b60405161050d9190612ed7565b60405180910390f35b610530600480360381019061052b9190612577565b611543565b005b61054c600480360381019061054791906123e7565b61160a565b005b61056860048036038101906105639190612577565b611702565b6040516105759190612ed7565b60405180910390f35b609d6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b609a5481565b6105c2611755565b73ffffffffffffffffffffffffffffffffffffffff166105e0610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90612df7565b60405180910390fd5b61063f8161175d565b50565b609c805461064f90613206565b80601f016020809104026020016040519081016040528092919081815260200182805461067b90613206565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b505050505081565b609f6020528060005260406000206000915054906101000a900460ff1681565b6106f8611755565b73ffffffffffffffffffffffffffffffffffffffff16610716610ebf565b73ffffffffffffffffffffffffffffffffffffffff161461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390612df7565b60405180910390fd5b60011515609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690612e77565b60405180910390fd5b6000609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550609e600081548092919061086a906131dc565b91905055507f6e76fb4c77256006d9c38ec7d82b45a8c8f3c27b1d6766fffc42dfb8de6844928160405161089e9190612ad0565b60405180910390a150565b609e5481565b600061090d6109077fb780761e36898d7ec1cc0fb66fdd6a8a42e635ee643709d6b20652c68a3b29f587876040516020016108ec93929190612bb9565b604051602081830303815290604052805190602001206117f2565b8461180c565b905061091a858286611833565b5050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890612dd7565b60405180910390fd5b6000818060200190518101906109c791906125a4565b905042609a546109d79190613048565b609d60008381526020019081526020016000206003018190555043609d6000838152602001908152602001600020600401819055507f3aeda78f6230a590817748b94b63d690cec4d1a15d494dfc7006e0a39e77f81a8142604051610a3d929190612ef2565b60405180910390a15050565b6000609d600084815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000609d600083815260200190815260200160002060010154609d60008481526020019081526020016000206000015411610b24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1b90612c97565b60405180910390fd5b610b2d43611702565b609d600084815260200190815260200160002060020154609d600085815260200190815260200160002060000154610b659190613048565b1015610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d90612cf7565b60405180910390fd5b42609d60008481526020019081526020016000206003015410610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf590612e17565b60405180910390fd5b60019050919050565b60606040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250905090565b610c4c611755565b73ffffffffffffffffffffffffffffffffffffffff16610c6a610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb790612df7565b60405180910390fd5b610cca6000611ac8565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b609b5481565b610d0181610ab4565b15610d9857606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd6134882609b546040518363ffffffff1660e01b8152600401610d65929190612ef2565b600060405180830381600087803b158015610d7f57600080fd5b505af1158015610d93573d6000803e3d6000fd5b505050505b7f54ffcee03e8b80c05e4d1c55e3dc60602d9082a899e50337b680c9c4c4d80a3a8142604051610dc9929190612ef2565b60405180910390a150565b610ddc611755565b73ffffffffffffffffffffffffffffffffffffffff16610dfa610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614610e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4790612df7565b60405180910390fd5b6000609b54905081609b819055507f2a72574d775756e698a258fc07c826b7185131fff8a96b868feacab45fb234328183604051610e8f929190612ef2565b60405180910390a15050565b7fb780761e36898d7ec1cc0fb66fdd6a8a42e635ee643709d6b20652c68a3b29f581565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006064905090565b600060019054906101000a900460ff16610f1a5760008054906101000a900460ff1615610f23565b610f22611b8e565b5b610f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5990612d97565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fb2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600080600080600080600088806020019051810190610fd19190612414565b965096509650965096509650965060018511611022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101990612c77565b60405180910390fd5b61102a611b9f565b60005b815181101561106c5761105982828151811061104c5761104b613378565b5b60200260200101516112f0565b808061106490613269565b91505061102d565b5061107e82611079610c07565b611bf8565b611087846105ba565b6110908761160a565b60018561109d91906130cf565b609a8190555085606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001836110f191906130cf565b609b8190555081609c908051906020019061110d929190612148565b508673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f61586574b8b0edca97136ad4cb664eec4742d53de53403d531506632e6342a3960405160405180910390a35050505050505080156111905760008060016101000a81548160ff0219169083151502179055505b5050565b600060a054905090565b6111a6611755565b73ffffffffffffffffffffffffffffffffffffffff166111c4610ebf565b73ffffffffffffffffffffffffffffffffffffffff161461121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121190612df7565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f20c8544544aefaefdf339d996d855f2d4040cf93548344aa7dcb03b19e160cd160405160405180910390a35050565b6112eb833384611833565b505050565b6112f8611755565b73ffffffffffffffffffffffffffffffffffffffff16611316610ebf565b73ffffffffffffffffffffffffffffffffffffffff161461136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390612df7565b60405180910390fd5b60001515609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f690612d37565b60405180910390fd5b6001609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550609e600081548092919061146a90613269565b91905055507fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9148160405161149e9190612ad0565b60405180910390a150565b600082609f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152f90612e57565b60405180910390fd5b600191505092915050565b61154b611755565b73ffffffffffffffffffffffffffffffffffffffff16611569610ebf565b73ffffffffffffffffffffffffffffffffffffffff16146115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690612df7565b60405180910390fd5b6000609a54905081609a819055507fffc708f072ca56e3d45ef0cb288b96cb9378f5f63e1646868bfbc9c38f4263a181836040516115fe929190612ef2565b60405180910390a15050565b611612611755565b73ffffffffffffffffffffffffffffffffffffffff16611630610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614611686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167d90612df7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ed90612d17565b60405180910390fd5b6116ff81611ac8565b50565b600061170c610ee9565b611714611194565b609e5461172191906130cf565b61172b919061309e565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b611765610ee9565b8111156117a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179e90612e37565b60405180910390fd5b600060a05490508160a0819055507f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b463399781836040516117e6929190612ef2565b60405180910390a15050565b60006118056117ff611c73565b83611cb3565b9050919050565b600080600061181b8585611ce6565b9150915061182881611d69565b819250505092915050565b609d60008481526020019081526020016000206003015442111561188c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188390612cd7565b60405180910390fd5b6118968383610a49565b156118d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cd90612d77565b60405180910390fd5b6001609d600085815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600061194e83856114a9565b9050600060028111156119645761196361331a565b5b60ff168260ff1614156119a35780609d600086815260200190815260200160002060010160008282546119979190613048565b92505081905550611a85565b600160028111156119b7576119b661331a565b5b60ff168260ff1614156119f65780609d600086815260200190815260200160002060000160008282546119ea9190613048565b92505081905550611a84565b600280811115611a0957611a0861331a565b5b60ff168260ff161415611a485780609d60008681526020019081526020016000206002016000828254611a3c9190613048565b92505081905550611a83565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7a90612eb7565b60405180910390fd5b5b5b7f27eb20ecadc80d52f641a540b295d208f7c3735545d321b08e505116c601319983858484604051611aba9493929190612aeb565b60405180910390a150505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611b9930611732565b15905090565b600060019054906101000a900460ff16611bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be590612e97565b60405180910390fd5b611bf6611f3e565b565b600060019054906101000a900460ff16611c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3e90612e97565b60405180910390fd5b600082805190602001209050600082805190602001209050816066819055508060678190555050505050565b6000611cae7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ca1611f9f565b611ca9611fa9565b611fb3565b905090565b60008282604051602001611cc8929190612a99565b60405160208183030381529060405280519060200120905092915050565b600080604183511415611d285760008060006020860151925060408601519150606086015160001a9050611d1c87828585611fed565b94509450505050611d62565b604083511415611d59576000806020850151915060408501519050611d4e8683836120fa565b935093505050611d62565b60006002915091505b9250929050565b60006004811115611d7d57611d7c61331a565b5b816004811115611d9057611d8f61331a565b5b1415611d9b57611f3b565b60016004811115611daf57611dae61331a565b5b816004811115611dc257611dc161331a565b5b1415611e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfa90612c57565b60405180910390fd5b60026004811115611e1757611e1661331a565b5b816004811115611e2a57611e2961331a565b5b1415611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290612cb7565b60405180910390fd5b60036004811115611e7f57611e7e61331a565b5b816004811115611e9257611e9161331a565b5b1415611ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eca90612d57565b60405180910390fd5b600480811115611ee657611ee561331a565b5b816004811115611ef957611ef861331a565b5b1415611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3190612db7565b60405180910390fd5b5b50565b600060019054906101000a900460ff16611f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8490612e97565b60405180910390fd5b611f9d611f98611755565b611ac8565b565b6000606654905090565b6000606754905090565b60008383834630604051602001611fce959493929190612b66565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156120285760006003915091506120f1565b601b8560ff16141580156120405750601c8560ff1614155b156120525760006004915091506120f1565b6000600187878787604051600081526020016040526040516120779493929190612bf0565b6020604051602081039080840390855afa158015612099573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120e8576000600192509250506120f1565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061213a87828885611fed565b935093505050935093915050565b82805461215490613206565b90600052602060002090601f01602090048101928261217657600085556121bd565b82601f1061218f57805160ff19168380011785556121bd565b828001600101855582156121bd579182015b828111156121bc5782518255916020019190600101906121a1565b5b5090506121ca91906121ce565b5090565b5b808211156121e75760008160009055506001016121cf565b5090565b60006121fe6121f984612f93565b612f6e565b90508083825260208201905082856020860282011115612221576122206133db565b5b60005b85811015612251578161223788826122f4565b845260208401935060208301925050600181019050612224565b5050509392505050565b600061226e61226984612fbf565b612f6e565b90508281526020810184848401111561228a576122896133e0565b5b61229584828561319a565b509392505050565b60006122b06122ab84612ff0565b612f6e565b9050828152602081018484840111156122cc576122cb6133e0565b5b6122d78482856131a9565b509392505050565b6000813590506122ee8161388d565b92915050565b6000815190506123038161388d565b92915050565b600081519050612318816138a4565b92915050565b600082601f830112612333576123326133d6565b5b81516123438482602086016121eb565b91505092915050565b600082601f830112612361576123606133d6565b5b813561237184826020860161225b565b91505092915050565b600082601f83011261238f5761238e6133d6565b5b815161239f84826020860161229d565b91505092915050565b6000813590506123b7816138bb565b92915050565b6000815190506123cc816138bb565b92915050565b6000813590506123e1816138d2565b92915050565b6000602082840312156123fd576123fc6133ea565b5b600061240b848285016122df565b91505092915050565b600080600080600080600060e0888a031215612433576124326133ea565b5b60006124418a828b01612309565b97505060206124528a828b01612309565b96505060406124638a828b016123bd565b95505060606124748a828b016123bd565b94505060806124858a828b016123bd565b93505060a088015167ffffffffffffffff8111156124a6576124a56133e5565b5b6124b28a828b0161237a565b92505060c088015167ffffffffffffffff8111156124d3576124d26133e5565b5b6124df8a828b0161231e565b91505092959891949750929550565b60008060408385031215612505576125046133ea565b5b6000612513858286016122df565b9250506020612524858286016123a8565b9150509250929050565b600060208284031215612544576125436133ea565b5b600082013567ffffffffffffffff811115612562576125616133e5565b5b61256e8482850161234c565b91505092915050565b60006020828403121561258d5761258c6133ea565b5b600061259b848285016123a8565b91505092915050565b6000602082840312156125ba576125b96133ea565b5b60006125c8848285016123bd565b91505092915050565b600080604083850312156125e8576125e76133ea565b5b60006125f6858286016123a8565b9250506020612607858286016122df565b9150509250929050565b60008060006060848603121561262a576126296133ea565b5b6000612638868287016123a8565b9350506020612649868287016123d2565b925050604084013567ffffffffffffffff81111561266a576126696133e5565b5b6126768682870161234c565b9150509250925092565b6000806000806080858703121561269a576126996133ea565b5b60006126a8878288016123a8565b94505060206126b9878288016123d2565b935050604085013567ffffffffffffffff8111156126da576126d96133e5565b5b6126e68782880161234c565b925050606085013567ffffffffffffffff811115612707576127066133e5565b5b6127138782880161234c565b91505092959194509250565b61272881613129565b82525050565b6127378161314d565b82525050565b61274681613159565b82525050565b61275d61275882613159565b6132b2565b82525050565b600061276e82613021565b612778818561302c565b93506127888185602086016131a9565b612791816133ef565b840191505092915050565b60006127a960188361302c565b91506127b482613400565b602082019050919050565b60006127cc60238361302c565b91506127d782613429565b604082019050919050565b60006127ef601d8361302c565b91506127fa82613478565b602082019050919050565b6000612812601f8361302c565b915061281d826134a1565b602082019050919050565b600061283560188361302c565b9150612840826134ca565b602082019050919050565b6000612858602e8361302c565b9150612863826134f3565b604082019050919050565b600061287b60268361302c565b915061288682613542565b604082019050919050565b600061289e60028361303d565b91506128a982613591565b600282019050919050565b60006128c1601c8361302c565b91506128cc826135ba565b602082019050919050565b60006128e460228361302c565b91506128ef826135e3565b604082019050919050565b600061290760178361302c565b915061291282613632565b602082019050919050565b600061292a602e8361302c565b91506129358261365b565b604082019050919050565b600061294d60228361302c565b9150612958826136aa565b604082019050919050565b6000612970601a8361302c565b915061297b826136f9565b602082019050919050565b600061299360208361302c565b915061299e82613722565b602082019050919050565b60006129b660208361302c565b91506129c18261374b565b602082019050919050565b60006129d960268361302c565b91506129e482613774565b604082019050919050565b60006129fc60158361302c565b9150612a07826137c3565b602082019050919050565b6000612a1f60188361302c565b9150612a2a826137ec565b602082019050919050565b6000612a42602b8361302c565b9150612a4d82613815565b604082019050919050565b6000612a65601f8361302c565b9150612a7082613864565b602082019050919050565b612a8481613183565b82525050565b612a938161318d565b82525050565b6000612aa482612891565b9150612ab0828561274c565b602082019150612ac0828461274c565b6020820191508190509392505050565b6000602082019050612ae5600083018461271f565b92915050565b6000608082019050612b00600083018761271f565b612b0d6020830186612a7b565b612b1a6040830185612a8a565b612b276060830184612a7b565b95945050505050565b6000602082019050612b45600083018461272e565b92915050565b6000602082019050612b60600083018461273d565b92915050565b600060a082019050612b7b600083018861273d565b612b88602083018761273d565b612b95604083018661273d565b612ba26060830185612a7b565b612baf608083018461271f565b9695505050505050565b6000606082019050612bce600083018661273d565b612bdb6020830185612a7b565b612be86040830184612a8a565b949350505050565b6000608082019050612c05600083018761273d565b612c126020830186612a8a565b612c1f604083018561273d565b612c2c606083018461273d565b95945050505050565b60006020820190508181036000830152612c4f8184612763565b905092915050565b60006020820190508181036000830152612c708161279c565b9050919050565b60006020820190508181036000830152612c90816127bf565b9050919050565b60006020820190508181036000830152612cb0816127e2565b9050919050565b60006020820190508181036000830152612cd081612805565b9050919050565b60006020820190508181036000830152612cf081612828565b9050919050565b60006020820190508181036000830152612d108161284b565b9050919050565b60006020820190508181036000830152612d308161286e565b9050919050565b60006020820190508181036000830152612d50816128b4565b9050919050565b60006020820190508181036000830152612d70816128d7565b9050919050565b60006020820190508181036000830152612d90816128fa565b9050919050565b60006020820190508181036000830152612db08161291d565b9050919050565b60006020820190508181036000830152612dd081612940565b9050919050565b60006020820190508181036000830152612df081612963565b9050919050565b60006020820190508181036000830152612e1081612986565b9050919050565b60006020820190508181036000830152612e30816129a9565b9050919050565b60006020820190508181036000830152612e50816129cc565b9050919050565b60006020820190508181036000830152612e70816129ef565b9050919050565b60006020820190508181036000830152612e9081612a12565b9050919050565b60006020820190508181036000830152612eb081612a35565b9050919050565b60006020820190508181036000830152612ed081612a58565b9050919050565b6000602082019050612eec6000830184612a7b565b92915050565b6000604082019050612f076000830185612a7b565b612f146020830184612a7b565b9392505050565b600060a082019050612f306000830188612a7b565b612f3d6020830187612a7b565b612f4a6040830186612a7b565b612f576060830185612a7b565b612f646080830184612a7b565b9695505050505050565b6000612f78612f89565b9050612f848282613238565b919050565b6000604051905090565b600067ffffffffffffffff821115612fae57612fad6133a7565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612fda57612fd96133a7565b5b612fe3826133ef565b9050602081019050919050565b600067ffffffffffffffff82111561300b5761300a6133a7565b5b613014826133ef565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061305382613183565b915061305e83613183565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613093576130926132bc565b5b828201905092915050565b60006130a982613183565b91506130b483613183565b9250826130c4576130c36132eb565b5b828204905092915050565b60006130da82613183565b91506130e583613183565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561311e5761311d6132bc565b5b828202905092915050565b600061313482613163565b9050919050565b600061314682613163565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156131c75780820151818401526020810190506131ac565b838111156131d6576000848401525b50505050565b60006131e782613183565b915060008214156131fb576131fa6132bc565b5b600182039050919050565b6000600282049050600182168061321e57607f821691505b6020821081141561323257613231613349565b5b50919050565b613241826133ef565b810181811067ffffffffffffffff821117156132605761325f6133a7565b5b80604052505050565b600061327482613183565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132a7576132a66132bc565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f766f74696e67506572696f64206d75737420626520677265617465722074686160008201527f6e20310000000000000000000000000000000000000000000000000000000000602082015250565b7f6d616a6f7269747920796573566f746573206e6f742072656163686564000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f766f74696e6720706572696f6420686173207061737365640000000000000000600082015250565b7f612071756f72756d20686173206e6f74206265656e207265616368656420666f60008201527f72207468652070726f706f73616c000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f6d656d62657220697320616c7265616479207265676973746572656400000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f766f7465722068617320616c726561647920766f746564000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f6f6e6c79205573756c206d6f64756c65206d617920656e746572000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f766f74696e6720706572696f6420686173206e6f742070617373656420796574600082015250565b7f71756f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d60008201527f696e61746f720000000000000000000000000000000000000000000000000000602082015250565b7f766f746572206973206e6f742061206d656d6265720000000000000000000000600082015250565b7f6d656d626572206973206e6f7420726567697374657265640000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f696e76616c69642076616c756520666f7220656e756d20566f74655479706500600082015250565b61389681613129565b81146138a157600080fd5b50565b6138ad8161313b565b81146138b857600080fd5b50565b6138c481613183565b81146138cf57600080fd5b50565b6138db8161318d565b81146138e657600080fd5b5056fea26469706673582212202998d3ac12686723d61ca7d42d7e69c70a3e57b6229f6c3802dcc0214f4c6a2b64736f6c63430008060033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "Nathan Ginnever - <team@hyphal.xyz>",
        "kind": "dev",
        "methods": {
          "finalizeStrategy(uint256)": {
            "details": "Calls the proposal module to notify that a quorum has been reached.",
            "params": {
              "proposalId": "the proposal to vote for."
            }
          },
          "hasVoted(uint256,address)": {
            "details": "Returns true if an account has voted on a specific proposal.",
            "params": {
              "account": "the account to inspect.",
              "proposalId": "the proposal to inspect."
            },
            "returns": {
              "_0": "boolean."
            }
          },
          "isPassed(uint256)": {
            "details": "Determines if a proposal has succeeded.",
            "params": {
              "proposalId": "the proposal to vote for."
            },
            "returns": {
              "_0": "boolean."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "receiveProposal(bytes)": {
            "details": "Called by the proposal module, this notifes the strategy of a new proposal.",
            "params": {
              "data": "any extra data to pass to the voting strategy"
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "setUsul(address)": {
            "details": "Sets the executor to a new account (`newExecutor`)."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "updateTimeLockPeriod(uint256)": {
            "details": "Updates the grace period time after a proposal passed before it can execute.",
            "params": {
              "newTimeLockPeriod": "the new delay before execution."
            }
          },
          "updateVotingPeriod(uint256)": {
            "details": "Updates the time that proposals are active for voting.",
            "params": {
              "newPeriod": "the voting window."
            }
          },
          "version()": {
            "details": "ERC712 version."
          },
          "vote(uint256,uint8,bytes)": {
            "details": "Submits a vote for a proposal.",
            "params": {
              "proposalId": "the proposal to vote for.",
              "support": "against, for, or abstain."
            }
          },
          "voteSignature(uint256,uint8,bytes,bytes)": {
            "details": "Submits a vote for a proposal by ERC712 signature.",
            "params": {
              "proposalId": "the proposal to vote for.",
              "signature": "712 signed vote.",
              "support": "against, for, or abstain."
            }
          }
        },
        "title": "OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_14076": {
              "entryPoint": null,
              "id": 14076,
              "parameterSlots": 7,
              "returnSlots": 0
            },
            "@__EIP712_init_unchained_4530": {
              "entryPoint": 1549,
              "id": 4530,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__Ownable_init_3396": {
              "entryPoint": 921,
              "id": 3396,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__Ownable_init_unchained_3407": {
              "entryPoint": 2151,
              "id": 3407,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_isConstructor_3566": {
              "entryPoint": 891,
              "id": 3566,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_3837": {
              "entryPoint": 2267,
              "id": 3837,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_transferOwnership_3487": {
              "entryPoint": 2479,
              "id": 3487,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_updateQuorumNumerator_9383": {
              "entryPoint": 2317,
              "id": 9383,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@addMember_9217": {
              "entryPoint": 1021,
              "id": 9217,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@isContract_3585": {
              "entryPoint": 2116,
              "id": 3585,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@owner_3416": {
              "entryPoint": 2275,
              "id": 3416,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quorumDenominator_9337": {
              "entryPoint": 2677,
              "id": 9337,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@setUp_14189": {
              "entryPoint": 136,
              "id": 14189,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@transferOwnership_3467": {
              "entryPoint": 1838,
              "id": 3467,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateQuorumNumerator_9356": {
              "entryPoint": 1675,
              "id": 9356,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@version_9698": {
              "entryPoint": 1488,
              "id": 9698,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 2862,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_available_length_t_string_memory_ptr_fromMemory": {
              "entryPoint": 2985,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 3060,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_address_payable_fromMemory": {
              "entryPoint": 3083,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 3106,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_string_memory_ptr_fromMemory": {
              "entryPoint": 3157,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256_fromMemory": {
              "entryPoint": 3208,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 3231,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 3472,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            },
            "abi_encodeUpdatedPos_t_address_to_t_address": {
              "entryPoint": 3713,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_address_to_t_address": {
              "entryPoint": 3739,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 3756,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack": {
              "entryPoint": 3773,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 3879,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 3944,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 3983,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 4022,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 4061,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 4100,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 4139,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 4178,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 4217,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 4234,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_array$_t_address_$dyn_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 4263,
              "id": null,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4402,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4436,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4470,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4504,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4538,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4572,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4606,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 4640,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 4685,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": 4716,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 4726,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_t_string_memory_ptr": {
              "entryPoint": 4773,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 4827,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 4843,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 4854,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_nextElement_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 4865,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack": {
              "entryPoint": 4878,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 4895,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 4912,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 5009,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_address_payable": {
              "entryPoint": 5029,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 5049,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 5081,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 5091,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 5145,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 5199,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "increment_t_uint256": {
              "entryPoint": 5253,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 5331,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 5378,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 5425,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 5472,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": 5519,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
              "entryPoint": 5524,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
              "entryPoint": 5529,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": 5534,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 5539,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 5544,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b": {
              "entryPoint": 5561,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
              "entryPoint": 5640,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff": {
              "entryPoint": 5719,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759": {
              "entryPoint": 5760,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
              "entryPoint": 5839,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347": {
              "entryPoint": 5880,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b": {
              "entryPoint": 5959,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 6038,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address_payable": {
              "entryPoint": 6064,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 6090,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:21830:72",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "137:631:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "147:90:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "229:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_array$_t_address_$dyn_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "172:56:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "172:64:72"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "156:15:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "156:81:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "147:5:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "246:16:72",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "257:5:72"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "250:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "279:5:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "286:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "272:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "272:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "272:21:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "302:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "313:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "320:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "309:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "309:16:72"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "302:3:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "335:17:72",
                          "value": {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "346:6:72"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "339:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "401:103:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nodeType": "YulIdentifier",
                                    "src": "415:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "415:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "415:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "371:3:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "380:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "388:4:72",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "376:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "376:17:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "367:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "367:27:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "396:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "364:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "364:36:72"
                          },
                          "nodeType": "YulIf",
                          "src": "361:2:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "573:189:72",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "588:21:72",
                                "value": {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "606:3:72"
                                },
                                "variables": [
                                  {
                                    "name": "elementPos",
                                    "nodeType": "YulTypedName",
                                    "src": "592:10:72",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "630:3:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "elementPos",
                                          "nodeType": "YulIdentifier",
                                          "src": "667:10:72"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "679:3:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_t_address_fromMemory",
                                        "nodeType": "YulIdentifier",
                                        "src": "635:31:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "635:48:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "623:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "623:61:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "623:61:72"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "697:21:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "708:3:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "713:4:72",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "704:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "704:14:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "697:3:72"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "731:21:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "742:3:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "747:4:72",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "738:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "738:14:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "731:3:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "535:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "538:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "532:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "532:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "546:18:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "548:14:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "557:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "560:1:72",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "553:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "553:9:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "548:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "517:14:72",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "519:10:72",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "528:1:72",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "523:1:72",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "513:249:72"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "107:6:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "115:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "123:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "131:5:72",
                        "type": ""
                      }
                    ],
                    "src": "24:744:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "869:326:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "879:75:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "946:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_string_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "904:41:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "904:49:72"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "888:15:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "888:66:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "879:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "970:5:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "977:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "963:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "963:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "963:21:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "993:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "1008:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1015:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1004:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1004:16:72"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "997:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1058:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nodeType": "YulIdentifier",
                                    "src": "1060:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1060:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1060:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1039:3:72"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1044:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1035:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1035:16:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1053:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1032:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1032:25:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1029:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1172:3:72"
                              },
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1177:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1182:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1150:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1150:39:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1150:39:72"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "842:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "847:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "855:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "863:5:72",
                        "type": ""
                      }
                    ],
                    "src": "774:421:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1264:80:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1274:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1289:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1283:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1283:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1274:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1332:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "1305:26:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1305:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1305:33:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1242:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1250:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1258:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1201:143:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1421:88:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1431:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1446:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1440:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1440:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1431:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1497:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address_payable",
                              "nodeType": "YulIdentifier",
                              "src": "1462:34:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1462:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1462:41:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_payable_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1399:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1407:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1415:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1350:159:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1620:297:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1669:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "1671:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1671:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1671:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1648:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1656:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1644:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1644:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1663:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1640:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1640:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1633:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1633:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1630:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1761:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1781:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1775:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1775:13:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1765:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1797:114:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1884:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1892:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1880:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1880:17:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1899:6:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1907:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1806:73:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1806:105:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1797:5:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1598:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1606:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1614:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1532:385:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2010:282:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2059:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "2061:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2061:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2061:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2038:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2046:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2034:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2034:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2053:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2030:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2030:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2023:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2023:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2020:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2151:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2171:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2165:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2165:13:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2155:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2187:99:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2259:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2267:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2255:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2255:17:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2274:6:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2282:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "2196:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2196:90:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2187:5:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1988:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1996:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2004:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1937:355:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2361:80:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2371:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2386:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2380:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2380:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "2371:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2429:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "2402:26:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2402:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2402:33:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2339:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2347:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2355:5:72",
                        "type": ""
                      }
                    ],
                    "src": "2298:143:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2677:1469:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2724:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "2726:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2726:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2726:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2698:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2707:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2694:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2694:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2719:3:72",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2690:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2690:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2687:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "2817:136:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2832:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2846:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "2836:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2861:82:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2915:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2926:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2911:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2911:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2935:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_payable_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "2871:39:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2871:72:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2861:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "2963:137:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2978:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2992:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "2982:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3008:82:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3062:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3073:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3058:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3058:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3082:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_payable_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "3018:39:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3018:72:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3008:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "3110:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3125:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3139:2:72",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3129:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3155:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3201:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3212:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3197:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3197:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3221:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "3165:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3165:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "3155:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "3249:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3264:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3278:2:72",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3268:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3294:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3340:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3351:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3336:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3336:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3360:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "3304:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3304:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "3294:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "3388:130:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3403:17:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3417:3:72",
                                "type": "",
                                "value": "128"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3407:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3434:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3480:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3491:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3476:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3476:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3500:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "3444:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3444:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "3434:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "3528:293:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3543:40:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3567:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3578:3:72",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3563:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3563:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3557:5:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3557:26:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3547:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3630:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "3632:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3632:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3632:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3602:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3610:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3599:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3599:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "3596:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3727:84:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3783:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3794:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3779:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3779:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3803:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "3737:41:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3737:74:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "3727:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "3831:308:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3846:40:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3870:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3881:3:72",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3866:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3866:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3860:5:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3860:26:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3850:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3933:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "3935:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3935:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3935:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3905:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3913:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3902:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3902:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "3899:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4030:99:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4101:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4112:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4097:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4097:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4121:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4040:56:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4040:89:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value6",
                                  "nodeType": "YulIdentifier",
                                  "src": "4030:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2599:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2610:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2622:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2630:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2638:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2646:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2654:6:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "2662:6:72",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "2670:6:72",
                        "type": ""
                      }
                    ],
                    "src": "2447:1699:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4366:1453:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4413:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "4415:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4415:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4415:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4387:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4396:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4383:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4383:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4408:3:72",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4379:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4379:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4376:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4506:128:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4521:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4535:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4525:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4550:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4596:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4607:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4592:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4592:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4616:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4560:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4560:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4550:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4644:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4659:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4673:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4663:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4689:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4735:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4746:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4731:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4731:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4755:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4699:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4699:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4689:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4783:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4798:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4812:2:72",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4802:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4828:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4874:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4885:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4870:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4870:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4894:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4838:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4838:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "4828:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4922:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4937:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4951:2:72",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4941:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4967:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5013:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5024:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5009:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5009:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5033:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4977:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4977:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "4967:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5061:130:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5076:17:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5090:3:72",
                                "type": "",
                                "value": "128"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5080:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5107:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5153:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5164:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5149:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5149:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5173:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5117:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5117:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "5107:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5201:293:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5216:40:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5240:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5251:3:72",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5236:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5236:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5230:5:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5230:26:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5220:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5303:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "5305:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5305:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5305:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5275:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5283:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5272:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5272:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "5269:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5400:84:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5456:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5467:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5452:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5452:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5476:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5410:41:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5410:74:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "5400:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5504:308:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5519:40:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5543:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5554:3:72",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5539:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5539:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5533:5:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5533:26:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5523:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5606:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "5608:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5608:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5608:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5578:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5586:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5575:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5575:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "5572:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5703:99:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5774:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5785:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5770:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5770:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5794:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5713:56:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5713:89:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value6",
                                  "nodeType": "YulIdentifier",
                                  "src": "5703:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4288:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4299:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4311:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4319:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4327:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4335:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4343:6:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "4351:6:72",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "4359:6:72",
                        "type": ""
                      }
                    ],
                    "src": "4152:1667:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5905:99:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5949:6:72"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5957:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "5915:33:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5915:46:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5915:46:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5970:28:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5988:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5993:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5984:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5984:14:72"
                          },
                          "variableNames": [
                            {
                              "name": "updatedPos",
                              "nodeType": "YulIdentifier",
                              "src": "5970:10:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encodeUpdatedPos_t_address_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5878:6:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5886:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updatedPos",
                        "nodeType": "YulTypedName",
                        "src": "5894:10:72",
                        "type": ""
                      }
                    ],
                    "src": "5825:179:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6065:53:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6082:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6105:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "6087:17:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6087:24:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6075:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6075:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6075:37:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6053:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6060:3:72",
                        "type": ""
                      }
                    ],
                    "src": "6010:108:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6189:53:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6206:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6229:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "6211:17:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6211:24:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6199:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6199:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6199:37:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6177:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6184:3:72",
                        "type": ""
                      }
                    ],
                    "src": "6124:118:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6402:608:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6412:68:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6474:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_array$_t_address_$dyn_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "6426:47:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6426:54:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "6416:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6489:93:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6570:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6575:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6496:73:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6496:86:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "6489:3:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6591:71:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6656:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_dataslot_t_array$_t_address_$dyn_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "6606:49:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6606:56:72"
                          },
                          "variables": [
                            {
                              "name": "baseRef",
                              "nodeType": "YulTypedName",
                              "src": "6595:7:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6671:21:72",
                          "value": {
                            "name": "baseRef",
                            "nodeType": "YulIdentifier",
                            "src": "6685:7:72"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "6675:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6761:224:72",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6775:34:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "6802:6:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "6796:5:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6796:13:72"
                                },
                                "variables": [
                                  {
                                    "name": "elementValue0",
                                    "nodeType": "YulTypedName",
                                    "src": "6779:13:72",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "6822:70:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "elementValue0",
                                      "nodeType": "YulIdentifier",
                                      "src": "6873:13:72"
                                    },
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "6888:3:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encodeUpdatedPos_t_address_to_t_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "6829:43:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6829:63:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6822:3:72"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "6905:70:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "6968:6:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_nextElement_t_array$_t_address_$dyn_memory_ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "6915:52:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6915:60:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "6905:6:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "6723:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6726:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6720:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6720:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6734:18:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6736:14:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "6745:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6748:1:72",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6741:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6741:9:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "6736:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6705:14:72",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "6707:10:72",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6716:1:72",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "6711:1:72",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "6701:284:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6994:10:72",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "7001:3:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6994:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6381:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6388:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6397:3:72",
                        "type": ""
                      }
                    ],
                    "src": "6278:732:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7108:272:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7118:53:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7165:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "7132:32:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7132:39:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7122:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7180:78:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7246:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7251:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7187:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7187:71:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7180:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7293:5:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7300:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7289:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7289:16:72"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7307:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7312:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "7267:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7267:52:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7267:52:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7328:46:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7339:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7366:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "7344:21:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7344:29:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7335:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7335:39:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7328:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7089:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7096:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7104:3:72",
                        "type": ""
                      }
                    ],
                    "src": "7016:364:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7532:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7542:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7608:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7613:2:72",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7549:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7549:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7542:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7714:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b",
                              "nodeType": "YulIdentifier",
                              "src": "7625:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7625:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7625:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7727:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7738:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7743:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7734:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7734:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7727:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7520:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7528:3:72",
                        "type": ""
                      }
                    ],
                    "src": "7386:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7904:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7914:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7980:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7985:2:72",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7921:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7921:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7914:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8086:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                              "nodeType": "YulIdentifier",
                              "src": "7997:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7997:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7997:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8099:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8110:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8115:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8106:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8106:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "8099:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7892:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7900:3:72",
                        "type": ""
                      }
                    ],
                    "src": "7758:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8276:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8286:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8352:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8357:2:72",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8293:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8293:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "8286:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8458:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff",
                              "nodeType": "YulIdentifier",
                              "src": "8369:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8369:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8369:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8471:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8482:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8487:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8478:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8478:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "8471:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "8264:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "8272:3:72",
                        "type": ""
                      }
                    ],
                    "src": "8130:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8648:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8658:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8724:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8729:2:72",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8665:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8665:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "8658:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8830:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
                              "nodeType": "YulIdentifier",
                              "src": "8741:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8741:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8741:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8843:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8854:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8859:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8850:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8850:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "8843:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "8636:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "8644:3:72",
                        "type": ""
                      }
                    ],
                    "src": "8502:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9020:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9030:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9096:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9101:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9037:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9037:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "9030:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9202:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                              "nodeType": "YulIdentifier",
                              "src": "9113:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9113:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9113:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9215:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9226:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9231:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9222:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9222:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "9215:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9008:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9016:3:72",
                        "type": ""
                      }
                    ],
                    "src": "8874:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9392:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9402:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9468:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9473:2:72",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9409:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9409:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "9402:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9574:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347",
                              "nodeType": "YulIdentifier",
                              "src": "9485:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9485:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9485:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9587:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9598:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9603:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9594:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9594:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "9587:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9380:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9388:3:72",
                        "type": ""
                      }
                    ],
                    "src": "9246:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9764:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9774:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9840:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9845:2:72",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9781:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9781:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "9774:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9946:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
                              "nodeType": "YulIdentifier",
                              "src": "9857:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9857:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9857:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9959:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9970:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9975:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9966:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9966:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "9959:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9752:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9760:3:72",
                        "type": ""
                      }
                    ],
                    "src": "9618:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10055:53:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10072:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10095:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "10077:17:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10077:24:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10065:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10065:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10065:37:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10043:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10050:3:72",
                        "type": ""
                      }
                    ],
                    "src": "9990:118:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10212:124:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10222:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10234:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10245:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10230:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10230:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10222:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10302:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10315:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10326:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10311:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10311:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10258:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10258:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10258:71:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10184:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10196:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10207:4:72",
                        "type": ""
                      }
                    ],
                    "src": "10114:222:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10678:792:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10688:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10700:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10711:3:72",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10696:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10696:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10688:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10769:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10782:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10793:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10778:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10778:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10725:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10725:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10725:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10850:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10863:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10874:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10859:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10859:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10806:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10806:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10806:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10932:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10945:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10956:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10941:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10941:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10888:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10888:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10888:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "11014:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11027:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11038:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11023:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11023:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10970:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10970:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10970:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "11096:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11109:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11120:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11105:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11105:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11052:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11052:73:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11052:73:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11146:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11157:3:72",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11142:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11142:19:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "11167:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11173:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11163:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11163:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11135:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11135:49:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11135:49:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11193:86:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "11265:6:72"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "11274:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11201:63:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11201:78:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11193:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11300:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11311:3:72",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11296:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11296:19:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "11321:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11327:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11317:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11317:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11289:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11289:49:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11289:49:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11347:116:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value6",
                                "nodeType": "YulIdentifier",
                                "src": "11449:6:72"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "11458:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11355:93:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11355:108:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11347:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_array$_t_address_$dyn_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10602:9:72",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "10614:6:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "10622:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "10630:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10638:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10646:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10654:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10662:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10673:4:72",
                        "type": ""
                      }
                    ],
                    "src": "10342:1128:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11647:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11657:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11669:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11680:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11665:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11665:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11657:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11704:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11715:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11700:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11700:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "11723:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11729:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11719:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11719:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11693:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11693:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11693:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11749:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "11883:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11757:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11757:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11749:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11627:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11642:4:72",
                        "type": ""
                      }
                    ],
                    "src": "11476:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12072:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12082:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12094:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12105:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12090:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12090:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12082:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12129:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12140:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12125:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12125:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "12148:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12154:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12144:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12144:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12118:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12118:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12118:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12174:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "12308:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "12182:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12182:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12174:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12052:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12067:4:72",
                        "type": ""
                      }
                    ],
                    "src": "11901:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12497:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12507:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12519:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12530:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12515:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12515:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12507:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12554:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12565:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12550:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12550:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "12573:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12579:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12569:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12569:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12543:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12543:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12543:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12599:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "12733:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "12607:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12607:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12599:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12477:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12492:4:72",
                        "type": ""
                      }
                    ],
                    "src": "12326:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12922:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12932:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12944:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12955:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12940:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12940:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12932:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12979:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12990:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12975:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12975:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "12998:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13004:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12994:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12994:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12968:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12968:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12968:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13024:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "13158:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13032:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13032:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13024:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12902:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12917:4:72",
                        "type": ""
                      }
                    ],
                    "src": "12751:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13347:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13357:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13369:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13380:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13365:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13365:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13357:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13404:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13415:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13400:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13400:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "13423:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13429:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13419:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13419:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13393:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13393:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13393:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13449:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "13583:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13457:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13457:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13449:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13327:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13342:4:72",
                        "type": ""
                      }
                    ],
                    "src": "13176:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13772:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13782:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13794:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13805:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13790:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13790:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13782:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13829:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13840:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13825:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13825:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "13848:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13854:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13844:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13844:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13818:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13818:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13818:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13874:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "14008:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13882:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13882:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13874:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13752:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13767:4:72",
                        "type": ""
                      }
                    ],
                    "src": "13601:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14197:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14207:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14219:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14230:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14215:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14215:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14207:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14254:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14265:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14250:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14250:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "14273:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14279:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14269:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14269:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14243:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14243:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14243:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14299:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "14433:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14307:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14307:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14299:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14177:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14192:4:72",
                        "type": ""
                      }
                    ],
                    "src": "14026:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14577:206:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14587:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14599:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14610:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14595:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14595:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14587:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "14667:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14680:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14691:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14676:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14676:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14623:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14623:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14623:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "14748:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14761:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14772:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14757:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14757:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14704:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14704:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14704:72:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14541:9:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14553:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14561:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14572:4:72",
                        "type": ""
                      }
                    ],
                    "src": "14451:332:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14830:88:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14840:30:72",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nodeType": "YulIdentifier",
                              "src": "14850:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14850:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "14840:6:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "14899:6:72"
                              },
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "14907:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "14879:19:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14879:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14879:33:72"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "14814:4:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "14823:6:72",
                        "type": ""
                      }
                    ],
                    "src": "14789:129:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14964:35:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14974:19:72",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14990:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14984:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14984:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "14974:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "14957:6:72",
                        "type": ""
                      }
                    ],
                    "src": "14924:75:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15087:229:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15192:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "15194:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15194:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15194:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15164:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15172:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15161:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15161:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "15158:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15224:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15236:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15244:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "15232:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15232:17:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "15224:4:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15286:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "15298:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15304:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15294:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15294:15:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "15286:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "15071:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "15082:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15005:311:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15389:241:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15494:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "15496:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15496:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15496:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15466:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15474:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15463:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15463:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "15460:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15526:37:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15556:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nodeType": "YulIdentifier",
                              "src": "15534:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15534:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "15526:4:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15600:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "15612:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15618:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15608:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15608:15:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "15600:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "15373:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "15384:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15322:308:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15708:60:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15718:11:72",
                          "value": {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "15726:3:72"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "15718:4:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15739:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "15751:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15756:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15747:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15747:14:72"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "15739:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "15695:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "15703:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15636:132:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15848:40:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15859:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15875:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15869:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15869:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "15859:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15831:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "15841:6:72",
                        "type": ""
                      }
                    ],
                    "src": "15774:114:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15953:40:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15964:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15980:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15974:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15974:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "15964:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15936:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "15946:6:72",
                        "type": ""
                      }
                    ],
                    "src": "15894:99:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16074:38:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16084:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "16096:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16101:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16092:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16092:14:72"
                          },
                          "variableNames": [
                            {
                              "name": "next",
                              "nodeType": "YulIdentifier",
                              "src": "16084:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_nextElement_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "16061:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "next",
                        "nodeType": "YulTypedName",
                        "src": "16069:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15999:113:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16229:73:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16246:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "16251:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16239:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16239:19:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16239:19:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16267:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16286:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16291:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16282:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16282:14:72"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "16267:11:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16201:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "16206:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "16217:11:72",
                        "type": ""
                      }
                    ],
                    "src": "16118:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16404:73:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16421:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "16426:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16414:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16414:19:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16414:19:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16442:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16461:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16466:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16457:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16457:14:72"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "16442:11:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16376:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "16381:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "16392:11:72",
                        "type": ""
                      }
                    ],
                    "src": "16308:169:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16531:300:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16541:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16564:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "16546:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16546:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "16541:1:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16575:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16598:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "16580:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16580:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "16575:1:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16773:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16775:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16775:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16775:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "16685:1:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "16678:6:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16678:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "16671:6:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16671:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "16693:1:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16700:66:72",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "16768:1:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "16696:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16696:74:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "16690:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16690:81:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16667:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16667:105:72"
                          },
                          "nodeType": "YulIf",
                          "src": "16664:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16805:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16820:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16823:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "16816:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16816:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "16805:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16514:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16517:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "16523:7:72",
                        "type": ""
                      }
                    ],
                    "src": "16483:348:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16882:51:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16892:35:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16921:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "16903:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16903:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "16892:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "16864:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "16874:7:72",
                        "type": ""
                      }
                    ],
                    "src": "16837:96:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16992:51:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17002:35:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17031:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "17013:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17013:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "17002:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "16974:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "16984:7:72",
                        "type": ""
                      }
                    ],
                    "src": "16939:104:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17094:81:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17104:65:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17119:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17126:42:72",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17115:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17115:54:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "17104:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "17076:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "17086:7:72",
                        "type": ""
                      }
                    ],
                    "src": "17049:126:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17226:32:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17236:16:72",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "17247:5:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "17236:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "17208:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "17218:7:72",
                        "type": ""
                      }
                    ],
                    "src": "17181:77:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17313:258:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17323:10:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17332:1:72",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "17327:1:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17392:63:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "17417:3:72"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "17422:1:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "17413:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17413:11:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "17436:3:72"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "17441:1:72"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "17432:3:72"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "17432:11:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "17426:5:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17426:18:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17406:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17406:39:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17406:39:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "17353:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17356:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "17350:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17350:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "17364:19:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "17366:15:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "17375:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17378:2:72",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "17371:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17371:10:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "17366:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "17346:3:72",
                            "statements": []
                          },
                          "src": "17342:113:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17489:76:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "17539:3:72"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "17544:6:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "17535:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17535:16:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17553:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17528:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17528:27:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17528:27:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "17470:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17473:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "17467:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17467:13:72"
                          },
                          "nodeType": "YulIf",
                          "src": "17464:2:72"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "17295:3:72",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "17300:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "17305:6:72",
                        "type": ""
                      }
                    ],
                    "src": "17264:307:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17628:269:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17638:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "17652:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17658:1:72",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "17648:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17648:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "17638:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17669:38:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "17699:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17705:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17695:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17695:12:72"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "17673:18:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17746:51:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "17760:27:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "17774:6:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17782:4:72",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "17770:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17770:17:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17760:6:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "17726:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "17719:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17719:26:72"
                          },
                          "nodeType": "YulIf",
                          "src": "17716:2:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17849:42:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nodeType": "YulIdentifier",
                                    "src": "17863:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17863:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17863:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "17813:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17836:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17844:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17833:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17833:14:72"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "17810:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17810:38:72"
                          },
                          "nodeType": "YulIf",
                          "src": "17807:2:72"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "17612:4:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "17621:6:72",
                        "type": ""
                      }
                    ],
                    "src": "17577:320:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17946:238:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17956:58:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "17978:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "18008:4:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "17986:21:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17986:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17974:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17974:40:72"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "17960:10:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18125:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "18127:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18127:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18127:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18068:10:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18080:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18065:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18065:34:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18104:10:72"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18116:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18101:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18101:22:72"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "18062:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18062:62:72"
                          },
                          "nodeType": "YulIf",
                          "src": "18059:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18163:2:72",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "18167:10:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18156:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18156:22:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18156:22:72"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "17932:6:72",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "17940:4:72",
                        "type": ""
                      }
                    ],
                    "src": "17903:281:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18233:190:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18243:33:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18270:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "18252:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18252:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "18243:5:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18366:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "18368:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18368:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18368:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18291:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18298:66:72",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "18288:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18288:77:72"
                          },
                          "nodeType": "YulIf",
                          "src": "18285:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18397:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18408:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18415:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18404:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18404:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "18397:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "18219:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "18229:3:72",
                        "type": ""
                      }
                    ],
                    "src": "18190:233:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18457:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18474:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18477:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18467:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18467:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18467:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18571:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18574:4:72",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18564:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18564:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18564:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18595:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18598:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "18588:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18588:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18588:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18429:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18643:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18660:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18663:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18653:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18653:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18653:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18757:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18760:4:72",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18750:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18750:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18750:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18781:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18784:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "18774:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18774:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18774:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18615:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18829:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18846:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18849:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18839:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18839:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18839:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18943:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18946:4:72",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18936:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18936:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18936:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18967:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18970:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "18960:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18960:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18960:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18801:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19015:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19032:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19035:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19025:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19025:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19025:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19129:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19132:4:72",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19122:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19122:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19122:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19153:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19156:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19146:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19146:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19146:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "18987:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19262:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19279:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19282:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19272:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19272:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19272:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19173:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19385:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19402:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19405:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19395:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19395:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19395:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19296:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19508:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19525:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19528:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19518:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19518:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19518:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19419:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19631:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19648:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19651:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19641:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19641:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19641:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19542:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19754:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19771:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19774:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19764:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19764:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19764:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19665:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19836:54:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19846:38:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "19864:5:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19871:2:72",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19860:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19860:14:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19880:2:72",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "19876:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19876:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "19856:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19856:28:72"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nodeType": "YulIdentifier",
                              "src": "19846:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "19819:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nodeType": "YulTypedName",
                        "src": "19829:6:72",
                        "type": ""
                      }
                    ],
                    "src": "19788:102:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20002:116:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20024:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20032:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20020:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20020:14:72"
                              },
                              {
                                "hexValue": "766f74696e67506572696f64206d757374206265206772656174657220746861",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20036:34:72",
                                "type": "",
                                "value": "votingPeriod must be greater tha"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20013:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20013:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20013:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20092:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20100:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20088:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20088:15:72"
                              },
                              {
                                "hexValue": "6e2031",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20105:5:72",
                                "type": "",
                                "value": "n 1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20081:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20081:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20081:30:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "19994:6:72",
                        "type": ""
                      }
                    ],
                    "src": "19896:222:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20230:119:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20252:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20260:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20248:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20248:14:72"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20264:34:72",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20241:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20241:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20241:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20320:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20328:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20316:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20316:15:72"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20333:8:72",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20309:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20309:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20309:33:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "20222:6:72",
                        "type": ""
                      }
                    ],
                    "src": "20124:225:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20461:72:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20483:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20491:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20479:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20479:14:72"
                              },
                              {
                                "hexValue": "6d656d62657220697320616c72656164792072656769737465726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20495:30:72",
                                "type": "",
                                "value": "member is already registered"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20472:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20472:54:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20472:54:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "20453:6:72",
                        "type": ""
                      }
                    ],
                    "src": "20355:178:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20645:127:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20667:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20675:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20663:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20663:14:72"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20679:34:72",
                                "type": "",
                                "value": "Initializable: contract is alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20656:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20656:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20656:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20735:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20743:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20731:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20731:15:72"
                              },
                              {
                                "hexValue": "647920696e697469616c697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20748:16:72",
                                "type": "",
                                "value": "dy initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20724:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20724:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20724:41:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "20637:6:72",
                        "type": ""
                      }
                    ],
                    "src": "20539:233:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20884:76:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20906:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20914:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20902:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20902:14:72"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20918:34:72",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20895:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20895:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20895:58:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "20876:6:72",
                        "type": ""
                      }
                    ],
                    "src": "20778:182:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21072:119:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21094:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21102:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21090:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21090:14:72"
                              },
                              {
                                "hexValue": "71756f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21106:34:72",
                                "type": "",
                                "value": "quorumNumerator over quorumDenom"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21083:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21083:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21083:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21162:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21170:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21158:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21158:15:72"
                              },
                              {
                                "hexValue": "696e61746f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21175:8:72",
                                "type": "",
                                "value": "inator"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21151:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21151:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21151:33:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "21064:6:72",
                        "type": ""
                      }
                    ],
                    "src": "20966:225:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21303:124:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21325:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21333:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21321:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21321:14:72"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21337:34:72",
                                "type": "",
                                "value": "Initializable: contract is not i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21314:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21314:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21314:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21393:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21401:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21389:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21389:15:72"
                              },
                              {
                                "hexValue": "6e697469616c697a696e67",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21406:13:72",
                                "type": "",
                                "value": "nitializing"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21382:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21382:38:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21382:38:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "21295:6:72",
                        "type": ""
                      }
                    ],
                    "src": "21197:230:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21476:79:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21533:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21542:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21545:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21535:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21535:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21535:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "21499:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "21524:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "21506:17:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21506:24:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "21496:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21496:35:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21489:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21489:43:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21486:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21469:5:72",
                        "type": ""
                      }
                    ],
                    "src": "21433:122:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21612:87:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21677:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21686:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21689:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21679:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21679:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21679:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "21635:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "21668:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address_payable",
                                      "nodeType": "YulIdentifier",
                                      "src": "21642:25:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21642:32:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "21632:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21632:43:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21625:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21625:51:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21622:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21605:5:72",
                        "type": ""
                      }
                    ],
                    "src": "21561:138:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21748:79:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21805:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21814:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21817:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21807:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21807:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21807:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "21771:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "21796:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "21778:17:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21778:24:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "21768:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21768:35:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21761:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21761:43:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21758:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21741:5:72",
                        "type": ""
                      }
                    ],
                    "src": "21705:122:72"
                  }
                ]
              },
              "contents": "{\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_payable_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_payable_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_payable_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 160))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value5 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 192))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value6 := abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 160))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value5 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 192))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value6 := abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_array$_t_address_$dyn_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        mstore(add(headStart, 160), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value5,  tail)\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b(memPtr) {\n\n        mstore(add(memPtr, 0), \"votingPeriod must be greater tha\")\n\n        mstore(add(memPtr, 32), \"n 1\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff(memPtr) {\n\n        mstore(add(memPtr, 0), \"member is already registered\")\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347(memPtr) {\n\n        mstore(add(memPtr, 0), \"quorumNumerator over quorumDenom\")\n\n        mstore(add(memPtr, 32), \"inator\")\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
              "id": 72,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5113 CODESIZE SUB DUP1 PUSH3 0x5113 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0xD90 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x58 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x10A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH3 0x7A DUP2 PUSH3 0x88 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH3 0x17E4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH3 0xB2 JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xC3 JUMP JUMPDEST PUSH3 0xC2 PUSH3 0x37B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST PUSH3 0x105 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xFC SWAP1 PUSH3 0x1198 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH3 0x156 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0x177 SWAP2 SWAP1 PUSH3 0xC9F JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP PUSH1 0x1 DUP6 GT PUSH3 0x1CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1C2 SWAP1 PUSH3 0x1132 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1DB PUSH3 0x399 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH3 0x22C JUMPI PUSH3 0x216 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x202 JUMPI PUSH3 0x201 PUSH3 0x1531 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH3 0x3FD PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 DUP1 PUSH3 0x223 SWAP1 PUSH3 0x1485 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x1DE JUMP JUMPDEST POP PUSH3 0x24E DUP3 PUSH3 0x242 PUSH3 0x5D0 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x60D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x25F DUP5 PUSH3 0x68B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x270 DUP8 PUSH3 0x72E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH3 0x27F SWAP2 SWAP1 PUSH3 0x1330 JUMP JUMPDEST PUSH1 0x9A DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 PUSH3 0x2D5 SWAP2 SWAP1 PUSH3 0x1330 JUMP JUMPDEST PUSH1 0x9B DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9C SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x2F3 SWAP3 SWAP2 SWAP1 PUSH3 0xA7E JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x61586574B8B0EDCA97136AD4CB664EEC4742D53DE53403D531506632E6342A39 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP DUP1 ISZERO PUSH3 0x377 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x393 ADDRESS PUSH3 0x844 PUSH1 0x20 SHL PUSH3 0x1732 OR PUSH1 0x20 SHR JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH3 0x3EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3E2 SWAP1 PUSH3 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x3FB PUSH3 0x867 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH3 0x40D PUSH3 0x8DB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x433 PUSH3 0x8E3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x48C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x483 SWAP1 PUSH3 0x11BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH3 0x522 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x519 SWAP1 PUSH3 0x1176 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x9E PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH3 0x58F SWAP1 PUSH3 0x1485 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH32 0xB251EB052AFC73FFD02FFE85AD79990A8B3FED60D76DBC2FA2FDD7123DFFD914 DUP2 PUSH1 0x40 MLOAD PUSH3 0x5C5 SWAP2 SWAP1 PUSH3 0x108A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH3 0x65F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x656 SWAP1 PUSH3 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x66 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x67 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH3 0x69B PUSH3 0x8DB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x6C1 PUSH3 0x8E3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x71A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x711 SWAP1 PUSH3 0x11BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x72B DUP2 PUSH3 0x90D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x73E PUSH3 0x8DB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x764 PUSH3 0x8E3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x7BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x7B4 SWAP1 PUSH3 0x11BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x830 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x827 SWAP1 PUSH3 0x1154 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x841 DUP2 PUSH3 0x9AF PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH3 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x8B0 SWAP1 PUSH3 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x8D9 PUSH3 0x8CD PUSH3 0x8DB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x9AF PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH3 0x91D PUSH3 0xA75 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 GT ISZERO PUSH3 0x962 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x959 SWAP1 PUSH3 0x11DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 SLOAD SWAP1 POP DUP2 PUSH1 0xA0 DUP2 SWAP1 SSTORE POP PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH3 0x9A3 SWAP3 SWAP2 SWAP1 PUSH3 0x1220 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xA8C SWAP1 PUSH3 0x1419 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xAB0 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xAFC JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xACB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xAFC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xAFC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xAFB JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xADE JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xB0B SWAP2 SWAP1 PUSH3 0xB0F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xB2A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0xB10 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB45 PUSH3 0xB3F DUP5 PUSH3 0x1276 JUMP JUMPDEST PUSH3 0x124D JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0xB6B JUMPI PUSH3 0xB6A PUSH3 0x1594 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0xB9F JUMPI DUP2 PUSH3 0xB84 DUP9 DUP3 PUSH3 0xBF4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xB6E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xBC0 PUSH3 0xBBA DUP5 PUSH3 0x12A5 JUMP JUMPDEST PUSH3 0x124D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0xBDF JUMPI PUSH3 0xBDE PUSH3 0x1599 JUMP JUMPDEST JUMPDEST PUSH3 0xBEC DUP5 DUP3 DUP6 PUSH3 0x13E3 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0xC05 DUP2 PUSH3 0x1796 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0xC1C DUP2 PUSH3 0x17B0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xC3A JUMPI PUSH3 0xC39 PUSH3 0x158F JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0xC4C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0xB2E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xC6D JUMPI PUSH3 0xC6C PUSH3 0x158F JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0xC7F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0xBA9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0xC99 DUP2 PUSH3 0x17CA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0xCC1 JUMPI PUSH3 0xCC0 PUSH3 0x15A3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xCD1 DUP11 DUP3 DUP12 ADD PUSH3 0xC0B JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH3 0xCE4 DUP11 DUP3 DUP12 ADD PUSH3 0xC0B JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH3 0xCF7 DUP11 DUP3 DUP12 ADD PUSH3 0xC88 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH3 0xD0A DUP11 DUP3 DUP12 ADD PUSH3 0xC88 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH3 0xD1D DUP11 DUP3 DUP12 ADD PUSH3 0xC88 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xD41 JUMPI PUSH3 0xD40 PUSH3 0x159E JUMP JUMPDEST JUMPDEST PUSH3 0xD4F DUP11 DUP3 DUP12 ADD PUSH3 0xC55 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xD73 JUMPI PUSH3 0xD72 PUSH3 0x159E JUMP JUMPDEST JUMPDEST PUSH3 0xD81 DUP11 DUP3 DUP12 ADD PUSH3 0xC22 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0xDB2 JUMPI PUSH3 0xDB1 PUSH3 0x15A3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xDC2 DUP11 DUP3 DUP12 ADD PUSH3 0xBF4 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH3 0xDD5 DUP11 DUP3 DUP12 ADD PUSH3 0xBF4 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH3 0xDE8 DUP11 DUP3 DUP12 ADD PUSH3 0xC88 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH3 0xDFB DUP11 DUP3 DUP12 ADD PUSH3 0xC88 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH3 0xE0E DUP11 DUP3 DUP12 ADD PUSH3 0xC88 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xE32 JUMPI PUSH3 0xE31 PUSH3 0x159E JUMP JUMPDEST JUMPDEST PUSH3 0xE40 DUP11 DUP3 DUP12 ADD PUSH3 0xC55 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xE64 JUMPI PUSH3 0xE63 PUSH3 0x159E JUMP JUMPDEST JUMPDEST PUSH3 0xE72 DUP11 DUP3 DUP12 ADD PUSH3 0xC22 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xE8F DUP4 DUP4 PUSH3 0xE9B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0xEA6 DUP2 PUSH3 0x1391 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0xEB7 DUP2 PUSH3 0x1391 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xECA DUP3 PUSH3 0x12EB JUMP JUMPDEST PUSH3 0xED6 DUP2 DUP6 PUSH3 0x130E JUMP JUMPDEST SWAP4 POP PUSH3 0xEE3 DUP4 PUSH3 0x12DB JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xF1A JUMPI DUP2 MLOAD PUSH3 0xEFE DUP9 DUP3 PUSH3 0xE81 JUMP JUMPDEST SWAP8 POP PUSH3 0xF0B DUP4 PUSH3 0x1301 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xEE7 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF34 DUP3 PUSH3 0x12F6 JUMP JUMPDEST PUSH3 0xF40 DUP2 DUP6 PUSH3 0x131F JUMP JUMPDEST SWAP4 POP PUSH3 0xF52 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x13E3 JUMP JUMPDEST PUSH3 0xF5D DUP2 PUSH3 0x15A8 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF77 PUSH1 0x23 DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0xF84 DUP3 PUSH3 0x15B9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF9E PUSH1 0x26 DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0xFAB DUP3 PUSH3 0x1608 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFC5 PUSH1 0x1C DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0xFD2 DUP3 PUSH3 0x1657 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFEC PUSH1 0x2E DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0xFF9 DUP3 PUSH3 0x1680 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1013 PUSH1 0x20 DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0x1020 DUP3 PUSH3 0x16CF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x103A PUSH1 0x26 DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0x1047 DUP3 PUSH3 0x16F8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1061 PUSH1 0x2B DUP4 PUSH3 0x131F JUMP JUMPDEST SWAP2 POP PUSH3 0x106E DUP3 PUSH3 0x1747 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1084 DUP2 PUSH3 0x13D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x10A1 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0xEAC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH3 0x10BE PUSH1 0x0 DUP4 ADD DUP11 PUSH3 0xEAC JUMP JUMPDEST PUSH3 0x10CD PUSH1 0x20 DUP4 ADD DUP10 PUSH3 0xEAC JUMP JUMPDEST PUSH3 0x10DC PUSH1 0x40 DUP4 ADD DUP9 PUSH3 0x1079 JUMP JUMPDEST PUSH3 0x10EB PUSH1 0x60 DUP4 ADD DUP8 PUSH3 0x1079 JUMP JUMPDEST PUSH3 0x10FA PUSH1 0x80 DUP4 ADD DUP7 PUSH3 0x1079 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH3 0x110E DUP2 DUP6 PUSH3 0xF27 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH3 0x1124 DUP2 DUP5 PUSH3 0xEBD JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x114D DUP2 PUSH3 0xF68 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x116F DUP2 PUSH3 0xF8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1191 DUP2 PUSH3 0xFB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x11B3 DUP2 PUSH3 0xFDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x11D5 DUP2 PUSH3 0x1004 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x11F7 DUP2 PUSH3 0x102B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x1219 DUP2 PUSH3 0x1052 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0x1237 PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x1079 JUMP JUMPDEST PUSH3 0x1246 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x1079 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1259 PUSH3 0x126C JUMP JUMPDEST SWAP1 POP PUSH3 0x1267 DUP3 DUP3 PUSH3 0x144F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1294 JUMPI PUSH3 0x1293 PUSH3 0x1560 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x12C3 JUMPI PUSH3 0x12C2 PUSH3 0x1560 JUMP JUMPDEST JUMPDEST PUSH3 0x12CE DUP3 PUSH3 0x15A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x133D DUP3 PUSH3 0x13D9 JUMP JUMPDEST SWAP2 POP PUSH3 0x134A DUP4 PUSH3 0x13D9 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x1386 JUMPI PUSH3 0x1385 PUSH3 0x14D3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x139E DUP3 PUSH3 0x13B9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x13B2 DUP3 PUSH3 0x13B9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1403 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x13E6 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x1413 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x1432 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x1449 JUMPI PUSH3 0x1448 PUSH3 0x1502 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x145A DUP3 PUSH3 0x15A8 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x147C JUMPI PUSH3 0x147B PUSH3 0x1560 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1492 DUP3 PUSH3 0x13D9 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH3 0x14C8 JUMPI PUSH3 0x14C7 PUSH3 0x14D3 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x766F74696E67506572696F64206D757374206265206772656174657220746861 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E20310000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D656D62657220697320616C7265616479207265676973746572656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x71756F72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x696E61746F720000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH3 0x17A1 DUP2 PUSH3 0x1391 JUMP JUMPDEST DUP2 EQ PUSH3 0x17AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x17BB DUP2 PUSH3 0x13A5 JUMP JUMPDEST DUP2 EQ PUSH3 0x17C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x17D5 DUP2 PUSH3 0x13D9 JUMP JUMPDEST DUP2 EQ PUSH3 0x17E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x391F DUP1 PUSH3 0x17F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78446BC1 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA7713A70 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD69BE91C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD69BE91C EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0xEF00EF43 EQ PUSH2 0x516 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xF8CE560A EQ PUSH2 0x54E JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0xA7713A70 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xA8A829C1 EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0xBF1B5EFD EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0xCA6D56DC EQ PUSH2 0x4CA JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x86522973 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x86522973 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x97C3D334 EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xA4F9EDBF EQ PUSH2 0x458 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x78446BC1 EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x79BFB089 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x7A3FF4D2 EQ PUSH2 0x3E2 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1F2C562E GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x49403183 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x49403183 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x380 JUMPI DUP1 PUSH4 0x747691DF EQ PUSH2 0x38A JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1F2C562E EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x224F3263 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x43859632 EQ PUSH2 0x302 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x8AE4B0C EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xB1CA49A EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x11AEE380 EQ PUSH2 0x2AC JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x13CF08B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x2A251A3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x6F3F9E6 EQ PUSH2 0x226 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x5BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24A PUSH2 0x642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x2C35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x287 SWAP2 SWAP1 PUSH2 0x2B30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x6F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B4 PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH2 0x8AF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x921 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x25D1 JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x329 SWAP2 SWAP1 PUSH2 0x2B30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x2B30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x36A PUSH2 0xC07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x2C35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x388 PUSH2 0xC44 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x392 PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B0 PUSH2 0xCF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0xCF8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0xDD4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x406 PUSH2 0xE9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x2B4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x424 PUSH2 0xEBF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x431 SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x442 PUSH2 0xEE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x44F SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x472 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x46D SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0xEF2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x47C PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x489 SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A7 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x119E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0x2611 JUMP JUMPDEST PUSH2 0x12E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4DF SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x12F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x500 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4FB SWAP2 SWAP1 PUSH2 0x24EE JUMP JUMPDEST PUSH2 0x14A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50D SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x530 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x52B SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x1543 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x54C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x547 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x160A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x568 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x563 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x575 SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x9D PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0x9A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x5C2 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5E0 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62D SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x63F DUP2 PUSH2 0x175D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x9C DUP1 SLOAD PUSH2 0x64F SWAP1 PUSH2 0x3206 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x67B SWAP1 PUSH2 0x3206 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6C8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x69D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6C8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6AB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x9F PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x6F8 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x716 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x763 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x7FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7F6 SWAP1 PUSH2 0x2E77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x9E PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x86A SWAP1 PUSH2 0x31DC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH32 0x6E76FB4C77256006D9C38EC7D82B45A8C8F3C27B1D6766FFFC42DFB8DE684492 DUP2 PUSH1 0x40 MLOAD PUSH2 0x89E SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x9E SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90D PUSH2 0x907 PUSH32 0xB780761E36898D7EC1CC0FB66FDD6A8A42E635EE643709D6B20652C68A3B29F5 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8EC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x17F2 JUMP JUMPDEST DUP5 PUSH2 0x180C JUMP JUMPDEST SWAP1 POP PUSH2 0x91A DUP6 DUP3 DUP7 PUSH2 0x1833 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A8 SWAP1 PUSH2 0x2DD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9C7 SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST SWAP1 POP TIMESTAMP PUSH1 0x9A SLOAD PUSH2 0x9D7 SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP NUMBER PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH32 0x3AEDA78F6230A590817748B94B63D690CEC4D1A15D494DFC7006E0A39E77F81A DUP2 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xA3D SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT PUSH2 0xB24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB1B SWAP1 PUSH2 0x2C97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB2D NUMBER PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xB65 SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST LT ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9D SWAP1 PUSH2 0x2CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD LT PUSH2 0xBFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF5 SWAP1 PUSH2 0x2E17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC4C PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6A PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCCA PUSH1 0x0 PUSH2 0x1AC8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x9B SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD01 DUP2 PUSH2 0xAB4 JUMP JUMPDEST ISZERO PUSH2 0xD98 JUMPI PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4FD61348 DUP3 PUSH1 0x9B SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD65 SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH32 0x54FFCEE03E8B80C05E4D1C55E3DC60602D9082A899E50337B680C9C4C4D80A3A DUP2 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xDC9 SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xDDC PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDFA PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE50 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE47 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9B SLOAD SWAP1 POP DUP2 PUSH1 0x9B DUP2 SWAP1 SSTORE POP PUSH32 0x2A72574D775756E698A258FC07C826B7185131FFF8A96B868FEACAB45FB23432 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0xE8F SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0xB780761E36898D7EC1CC0FB66FDD6A8A42E635EE643709D6B20652C68A3B29F5 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF1A JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xF22 PUSH2 0x1B8E JUMP JUMPDEST JUMPDEST PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF59 SWAP1 PUSH2 0x2D97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0xFB2 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xFD1 SWAP2 SWAP1 PUSH2 0x2414 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP PUSH1 0x1 DUP6 GT PUSH2 0x1022 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1019 SWAP1 PUSH2 0x2C77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x102A PUSH2 0x1B9F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x106C JUMPI PUSH2 0x1059 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x104C JUMPI PUSH2 0x104B PUSH2 0x3378 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12F0 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1064 SWAP1 PUSH2 0x3269 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x102D JUMP JUMPDEST POP PUSH2 0x107E DUP3 PUSH2 0x1079 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0x1BF8 JUMP JUMPDEST PUSH2 0x1087 DUP5 PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x1090 DUP8 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x30CF JUMP JUMPDEST PUSH1 0x9A DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 PUSH2 0x10F1 SWAP2 SWAP1 PUSH2 0x30CF JUMP JUMPDEST PUSH1 0x9B DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9C SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x110D SWAP3 SWAP2 SWAP1 PUSH2 0x2148 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x61586574B8B0EDCA97136AD4CB664EEC4742D53DE53403D531506632E6342A39 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP DUP1 ISZERO PUSH2 0x1190 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x11A6 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C4 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x121A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1211 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x20C8544544AEFAEFDF339D996D855F2D4040CF93548344AA7DCB03B19E160CD1 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x12EB DUP4 CALLER DUP5 PUSH2 0x1833 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x12F8 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1316 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x136C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1363 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x13FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F6 SWAP1 PUSH2 0x2D37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x9E PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x146A SWAP1 PUSH2 0x3269 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH32 0xB251EB052AFC73FFD02FFE85AD79990A8B3FED60D76DBC2FA2FDD7123DFFD914 DUP2 PUSH1 0x40 MLOAD PUSH2 0x149E SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x9F PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1538 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x152F SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x154B PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1569 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B6 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9A SLOAD SWAP1 POP DUP2 PUSH1 0x9A DUP2 SWAP1 SSTORE POP PUSH32 0xFFC708F072CA56E3D45EF0CB288B96CB9378F5F63E1646868BFBC9C38F4263A1 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x15FE SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1612 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1630 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x167D SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x16F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16ED SWAP1 PUSH2 0x2D17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16FF DUP2 PUSH2 0x1AC8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170C PUSH2 0xEE9 JUMP JUMPDEST PUSH2 0x1714 PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x9E SLOAD PUSH2 0x1721 SWAP2 SWAP1 PUSH2 0x30CF JUMP JUMPDEST PUSH2 0x172B SWAP2 SWAP1 PUSH2 0x309E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1765 PUSH2 0xEE9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x179E SWAP1 PUSH2 0x2E37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 SLOAD SWAP1 POP DUP2 PUSH1 0xA0 DUP2 SWAP1 SSTORE POP PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x17E6 SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1805 PUSH2 0x17FF PUSH2 0x1C73 JUMP JUMPDEST DUP4 PUSH2 0x1CB3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x181B DUP6 DUP6 PUSH2 0x1CE6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1828 DUP2 PUSH2 0x1D69 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x188C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1883 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1896 DUP4 DUP4 PUSH2 0xA49 JUMP JUMPDEST ISZERO PUSH2 0x18D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18CD SWAP1 PUSH2 0x2D77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x194E DUP4 DUP6 PUSH2 0x14A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1964 JUMPI PUSH2 0x1963 PUSH2 0x331A JUMP JUMPDEST JUMPDEST PUSH1 0xFF AND DUP3 PUSH1 0xFF AND EQ ISZERO PUSH2 0x19A3 JUMPI DUP1 PUSH1 0x9D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1997 SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1A85 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x19B7 JUMPI PUSH2 0x19B6 PUSH2 0x331A JUMP JUMPDEST JUMPDEST PUSH1 0xFF AND DUP3 PUSH1 0xFF AND EQ ISZERO PUSH2 0x19F6 JUMPI DUP1 PUSH1 0x9D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x19EA SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1A84 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x1A09 JUMPI PUSH2 0x1A08 PUSH2 0x331A JUMP JUMPDEST JUMPDEST PUSH1 0xFF AND DUP3 PUSH1 0xFF AND EQ ISZERO PUSH2 0x1A48 JUMPI DUP1 PUSH1 0x9D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1A3C SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A7A SWAP1 PUSH2 0x2EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST JUMPDEST PUSH32 0x27EB20ECADC80D52F641A540B295D208F7C3735545D321B08E505116C6013199 DUP4 DUP6 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1ABA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B99 ADDRESS PUSH2 0x1732 JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BE5 SWAP1 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BF6 PUSH2 0x1F3E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3E SWAP1 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x66 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x67 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CAE PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1CA1 PUSH2 0x1F9F JUMP JUMPDEST PUSH2 0x1CA9 PUSH2 0x1FA9 JUMP JUMPDEST PUSH2 0x1FB3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CC8 SWAP3 SWAP2 SWAP1 PUSH2 0x2A99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x41 DUP4 MLOAD EQ ISZERO PUSH2 0x1D28 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0x1D1C DUP8 DUP3 DUP6 DUP6 PUSH2 0x1FED JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x40 DUP4 MLOAD EQ ISZERO PUSH2 0x1D59 JUMPI PUSH1 0x0 DUP1 PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP6 ADD MLOAD SWAP1 POP PUSH2 0x1D4E DUP7 DUP4 DUP4 PUSH2 0x20FA JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D7D JUMPI PUSH2 0x1D7C PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D90 JUMPI PUSH2 0x1D8F PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1D9B JUMPI PUSH2 0x1F3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1DAF JUMPI PUSH2 0x1DAE PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1DC2 JUMPI PUSH2 0x1DC1 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1E03 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DFA SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E2A JUMPI PUSH2 0x1E29 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1E6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E62 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E7F JUMPI PUSH2 0x1E7E PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E92 JUMPI PUSH2 0x1E91 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1ED3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ECA SWAP1 PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH2 0x1EE6 JUMPI PUSH2 0x1EE5 PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1EF9 JUMPI PUSH2 0x1EF8 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1F3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F31 SWAP1 PUSH2 0x2DB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F84 SWAP1 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F9D PUSH2 0x1F98 PUSH2 0x1755 JUMP JUMPDEST PUSH2 0x1AC8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x66 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1FCE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x2028 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x20F1 JUMP JUMPDEST PUSH1 0x1B DUP6 PUSH1 0xFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2040 JUMPI POP PUSH1 0x1C DUP6 PUSH1 0xFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2052 JUMPI PUSH1 0x0 PUSH1 0x4 SWAP2 POP SWAP2 POP PUSH2 0x20F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2077 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BF0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2099 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x20E8 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x20F1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 POP PUSH1 0x1B DUP6 PUSH1 0xFF SHR ADD SWAP1 POP PUSH2 0x213A DUP8 DUP3 DUP9 DUP6 PUSH2 0x1FED JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2154 SWAP1 PUSH2 0x3206 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2176 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x21BD JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x218F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x21BD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x21BD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x21BC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x21A1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x21CA SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x21E7 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x21CF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21FE PUSH2 0x21F9 DUP5 PUSH2 0x2F93 JUMP JUMPDEST PUSH2 0x2F6E JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x2221 JUMPI PUSH2 0x2220 PUSH2 0x33DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2251 JUMPI DUP2 PUSH2 0x2237 DUP9 DUP3 PUSH2 0x22F4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2224 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x226E PUSH2 0x2269 DUP5 PUSH2 0x2FBF JUMP JUMPDEST PUSH2 0x2F6E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x228A JUMPI PUSH2 0x2289 PUSH2 0x33E0 JUMP JUMPDEST JUMPDEST PUSH2 0x2295 DUP5 DUP3 DUP6 PUSH2 0x319A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22B0 PUSH2 0x22AB DUP5 PUSH2 0x2FF0 JUMP JUMPDEST PUSH2 0x2F6E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x22CC JUMPI PUSH2 0x22CB PUSH2 0x33E0 JUMP JUMPDEST JUMPDEST PUSH2 0x22D7 DUP5 DUP3 DUP6 PUSH2 0x31A9 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22EE DUP2 PUSH2 0x388D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2303 DUP2 PUSH2 0x388D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2318 DUP2 PUSH2 0x38A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2333 JUMPI PUSH2 0x2332 PUSH2 0x33D6 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x2343 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x21EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2361 JUMPI PUSH2 0x2360 PUSH2 0x33D6 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2371 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x225B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x238F JUMPI PUSH2 0x238E PUSH2 0x33D6 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x239F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x229D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23B7 DUP2 PUSH2 0x38BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x23CC DUP2 PUSH2 0x38BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23E1 DUP2 PUSH2 0x38D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23FD JUMPI PUSH2 0x23FC PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x240B DUP5 DUP3 DUP6 ADD PUSH2 0x22DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2433 JUMPI PUSH2 0x2432 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2441 DUP11 DUP3 DUP12 ADD PUSH2 0x2309 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x2452 DUP11 DUP3 DUP12 ADD PUSH2 0x2309 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x2463 DUP11 DUP3 DUP12 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x2474 DUP11 DUP3 DUP12 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2485 DUP11 DUP3 DUP12 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24A6 JUMPI PUSH2 0x24A5 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x24B2 DUP11 DUP3 DUP12 ADD PUSH2 0x237A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24D3 JUMPI PUSH2 0x24D2 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x24DF DUP11 DUP3 DUP12 ADD PUSH2 0x231E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2505 JUMPI PUSH2 0x2504 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2513 DUP6 DUP3 DUP7 ADD PUSH2 0x22DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2524 DUP6 DUP3 DUP7 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2544 JUMPI PUSH2 0x2543 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2562 JUMPI PUSH2 0x2561 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x256E DUP5 DUP3 DUP6 ADD PUSH2 0x234C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x258D JUMPI PUSH2 0x258C PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x259B DUP5 DUP3 DUP6 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25BA JUMPI PUSH2 0x25B9 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25C8 DUP5 DUP3 DUP6 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25E8 JUMPI PUSH2 0x25E7 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25F6 DUP6 DUP3 DUP7 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2607 DUP6 DUP3 DUP7 ADD PUSH2 0x22DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x262A JUMPI PUSH2 0x2629 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2638 DUP7 DUP3 DUP8 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2649 DUP7 DUP3 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x266A JUMPI PUSH2 0x2669 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x2676 DUP7 DUP3 DUP8 ADD PUSH2 0x234C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x269A JUMPI PUSH2 0x2699 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26A8 DUP8 DUP3 DUP9 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x26B9 DUP8 DUP3 DUP9 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26DA JUMPI PUSH2 0x26D9 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x26E6 DUP8 DUP3 DUP9 ADD PUSH2 0x234C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2707 JUMPI PUSH2 0x2706 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x2713 DUP8 DUP3 DUP9 ADD PUSH2 0x234C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x2728 DUP2 PUSH2 0x3129 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2737 DUP2 PUSH2 0x314D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2746 DUP2 PUSH2 0x3159 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x275D PUSH2 0x2758 DUP3 PUSH2 0x3159 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x276E DUP3 PUSH2 0x3021 JUMP JUMPDEST PUSH2 0x2778 DUP2 DUP6 PUSH2 0x302C JUMP JUMPDEST SWAP4 POP PUSH2 0x2788 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x31A9 JUMP JUMPDEST PUSH2 0x2791 DUP2 PUSH2 0x33EF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27A9 PUSH1 0x18 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x27B4 DUP3 PUSH2 0x3400 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27CC PUSH1 0x23 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x27D7 DUP3 PUSH2 0x3429 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EF PUSH1 0x1D DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x27FA DUP3 PUSH2 0x3478 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2812 PUSH1 0x1F DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x281D DUP3 PUSH2 0x34A1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2835 PUSH1 0x18 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2840 DUP3 PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2858 PUSH1 0x2E DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2863 DUP3 PUSH2 0x34F3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x287B PUSH1 0x26 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2886 DUP3 PUSH2 0x3542 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x289E PUSH1 0x2 DUP4 PUSH2 0x303D JUMP JUMPDEST SWAP2 POP PUSH2 0x28A9 DUP3 PUSH2 0x3591 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C1 PUSH1 0x1C DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x28CC DUP3 PUSH2 0x35BA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28E4 PUSH1 0x22 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x28EF DUP3 PUSH2 0x35E3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2907 PUSH1 0x17 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2912 DUP3 PUSH2 0x3632 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x292A PUSH1 0x2E DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2935 DUP3 PUSH2 0x365B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294D PUSH1 0x22 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2958 DUP3 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2970 PUSH1 0x1A DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x297B DUP3 PUSH2 0x36F9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2993 PUSH1 0x20 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x299E DUP3 PUSH2 0x3722 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29B6 PUSH1 0x20 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x29C1 DUP3 PUSH2 0x374B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D9 PUSH1 0x26 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x29E4 DUP3 PUSH2 0x3774 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29FC PUSH1 0x15 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A07 DUP3 PUSH2 0x37C3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A1F PUSH1 0x18 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A2A DUP3 PUSH2 0x37EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A42 PUSH1 0x2B DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A4D DUP3 PUSH2 0x3815 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A65 PUSH1 0x1F DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A70 DUP3 PUSH2 0x3864 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A84 DUP2 PUSH2 0x3183 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2A93 DUP2 PUSH2 0x318D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AA4 DUP3 PUSH2 0x2891 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AB0 DUP3 DUP6 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2AC0 DUP3 DUP5 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2AE5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x271F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2B00 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x271F JUMP JUMPDEST PUSH2 0x2B0D PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2B1A PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x2B27 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B45 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x272E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B60 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x273D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2B7B PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2B88 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2B95 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2BA2 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2BAF PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x271F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2BCE PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2BDB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2BE8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A8A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2C05 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2C12 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x2C1F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2C2C PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x273D JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C4F DUP2 DUP5 PUSH2 0x2763 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C70 DUP2 PUSH2 0x279C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C90 DUP2 PUSH2 0x27BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CB0 DUP2 PUSH2 0x27E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CD0 DUP2 PUSH2 0x2805 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF0 DUP2 PUSH2 0x2828 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D10 DUP2 PUSH2 0x284B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D30 DUP2 PUSH2 0x286E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D50 DUP2 PUSH2 0x28B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D70 DUP2 PUSH2 0x28D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D90 DUP2 PUSH2 0x28FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DB0 DUP2 PUSH2 0x291D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DD0 DUP2 PUSH2 0x2940 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DF0 DUP2 PUSH2 0x2963 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E10 DUP2 PUSH2 0x2986 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E30 DUP2 PUSH2 0x29A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E50 DUP2 PUSH2 0x29CC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E70 DUP2 PUSH2 0x29EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E90 DUP2 PUSH2 0x2A12 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EB0 DUP2 PUSH2 0x2A35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2ED0 DUP2 PUSH2 0x2A58 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EEC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F07 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F14 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2F30 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F3D PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F4A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F57 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F64 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F78 PUSH2 0x2F89 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F84 DUP3 DUP3 PUSH2 0x3238 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2FAE JUMPI PUSH2 0x2FAD PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2FDA JUMPI PUSH2 0x2FD9 PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST PUSH2 0x2FE3 DUP3 PUSH2 0x33EF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x300B JUMPI PUSH2 0x300A PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST PUSH2 0x3014 DUP3 PUSH2 0x33EF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3053 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH2 0x305E DUP4 PUSH2 0x3183 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3093 JUMPI PUSH2 0x3092 PUSH2 0x32BC JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A9 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH2 0x30B4 DUP4 PUSH2 0x3183 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x30C4 JUMPI PUSH2 0x30C3 PUSH2 0x32EB JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DA DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH2 0x30E5 DUP4 PUSH2 0x3183 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x311E JUMPI PUSH2 0x311D PUSH2 0x32BC JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3134 DUP3 PUSH2 0x3163 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3146 DUP3 PUSH2 0x3163 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31C7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x31AC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x31D6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E7 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x31FB JUMPI PUSH2 0x31FA PUSH2 0x32BC JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x321E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3232 JUMPI PUSH2 0x3231 PUSH2 0x3349 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3241 DUP3 PUSH2 0x33EF JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3260 JUMPI PUSH2 0x325F PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3274 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x32A7 JUMPI PUSH2 0x32A6 PUSH2 0x32BC JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F74696E67506572696F64206D757374206265206772656174657220746861 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E20310000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D616A6F7269747920796573566F746573206E6F742072656163686564000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F74696E6720706572696F6420686173207061737365640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x612071756F72756D20686173206E6F74206265656E207265616368656420666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72207468652070726F706F73616C000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D656D62657220697320616C7265616479207265676973746572656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F7465722068617320616C726561647920766F746564000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6F6E6C79205573756C206D6F64756C65206D617920656E746572000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F74696E6720706572696F6420686173206E6F742070617373656420796574 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x71756F72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x696E61746F720000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F746572206973206E6F742061206D656D6265720000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D656D626572206973206E6F7420726567697374657265640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x696E76616C69642076616C756520666F7220656E756D20566F74655479706500 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x3896 DUP2 PUSH2 0x3129 JUMP JUMPDEST DUP2 EQ PUSH2 0x38A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38AD DUP2 PUSH2 0x313B JUMP JUMPDEST DUP2 EQ PUSH2 0x38B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38C4 DUP2 PUSH2 0x3183 JUMP JUMPDEST DUP2 EQ PUSH2 0x38CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38DB DUP2 PUSH2 0x318D JUMP JUMPDEST DUP2 EQ PUSH2 0x38E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 SWAP9 0xD3 0xAC SLT PUSH9 0x6723D61CA7D42D7E69 0xC7 EXP RETURNDATACOPY JUMPI 0xB6 0x22 SWAP16 PUSH13 0x3802DCC0214F4C6A2B64736F6C PUSH4 0x43000806 STOP CALLER ",
          "sourceMap": "459:2848:71:-:0;;;676:495;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;919:23;969:6;989:11;1014:13;1041:16;1071:15;1100:5;1119:8;945:192;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;919:218;;1147:17;1153:10;1147:5;;;:17;;:::i;:::-;909:262;676:495;;;;;;;459:2848;;1177:1049;2369:13:29;;;;;;;;;;;:48;;2405:12;;;;;;;;;;2404:13;2369:48;;;2385:16;:14;;;:16;;:::i;:::-;2369:48;2361:107;;;;;;;;;;;;:::i;:::-;;;;;;;;;2479:19;2502:13;;;;;;;;;;;2501:14;2479:36;;2529:14;2525:98;;;2575:4;2559:13;;:20;;;;;;;;;;;;;;;;;;2608:4;2593:12;;:19;;;;;;;;;;;;;;;;;;2525:98;1269:14:71::1;1297:19:::0;1330:21:::1;1365:24:::0;1403:23:::1;1440:19:::0;1473:25:::1;1539:10;1511:134;;;;;;;;;;;;:::i;:::-;1255:390;;;;;;;;;;;;;;1679:1;1663:13;:17;1655:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1730:16;:14;;;:16;;:::i;:::-;1761:9;1756:93;1780:8;:15;1776:1;:19;1756:93;;;1816:22;1826:8;1835:1;1826:11;;;;;;;;:::i;:::-;;;;;;;;1816:9;;;:22;;:::i;:::-;1797:3;;;;;:::i;:::-;;;;1756:93;;;;1858:41;1882:5;1889:9;:7;;;:9;;:::i;:::-;1858:23;;;:41;;:::i;:::-;1909:39;1931:16;1909:21;;;:39;;:::i;:::-;1958:25;1976:6;1958:17;;;:25;;:::i;:::-;2024:9;2008:13;:25;;;;:::i;:::-;1993:12;:40;;;;2083:11;2070:10;;:24;;;;;;;;;;;;;;;;;;2139:9;2121:15;:27;;;;:::i;:::-;2104:14;:44;;;;2165:5;2158:4;:12;;;;;;;;;;;;:::i;:::-;;2212:6;2185:34;;2199:11;2185:34;;;;;;;;;;;;1245:981;;;;;;;2649:14:29::0;2645:66;;;2695:5;2679:13;;:21;;;;;;;;;;;;;;;;;;2645:66;2080:637;1177:1049:71;:::o;3037:123:29:-;3085:4;3109:44;3147:4;3109:29;;;;;:44;;:::i;:::-;3108:45;3101:52;;3037:123;:::o;988:95:28:-;2952:13:29;;;;;;;;;;;2944:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1050:26:28::1;:24;;;:26;;:::i;:::-;988:95::o:0;562:231:54:-;1499:12:28;:10;;;:12;;:::i;:::-;1488:23;;:7;:5;;;:7;;:::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;659:5:54::1;640:24;;:7;:15;648:6;640:15;;;;;;;;;;;;;;;;;;;;;;;;;:24;;;632:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;725:4;707:7;:15;715:6;707:15;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;739:11;;:13;;;;;;;;;:::i;:::-;;;;;;767:19;779:6;767:19;;;;;;:::i;:::-;;;;;;;;562:231:::0;:::o;1760:90:58:-;1808:13;1833:10;;;;;;;;;;;;;;;;;;;1760:90;:::o;2429:297:34:-;2952:13:29;;;;;;;;;;;2944:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2541:18:34::1;2578:4;2562:22;;;;;;2541:43;;2594:21;2634:7;2618:25;;;;;;2594:49;;2668:10;2653:12;:25;;;;2706:13;2688:15;:31;;;;2531:195;;2429:297:::0;;:::o;794:171:56:-;1499:12:28;:10;;;:12;;:::i;:::-;1488:23;;:7;:5;;;:7;;:::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;916:42:56::1;939:18;916:22;;;:42;;:::i;:::-;794:171:::0;:::o;2158:198:28:-;1499:12;:10;;;:12;;:::i;:::-;1488:23;;:7;:5;;;:7;;:::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2266:1:::1;2246:22;;:8;:22;;;;2238:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2321:28;2340:8;2321:18;;;:28;;:::i;:::-;2158:198:::0;:::o;1186:320:30:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;1089:111:28:-;2952:13:29;;;;;;;;;;;2944:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1161:32:28::1;1180:12;:10;;;:12;;:::i;:::-;1161:18;;;:32;;:::i;:::-;1089:111::o:0;850:96:31:-;903:7;929:10;922:17;;850:96;:::o;1276:85:28:-;1322:7;1348:6;;;;;;;;;;;1341:13;;1276:85;:::o;971:421:56:-;1121:19;:17;;;:19;;:::i;:::-;1099:18;:41;;1078:126;;;;;;;;;;;;:::i;:::-;;;;;;;;;1215:26;1244:16;;1215:45;;1289:18;1270:16;:37;;;;1323:62;1346:18;1366;1323:62;;;;;;;:::i;:::-;;;;;;;;1068:324;971:421;:::o;2510:187:28:-;2583:16;2602:6;;;;;;;;;;;2583:25;;2627:8;2618:6;;:17;;;;;;;;;;;;;;;;;;2681:8;2650:40;;2671:8;2650:40;;;;;;;;;;;;2573:124;2510:187;:::o;613:94:56:-;671:7;697:3;690:10;;613:94;:::o;459:2848:71:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:744:72:-;131:5;156:81;172:64;229:6;172:64;:::i;:::-;156:81;:::i;:::-;147:90;;257:5;286:6;279:5;272:21;320:4;313:5;309:16;302:23;;346:6;396:3;388:4;380:6;376:17;371:3;367:27;364:36;361:2;;;415:79;;:::i;:::-;361:2;528:1;513:249;538:6;535:1;532:13;513:249;;;606:3;635:48;679:3;667:10;635:48;:::i;:::-;630:3;623:61;713:4;708:3;704:14;697:21;;747:4;742:3;738:14;731:21;;573:189;560:1;557;553:9;548:14;;513:249;;;517:14;137:631;;;;;;;:::o;774:421::-;863:5;888:66;904:49;946:6;904:49;:::i;:::-;888:66;:::i;:::-;879:75;;977:6;970:5;963:21;1015:4;1008:5;1004:16;1053:3;1044:6;1039:3;1035:16;1032:25;1029:2;;;1060:79;;:::i;:::-;1029:2;1150:39;1182:6;1177:3;1172;1150:39;:::i;:::-;869:326;;;;;;:::o;1201:143::-;1258:5;1289:6;1283:13;1274:22;;1305:33;1332:5;1305:33;:::i;:::-;1264:80;;;;:::o;1350:159::-;1415:5;1446:6;1440:13;1431:22;;1462:41;1497:5;1462:41;:::i;:::-;1421:88;;;;:::o;1532:385::-;1614:5;1663:3;1656:4;1648:6;1644:17;1640:27;1630:2;;1671:79;;:::i;:::-;1630:2;1781:6;1775:13;1806:105;1907:3;1899:6;1892:4;1884:6;1880:17;1806:105;:::i;:::-;1797:114;;1620:297;;;;;:::o;1937:355::-;2004:5;2053:3;2046:4;2038:6;2034:17;2030:27;2020:2;;2061:79;;:::i;:::-;2020:2;2171:6;2165:13;2196:90;2282:3;2274:6;2267:4;2259:6;2255:17;2196:90;:::i;:::-;2187:99;;2010:282;;;;;:::o;2298:143::-;2355:5;2386:6;2380:13;2371:22;;2402:33;2429:5;2402:33;:::i;:::-;2361:80;;;;:::o;2447:1699::-;2622:6;2630;2638;2646;2654;2662;2670;2719:3;2707:9;2698:7;2694:23;2690:33;2687:2;;;2726:79;;:::i;:::-;2687:2;2846:1;2871:72;2935:7;2926:6;2915:9;2911:22;2871:72;:::i;:::-;2861:82;;2817:136;2992:2;3018:72;3082:7;3073:6;3062:9;3058:22;3018:72;:::i;:::-;3008:82;;2963:137;3139:2;3165:64;3221:7;3212:6;3201:9;3197:22;3165:64;:::i;:::-;3155:74;;3110:129;3278:2;3304:64;3360:7;3351:6;3340:9;3336:22;3304:64;:::i;:::-;3294:74;;3249:129;3417:3;3444:64;3500:7;3491:6;3480:9;3476:22;3444:64;:::i;:::-;3434:74;;3388:130;3578:3;3567:9;3563:19;3557:26;3610:18;3602:6;3599:30;3596:2;;;3632:79;;:::i;:::-;3596:2;3737:74;3803:7;3794:6;3783:9;3779:22;3737:74;:::i;:::-;3727:84;;3528:293;3881:3;3870:9;3866:19;3860:26;3913:18;3905:6;3902:30;3899:2;;;3935:79;;:::i;:::-;3899:2;4040:89;4121:7;4112:6;4101:9;4097:22;4040:89;:::i;:::-;4030:99;;3831:308;2677:1469;;;;;;;;;;:::o;4152:1667::-;4311:6;4319;4327;4335;4343;4351;4359;4408:3;4396:9;4387:7;4383:23;4379:33;4376:2;;;4415:79;;:::i;:::-;4376:2;4535:1;4560:64;4616:7;4607:6;4596:9;4592:22;4560:64;:::i;:::-;4550:74;;4506:128;4673:2;4699:64;4755:7;4746:6;4735:9;4731:22;4699:64;:::i;:::-;4689:74;;4644:129;4812:2;4838:64;4894:7;4885:6;4874:9;4870:22;4838:64;:::i;:::-;4828:74;;4783:129;4951:2;4977:64;5033:7;5024:6;5013:9;5009:22;4977:64;:::i;:::-;4967:74;;4922:129;5090:3;5117:64;5173:7;5164:6;5153:9;5149:22;5117:64;:::i;:::-;5107:74;;5061:130;5251:3;5240:9;5236:19;5230:26;5283:18;5275:6;5272:30;5269:2;;;5305:79;;:::i;:::-;5269:2;5410:74;5476:7;5467:6;5456:9;5452:22;5410:74;:::i;:::-;5400:84;;5201:293;5554:3;5543:9;5539:19;5533:26;5586:18;5578:6;5575:30;5572:2;;;5608:79;;:::i;:::-;5572:2;5713:89;5794:7;5785:6;5774:9;5770:22;5713:89;:::i;:::-;5703:99;;5504:308;4366:1453;;;;;;;;;;:::o;5825:179::-;5894:10;5915:46;5957:3;5949:6;5915:46;:::i;:::-;5993:4;5988:3;5984:14;5970:28;;5905:99;;;;:::o;6010:108::-;6087:24;6105:5;6087:24;:::i;:::-;6082:3;6075:37;6065:53;;:::o;6124:118::-;6211:24;6229:5;6211:24;:::i;:::-;6206:3;6199:37;6189:53;;:::o;6278:732::-;6397:3;6426:54;6474:5;6426:54;:::i;:::-;6496:86;6575:6;6570:3;6496:86;:::i;:::-;6489:93;;6606:56;6656:5;6606:56;:::i;:::-;6685:7;6716:1;6701:284;6726:6;6723:1;6720:13;6701:284;;;6802:6;6796:13;6829:63;6888:3;6873:13;6829:63;:::i;:::-;6822:70;;6915:60;6968:6;6915:60;:::i;:::-;6905:70;;6761:224;6748:1;6745;6741:9;6736:14;;6701:284;;;6705:14;7001:3;6994:10;;6402:608;;;;;;;:::o;7016:364::-;7104:3;7132:39;7165:5;7132:39;:::i;:::-;7187:71;7251:6;7246:3;7187:71;:::i;:::-;7180:78;;7267:52;7312:6;7307:3;7300:4;7293:5;7289:16;7267:52;:::i;:::-;7344:29;7366:6;7344:29;:::i;:::-;7339:3;7335:39;7328:46;;7108:272;;;;;:::o;7386:366::-;7528:3;7549:67;7613:2;7608:3;7549:67;:::i;:::-;7542:74;;7625:93;7714:3;7625:93;:::i;:::-;7743:2;7738:3;7734:12;7727:19;;7532:220;;;:::o;7758:366::-;7900:3;7921:67;7985:2;7980:3;7921:67;:::i;:::-;7914:74;;7997:93;8086:3;7997:93;:::i;:::-;8115:2;8110:3;8106:12;8099:19;;7904:220;;;:::o;8130:366::-;8272:3;8293:67;8357:2;8352:3;8293:67;:::i;:::-;8286:74;;8369:93;8458:3;8369:93;:::i;:::-;8487:2;8482:3;8478:12;8471:19;;8276:220;;;:::o;8502:366::-;8644:3;8665:67;8729:2;8724:3;8665:67;:::i;:::-;8658:74;;8741:93;8830:3;8741:93;:::i;:::-;8859:2;8854:3;8850:12;8843:19;;8648:220;;;:::o;8874:366::-;9016:3;9037:67;9101:2;9096:3;9037:67;:::i;:::-;9030:74;;9113:93;9202:3;9113:93;:::i;:::-;9231:2;9226:3;9222:12;9215:19;;9020:220;;;:::o;9246:366::-;9388:3;9409:67;9473:2;9468:3;9409:67;:::i;:::-;9402:74;;9485:93;9574:3;9485:93;:::i;:::-;9603:2;9598:3;9594:12;9587:19;;9392:220;;;:::o;9618:366::-;9760:3;9781:67;9845:2;9840:3;9781:67;:::i;:::-;9774:74;;9857:93;9946:3;9857:93;:::i;:::-;9975:2;9970:3;9966:12;9959:19;;9764:220;;;:::o;9990:118::-;10077:24;10095:5;10077:24;:::i;:::-;10072:3;10065:37;10055:53;;:::o;10114:222::-;10207:4;10245:2;10234:9;10230:18;10222:26;;10258:71;10326:1;10315:9;10311:17;10302:6;10258:71;:::i;:::-;10212:124;;;;:::o;10342:1128::-;10673:4;10711:3;10700:9;10696:19;10688:27;;10725:71;10793:1;10782:9;10778:17;10769:6;10725:71;:::i;:::-;10806:72;10874:2;10863:9;10859:18;10850:6;10806:72;:::i;:::-;10888;10956:2;10945:9;10941:18;10932:6;10888:72;:::i;:::-;10970;11038:2;11027:9;11023:18;11014:6;10970:72;:::i;:::-;11052:73;11120:3;11109:9;11105:19;11096:6;11052:73;:::i;:::-;11173:9;11167:4;11163:20;11157:3;11146:9;11142:19;11135:49;11201:78;11274:4;11265:6;11201:78;:::i;:::-;11193:86;;11327:9;11321:4;11317:20;11311:3;11300:9;11296:19;11289:49;11355:108;11458:4;11449:6;11355:108;:::i;:::-;11347:116;;10678:792;;;;;;;;;;:::o;11476:419::-;11642:4;11680:2;11669:9;11665:18;11657:26;;11729:9;11723:4;11719:20;11715:1;11704:9;11700:17;11693:47;11757:131;11883:4;11757:131;:::i;:::-;11749:139;;11647:248;;;:::o;11901:419::-;12067:4;12105:2;12094:9;12090:18;12082:26;;12154:9;12148:4;12144:20;12140:1;12129:9;12125:17;12118:47;12182:131;12308:4;12182:131;:::i;:::-;12174:139;;12072:248;;;:::o;12326:419::-;12492:4;12530:2;12519:9;12515:18;12507:26;;12579:9;12573:4;12569:20;12565:1;12554:9;12550:17;12543:47;12607:131;12733:4;12607:131;:::i;:::-;12599:139;;12497:248;;;:::o;12751:419::-;12917:4;12955:2;12944:9;12940:18;12932:26;;13004:9;12998:4;12994:20;12990:1;12979:9;12975:17;12968:47;13032:131;13158:4;13032:131;:::i;:::-;13024:139;;12922:248;;;:::o;13176:419::-;13342:4;13380:2;13369:9;13365:18;13357:26;;13429:9;13423:4;13419:20;13415:1;13404:9;13400:17;13393:47;13457:131;13583:4;13457:131;:::i;:::-;13449:139;;13347:248;;;:::o;13601:419::-;13767:4;13805:2;13794:9;13790:18;13782:26;;13854:9;13848:4;13844:20;13840:1;13829:9;13825:17;13818:47;13882:131;14008:4;13882:131;:::i;:::-;13874:139;;13772:248;;;:::o;14026:419::-;14192:4;14230:2;14219:9;14215:18;14207:26;;14279:9;14273:4;14269:20;14265:1;14254:9;14250:17;14243:47;14307:131;14433:4;14307:131;:::i;:::-;14299:139;;14197:248;;;:::o;14451:332::-;14572:4;14610:2;14599:9;14595:18;14587:26;;14623:71;14691:1;14680:9;14676:17;14667:6;14623:71;:::i;:::-;14704:72;14772:2;14761:9;14757:18;14748:6;14704:72;:::i;:::-;14577:206;;;;;:::o;14789:129::-;14823:6;14850:20;;:::i;:::-;14840:30;;14879:33;14907:4;14899:6;14879:33;:::i;:::-;14830:88;;;:::o;14924:75::-;14957:6;14990:2;14984:9;14974:19;;14964:35;:::o;15005:311::-;15082:4;15172:18;15164:6;15161:30;15158:2;;;15194:18;;:::i;:::-;15158:2;15244:4;15236:6;15232:17;15224:25;;15304:4;15298;15294:15;15286:23;;15087:229;;;:::o;15322:308::-;15384:4;15474:18;15466:6;15463:30;15460:2;;;15496:18;;:::i;:::-;15460:2;15534:29;15556:6;15534:29;:::i;:::-;15526:37;;15618:4;15612;15608:15;15600:23;;15389:241;;;:::o;15636:132::-;15703:4;15726:3;15718:11;;15756:4;15751:3;15747:14;15739:22;;15708:60;;;:::o;15774:114::-;15841:6;15875:5;15869:12;15859:22;;15848:40;;;:::o;15894:99::-;15946:6;15980:5;15974:12;15964:22;;15953:40;;;:::o;15999:113::-;16069:4;16101;16096:3;16092:14;16084:22;;16074:38;;;:::o;16118:184::-;16217:11;16251:6;16246:3;16239:19;16291:4;16286:3;16282:14;16267:29;;16229:73;;;;:::o;16308:169::-;16392:11;16426:6;16421:3;16414:19;16466:4;16461:3;16457:14;16442:29;;16404:73;;;;:::o;16483:348::-;16523:7;16546:20;16564:1;16546:20;:::i;:::-;16541:25;;16580:20;16598:1;16580:20;:::i;:::-;16575:25;;16768:1;16700:66;16696:74;16693:1;16690:81;16685:1;16678:9;16671:17;16667:105;16664:2;;;16775:18;;:::i;:::-;16664:2;16823:1;16820;16816:9;16805:20;;16531:300;;;;:::o;16837:96::-;16874:7;16903:24;16921:5;16903:24;:::i;:::-;16892:35;;16882:51;;;:::o;16939:104::-;16984:7;17013:24;17031:5;17013:24;:::i;:::-;17002:35;;16992:51;;;:::o;17049:126::-;17086:7;17126:42;17119:5;17115:54;17104:65;;17094:81;;;:::o;17181:77::-;17218:7;17247:5;17236:16;;17226:32;;;:::o;17264:307::-;17332:1;17342:113;17356:6;17353:1;17350:13;17342:113;;;17441:1;17436:3;17432:11;17426:18;17422:1;17417:3;17413:11;17406:39;17378:2;17375:1;17371:10;17366:15;;17342:113;;;17473:6;17470:1;17467:13;17464:2;;;17553:1;17544:6;17539:3;17535:16;17528:27;17464:2;17313:258;;;;:::o;17577:320::-;17621:6;17658:1;17652:4;17648:12;17638:22;;17705:1;17699:4;17695:12;17726:18;17716:2;;17782:4;17774:6;17770:17;17760:27;;17716:2;17844;17836:6;17833:14;17813:18;17810:38;17807:2;;;17863:18;;:::i;:::-;17807:2;17628:269;;;;:::o;17903:281::-;17986:27;18008:4;17986:27;:::i;:::-;17978:6;17974:40;18116:6;18104:10;18101:22;18080:18;18068:10;18065:34;18062:62;18059:2;;;18127:18;;:::i;:::-;18059:2;18167:10;18163:2;18156:22;17946:238;;;:::o;18190:233::-;18229:3;18252:24;18270:5;18252:24;:::i;:::-;18243:33;;18298:66;18291:5;18288:77;18285:2;;;18368:18;;:::i;:::-;18285:2;18415:1;18408:5;18404:13;18397:20;;18233:190;;;:::o;18429:180::-;18477:77;18474:1;18467:88;18574:4;18571:1;18564:15;18598:4;18595:1;18588:15;18615:180;18663:77;18660:1;18653:88;18760:4;18757:1;18750:15;18784:4;18781:1;18774:15;18801:180;18849:77;18846:1;18839:88;18946:4;18943:1;18936:15;18970:4;18967:1;18960:15;18987:180;19035:77;19032:1;19025:88;19132:4;19129:1;19122:15;19156:4;19153:1;19146:15;19173:117;19282:1;19279;19272:12;19296:117;19405:1;19402;19395:12;19419:117;19528:1;19525;19518:12;19542:117;19651:1;19648;19641:12;19665:117;19774:1;19771;19764:12;19788:102;19829:6;19880:2;19876:7;19871:2;19864:5;19860:14;19856:28;19846:38;;19836:54;;;:::o;19896:222::-;20036:34;20032:1;20024:6;20020:14;20013:58;20105:5;20100:2;20092:6;20088:15;20081:30;20002:116;:::o;20124:225::-;20264:34;20260:1;20252:6;20248:14;20241:58;20333:8;20328:2;20320:6;20316:15;20309:33;20230:119;:::o;20355:178::-;20495:30;20491:1;20483:6;20479:14;20472:54;20461:72;:::o;20539:233::-;20679:34;20675:1;20667:6;20663:14;20656:58;20748:16;20743:2;20735:6;20731:15;20724:41;20645:127;:::o;20778:182::-;20918:34;20914:1;20906:6;20902:14;20895:58;20884:76;:::o;20966:225::-;21106:34;21102:1;21094:6;21090:14;21083:58;21175:8;21170:2;21162:6;21158:15;21151:33;21072:119;:::o;21197:230::-;21337:34;21333:1;21325:6;21321:14;21314:58;21406:13;21401:2;21393:6;21389:15;21382:38;21303:124;:::o;21433:122::-;21506:24;21524:5;21506:24;:::i;:::-;21499:5;21496:35;21486:2;;21545:1;21542;21535:12;21486:2;21476:79;:::o;21561:138::-;21642:32;21668:5;21642:32;:::i;:::-;21635:5;21632:43;21622:2;;21689:1;21686;21679:12;21622:2;21612:87;:::o;21705:122::-;21778:24;21796:5;21778:24;:::i;:::-;21771:5;21768:35;21758:2;;21817:1;21814;21807:12;21758:2;21748:79;:::o;459:2848:71:-;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@UsulModule_7346": {
              "entryPoint": 3276,
              "id": 7346,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@VOTE_TYPEHASH_9625": {
              "entryPoint": 3739,
              "id": 9625,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_EIP712NameHash_4597": {
              "entryPoint": 8095,
              "id": 4597,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_EIP712VersionHash_4606": {
              "entryPoint": 8105,
              "id": 4606,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@__EIP712_init_unchained_4530": {
              "entryPoint": 7160,
              "id": 4530,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__Ownable_init_3396": {
              "entryPoint": 7071,
              "id": 3396,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__Ownable_init_unchained_3407": {
              "entryPoint": 7998,
              "id": 3407,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_4572": {
              "entryPoint": 8115,
              "id": 4572,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_domainSeparatorV4_4545": {
              "entryPoint": 7283,
              "id": 4545,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_hashTypedDataV4_4588": {
              "entryPoint": 6130,
              "id": 4588,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_isConstructor_3566": {
              "entryPoint": 7054,
              "id": 3566,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_3837": {
              "entryPoint": 5973,
              "id": 3837,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_throwError_6387": {
              "entryPoint": 7529,
              "id": 6387,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_3487": {
              "entryPoint": 6856,
              "id": 3487,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_updateQuorumNumerator_9383": {
              "entryPoint": 5981,
              "id": 9383,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_vote_9920": {
              "entryPoint": 6195,
              "id": 9920,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@addMember_9217": {
              "entryPoint": 4848,
              "id": 9217,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@calculateWeight_14277": {
              "entryPoint": 5289,
              "id": 14277,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@finalizeStrategy_9991": {
              "entryPoint": 3320,
              "id": 9991,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@hasVoted_9760": {
              "entryPoint": 2633,
              "id": 9760,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isContract_3585": {
              "entryPoint": 5938,
              "id": 3585,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isPassed_14243": {
              "entryPoint": 2740,
              "id": 14243,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@memberCount_9162": {
              "entryPoint": 2217,
              "id": 9162,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@members_9166": {
              "entryPoint": 1744,
              "id": 9166,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@name_9650": {
              "entryPoint": 1602,
              "id": 9650,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@owner_3416": {
              "entryPoint": 3775,
              "id": 3416,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@proposals_9655": {
              "entryPoint": 1406,
              "id": 9655,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@quorumDenominator_9337": {
              "entryPoint": 3817,
              "id": 9337,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quorumNumerator_9329": {
              "entryPoint": 4500,
              "id": 9329,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quorum_14261": {
              "entryPoint": 5890,
              "id": 14261,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@receiveProposal_9964": {
              "entryPoint": 2337,
              "id": 9964,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@recover_6479": {
              "entryPoint": 6156,
              "id": 6479,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@removeMember_9247": {
              "entryPoint": 1776,
              "id": 9247,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@renounceOwnership_3444": {
              "entryPoint": 3140,
              "id": 3444,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@setUp_14189": {
              "entryPoint": 3826,
              "id": 14189,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setUsul_7380": {
              "entryPoint": 4510,
              "id": 7380,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@timeLockPeriod_9648": {
              "entryPoint": 3314,
              "id": 9648,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@toTypedDataHash_4461": {
              "entryPoint": 7347,
              "id": 4461,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@transferOwnership_3467": {
              "entryPoint": 5642,
              "id": 3467,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@tryRecover_6452": {
              "entryPoint": 7398,
              "id": 6452,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@tryRecover_6509": {
              "entryPoint": 8442,
              "id": 6509,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "@tryRecover_6620": {
              "entryPoint": 8173,
              "id": 6620,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "@updateQuorumNumerator_9356": {
              "entryPoint": 1466,
              "id": 9356,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateTimeLockPeriod_9742": {
              "entryPoint": 3540,
              "id": 9742,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateVotingPeriod_9720": {
              "entryPoint": 5443,
              "id": 9720,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@version_9698": {
              "entryPoint": 3079,
              "id": 9698,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@voteSignature_9814": {
              "entryPoint": 2223,
              "id": 9814,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@vote_9778": {
              "entryPoint": 4832,
              "id": 9778,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@votingPeriod_9646": {
              "entryPoint": 1460,
              "id": 9646,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 8683,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_available_length_t_bytes_memory_ptr": {
              "entryPoint": 8795,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_available_length_t_string_memory_ptr_fromMemory": {
              "entryPoint": 8861,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_address": {
              "entryPoint": 8927,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 8948,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_address_payable_fromMemory": {
              "entryPoint": 8969,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 8990,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes_memory_ptr": {
              "entryPoint": 9036,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_string_memory_ptr_fromMemory": {
              "entryPoint": 9082,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256": {
              "entryPoint": 9128,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256_fromMemory": {
              "entryPoint": 9149,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint8": {
              "entryPoint": 9170,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 9191,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 9236,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 9454,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes_memory_ptr": {
              "entryPoint": 9518,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 9591,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 9636,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": 9681,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint8t_bytes_memory_ptr": {
              "entryPoint": 9745,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint256t_uint8t_bytes_memory_ptrt_bytes_memory_ptr": {
              "entryPoint": 9856,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 10015,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 10030,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes32_to_t_bytes32_fromStack": {
              "entryPoint": 10045,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack": {
              "entryPoint": 10060,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10083,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10140,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10175,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10210,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10245,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10280,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10315,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10350,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 10385,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10420,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10455,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10490,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10525,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10560,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10595,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10630,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10665,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10700,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10735,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10770,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10805,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10840,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 10875,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint8_to_t_uint8_fromStack": {
              "entryPoint": 10890,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 10905,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 10960,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_uint8_t_uint256__to_t_address_t_uint256_t_uint8_t_uint256__fromStack_reversed": {
              "entryPoint": 10987,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": 11056,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": 11083,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": 11110,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed": {
              "entryPoint": 11193,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": 11248,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11317,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11351,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11383,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11415,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11447,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11479,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11511,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11543,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11575,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11607,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11639,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11671,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11703,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11735,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11767,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11799,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11831,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11863,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11895,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11927,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11959,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 11991,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 12018,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 12059,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 12142,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": 12169,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 12179,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_t_bytes_memory_ptr": {
              "entryPoint": 12223,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_t_string_memory_ptr": {
              "entryPoint": 12272,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 12321,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 12332,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 12349,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 12360,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 12446,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 12495,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 12585,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_address_payable": {
              "entryPoint": 12603,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": 12621,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes32": {
              "entryPoint": 12633,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 12643,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 12675,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint8": {
              "entryPoint": 12685,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_calldata_to_memory": {
              "entryPoint": 12698,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_memory_to_memory": {
              "entryPoint": 12713,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "decrement_t_uint256": {
              "entryPoint": 12764,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 12806,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 12856,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "increment_t_uint256": {
              "entryPoint": 12905,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "leftAlign_t_bytes32": {
              "entryPoint": 12978,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 12988,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 13035,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 13082,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 13129,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 13176,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 13223,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": 13270,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
              "entryPoint": 13275,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
              "entryPoint": 13280,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": 13285,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 13290,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 13295,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be": {
              "entryPoint": 13312,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b": {
              "entryPoint": 13353,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08": {
              "entryPoint": 13432,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77": {
              "entryPoint": 13473,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3": {
              "entryPoint": 13514,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a": {
              "entryPoint": 13555,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
              "entryPoint": 13634,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541": {
              "entryPoint": 13713,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff": {
              "entryPoint": 13754,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd": {
              "entryPoint": 13795,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6": {
              "entryPoint": 13874,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759": {
              "entryPoint": 13915,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4": {
              "entryPoint": 13994,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411": {
              "entryPoint": 14073,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
              "entryPoint": 14114,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c": {
              "entryPoint": 14155,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347": {
              "entryPoint": 14196,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c": {
              "entryPoint": 14275,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d": {
              "entryPoint": 14316,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b": {
              "entryPoint": 14357,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e": {
              "entryPoint": 14436,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 14477,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address_payable": {
              "entryPoint": 14500,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 14523,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint8": {
              "entryPoint": 14546,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:43740:72",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "137:631:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "147:90:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "229:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_array$_t_address_$dyn_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "172:56:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "172:64:72"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "156:15:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "156:81:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "147:5:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "246:16:72",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "257:5:72"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "250:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "279:5:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "286:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "272:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "272:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "272:21:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "302:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "313:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "320:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "309:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "309:16:72"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "302:3:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "335:17:72",
                          "value": {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "346:6:72"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "339:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "401:103:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nodeType": "YulIdentifier",
                                    "src": "415:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "415:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "415:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "371:3:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "380:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "388:4:72",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "376:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "376:17:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "367:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "367:27:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "396:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "364:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "364:36:72"
                          },
                          "nodeType": "YulIf",
                          "src": "361:2:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "573:189:72",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "588:21:72",
                                "value": {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "606:3:72"
                                },
                                "variables": [
                                  {
                                    "name": "elementPos",
                                    "nodeType": "YulTypedName",
                                    "src": "592:10:72",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "630:3:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "elementPos",
                                          "nodeType": "YulIdentifier",
                                          "src": "667:10:72"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "679:3:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_t_address_fromMemory",
                                        "nodeType": "YulIdentifier",
                                        "src": "635:31:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "635:48:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "623:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "623:61:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "623:61:72"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "697:21:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "708:3:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "713:4:72",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "704:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "704:14:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "697:3:72"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "731:21:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "742:3:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "747:4:72",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "738:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "738:14:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "731:3:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "535:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "538:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "532:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "532:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "546:18:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "548:14:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "557:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "560:1:72",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "553:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "553:9:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "548:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "517:14:72",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "519:10:72",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "528:1:72",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "523:1:72",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "513:249:72"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "107:6:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "115:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "123:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "131:5:72",
                        "type": ""
                      }
                    ],
                    "src": "24:744:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "857:327:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "867:74:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "933:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "892:40:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "892:48:72"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "876:15:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "876:65:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "867:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "957:5:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "964:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "950:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "950:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "950:21:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "980:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "995:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1002:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "991:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "991:16:72"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "984:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1045:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nodeType": "YulIdentifier",
                                    "src": "1047:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1047:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1047:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1026:3:72"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1031:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1022:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1022:16:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1040:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1019:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1019:25:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1016:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1161:3:72"
                              },
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1166:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1171:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_calldata_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1137:23:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1137:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1137:41:72"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "830:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "835:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "843:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "851:5:72",
                        "type": ""
                      }
                    ],
                    "src": "774:410:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1285:326:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1295:75:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1362:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_string_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "1320:41:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1320:49:72"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1304:15:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1304:66:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1295:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "1386:5:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1393:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1379:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1379:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1379:21:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1409:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "1424:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1431:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1420:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1420:16:72"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1413:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1474:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nodeType": "YulIdentifier",
                                    "src": "1476:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1476:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1476:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1455:3:72"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1460:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1451:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1451:16:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1469:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1448:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1448:25:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1445:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1588:3:72"
                              },
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1593:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1598:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1566:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1566:39:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1566:39:72"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "1258:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1263:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1271:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1279:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1190:421:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1669:87:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1679:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1701:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1688:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1688:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1679:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1744:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "1717:26:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1717:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1717:33:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1647:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1655:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1663:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1617:139:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1825:80:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1835:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1850:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1844:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1844:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1835:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1893:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "1866:26:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1866:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1866:33:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1803:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1811:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1819:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1762:143:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1982:88:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1992:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2007:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2001:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2001:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1992:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2058:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address_payable",
                              "nodeType": "YulIdentifier",
                              "src": "2023:34:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2023:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2023:41:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_payable_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1960:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1968:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1976:5:72",
                        "type": ""
                      }
                    ],
                    "src": "1911:159:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2181:297:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2230:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "2232:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2232:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2232:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2209:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2217:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2205:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2205:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2224:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2201:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2201:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2194:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2194:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2191:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2322:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2342:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2336:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2336:13:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2326:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2358:114:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2445:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2453:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2441:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2441:17:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2460:6:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2468:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "2367:73:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2367:105:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2358:5:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2159:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2167:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2175:5:72",
                        "type": ""
                      }
                    ],
                    "src": "2093:385:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2558:277:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2607:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "2609:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2609:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2609:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2586:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2594:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2582:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2582:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2601:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2578:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2578:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2571:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2571:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2568:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2699:34:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2726:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2713:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2713:20:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2703:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2742:87:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2802:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2810:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2798:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2798:17:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2817:6:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2825:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "2751:46:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2751:78:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2742:5:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2536:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2544:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2552:5:72",
                        "type": ""
                      }
                    ],
                    "src": "2497:338:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2928:282:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2977:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "2979:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2979:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2979:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2956:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2964:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2952:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2952:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2971:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2948:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2948:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2941:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2941:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2938:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3069:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3089:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3083:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3083:13:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3073:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3105:99:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3177:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3185:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3173:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3173:17:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3192:6:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "3200:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "3114:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3114:90:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3105:5:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2906:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2914:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2922:5:72",
                        "type": ""
                      }
                    ],
                    "src": "2855:355:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3268:87:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3278:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3300:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3287:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3287:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3278:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3343:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "3316:26:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3316:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3316:33:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3246:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3254:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3262:5:72",
                        "type": ""
                      }
                    ],
                    "src": "3216:139:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3424:80:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3434:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3449:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3443:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3443:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3434:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3492:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "3465:26:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3465:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3465:33:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3402:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3410:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3418:5:72",
                        "type": ""
                      }
                    ],
                    "src": "3361:143:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3560:85:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3570:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3592:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3579:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3579:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3570:5:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3633:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "3608:24:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3608:31:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3608:31:72"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3538:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3546:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3554:5:72",
                        "type": ""
                      }
                    ],
                    "src": "3510:135:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3717:263:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3763:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "3765:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3765:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3765:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3738:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3747:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3734:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3734:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3759:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3730:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3730:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "3727:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "3856:117:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3871:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3885:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3875:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3900:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3935:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3946:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3931:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3931:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3955:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "3910:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3910:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3900:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3687:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3698:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3710:6:72",
                        "type": ""
                      }
                    ],
                    "src": "3651:329:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4216:1469:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4263:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "4265:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4265:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4265:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4237:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4246:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4233:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4233:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4258:3:72",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4229:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4229:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4226:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4356:136:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4371:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4385:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4375:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4400:82:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4454:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4465:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4450:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4450:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4474:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_payable_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4410:39:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4410:72:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4400:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4502:137:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4517:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4531:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4521:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4547:82:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4601:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4612:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4597:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4597:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4621:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_payable_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4557:39:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4557:72:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4547:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4649:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4664:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4678:2:72",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4668:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4694:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4740:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4751:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4736:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4736:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4760:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4704:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4704:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "4694:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4788:129:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4803:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4817:2:72",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4807:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4833:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4879:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4890:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4875:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4875:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4899:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4843:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4843:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "4833:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4927:130:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4942:17:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4956:3:72",
                                "type": "",
                                "value": "128"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4946:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4973:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5019:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5030:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5015:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5015:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5039:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4983:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4983:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "4973:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5067:293:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5082:40:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5106:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5117:3:72",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5102:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5102:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5096:5:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5096:26:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5086:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5169:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "5171:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5171:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5171:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5141:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5149:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5138:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5138:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "5135:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5266:84:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5322:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5333:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5318:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5318:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5342:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5276:41:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5276:74:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "5266:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5370:308:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5385:40:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5409:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5420:3:72",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5405:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5405:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5399:5:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5399:26:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5389:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5472:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "5474:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5474:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5474:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5444:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5452:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5441:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5441:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "5438:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5569:99:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5640:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5651:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5636:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5636:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5660:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5579:56:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5579:89:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value6",
                                  "nodeType": "YulIdentifier",
                                  "src": "5569:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4138:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4149:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4161:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4169:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4177:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4185:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4193:6:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "4201:6:72",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "4209:6:72",
                        "type": ""
                      }
                    ],
                    "src": "3986:1699:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5774:391:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5820:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "5822:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5822:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5822:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5795:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5804:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5791:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5791:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5816:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5787:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5787:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "5784:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5913:117:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5928:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5942:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5932:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5957:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5992:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6003:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5988:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5988:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6012:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "5967:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5967:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "5957:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "6040:118:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6055:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6069:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6059:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6085:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6120:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6131:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6116:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6116:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6140:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "6095:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6095:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6085:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5736:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5747:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5759:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5767:6:72",
                        "type": ""
                      }
                    ],
                    "src": "5691:474:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6246:432:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6292:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "6294:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6294:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6294:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6267:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6276:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6263:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6263:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6288:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6259:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6259:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "6256:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "6385:286:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6400:45:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6431:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6442:1:72",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6427:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6427:17:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6414:12:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6414:31:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6404:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6492:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "6494:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6494:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6494:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6464:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6472:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6461:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6461:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "6458:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6589:72:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6633:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6644:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6629:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6629:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6653:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "6599:29:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6599:62:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "6589:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6216:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6227:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6239:6:72",
                        "type": ""
                      }
                    ],
                    "src": "6171:507:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6750:263:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6796:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "6798:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6798:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6798:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6771:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6780:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6767:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6767:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6792:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6763:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6763:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "6760:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "6889:117:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6904:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6918:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6908:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6933:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6968:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6979:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6964:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6964:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6988:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "6943:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6943:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "6933:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6720:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6731:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6743:6:72",
                        "type": ""
                      }
                    ],
                    "src": "6684:329:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7096:274:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7142:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "7144:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7144:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7144:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7117:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7126:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7113:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7113:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7138:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7109:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7109:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "7106:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "7235:128:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7250:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7264:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "7254:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7279:74:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7325:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7336:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7321:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7321:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7345:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "7289:31:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7289:64:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "7279:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7066:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7077:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7089:6:72",
                        "type": ""
                      }
                    ],
                    "src": "7019:351:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7459:391:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7505:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "7507:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7507:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7507:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7480:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7489:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7476:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7476:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7501:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7472:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7472:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "7469:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "7598:117:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7613:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7627:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "7617:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7642:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7677:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7688:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7673:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7673:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7697:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "7652:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7652:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "7642:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "7725:118:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7740:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7754:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "7744:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7770:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7805:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7816:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7801:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7801:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7825:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "7780:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7780:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7770:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7421:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7432:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7444:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7452:6:72",
                        "type": ""
                      }
                    ],
                    "src": "7376:474:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7963:686:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8009:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "8011:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8011:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8011:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7984:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7993:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7980:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7980:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8005:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7976:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7976:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "7973:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8102:117:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8117:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8131:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8121:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8146:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8181:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8192:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8177:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8177:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8201:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "8156:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8156:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "8146:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8229:116:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8244:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8258:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8248:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8274:61:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8307:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8318:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8303:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8303:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8327:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "8284:18:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8284:51:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8274:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8355:287:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8370:46:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8401:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8412:2:72",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8397:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8397:18:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8384:12:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8384:32:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8374:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8463:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "8465:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8465:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8465:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8435:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8443:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "8432:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8432:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "8429:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8560:72:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8604:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8615:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8600:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8600:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8624:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "8570:29:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8570:62:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "8560:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7917:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7928:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7940:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7948:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7956:6:72",
                        "type": ""
                      }
                    ],
                    "src": "7856:793:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8788:984:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8835:83:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "8837:77:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8837:79:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8837:79:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8809:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8818:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8805:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8805:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8830:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8801:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8801:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "8798:2:72"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8928:117:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8943:15:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8957:1:72",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8947:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8972:63:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9007:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9018:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9003:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9003:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9027:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "8982:20:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8982:53:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "8972:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "9055:116:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9070:16:72",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9084:2:72",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "9074:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9100:61:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9133:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9144:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9129:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9129:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9153:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "9110:18:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9110:51:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "9100:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "9181:287:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9196:46:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9227:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9238:2:72",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9223:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9223:18:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9210:12:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9210:32:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "9200:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9289:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "9291:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9291:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9291:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "9261:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9269:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9258:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9258:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "9255:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9386:72:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9430:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9441:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9426:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9426:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9450:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "9396:29:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9396:62:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "9386:6:72"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "9478:287:72",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9493:46:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9524:9:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9535:2:72",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9520:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9520:18:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9507:12:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9507:32:72"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "9497:6:72",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9586:83:72",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "9588:77:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9588:79:72"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9588:79:72"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "9558:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9566:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9555:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9555:30:72"
                              },
                              "nodeType": "YulIf",
                              "src": "9552:2:72"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9683:72:72",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9727:9:72"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9738:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9723:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9723:22:72"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9747:7:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "9693:29:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9693:62:72"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "9683:6:72"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_bytes_memory_ptrt_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8734:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8745:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8757:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8765:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8773:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8781:6:72",
                        "type": ""
                      }
                    ],
                    "src": "8655:1117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9843:53:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9860:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9883:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "9865:17:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9865:24:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9853:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9853:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9853:37:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9831:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9838:3:72",
                        "type": ""
                      }
                    ],
                    "src": "9778:118:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9961:50:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9978:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9998:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "9983:14:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9983:21:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9971:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9971:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9971:34:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9949:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9956:3:72",
                        "type": ""
                      }
                    ],
                    "src": "9902:109:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10082:53:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10099:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10122:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "10104:17:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10104:24:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10092:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10092:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10092:37:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10070:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10077:3:72",
                        "type": ""
                      }
                    ],
                    "src": "10017:118:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10224:74:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10241:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "10284:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes32",
                                      "nodeType": "YulIdentifier",
                                      "src": "10266:17:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10266:24:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "leftAlign_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "10246:19:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10246:45:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10234:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10234:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10234:58:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10212:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10219:3:72",
                        "type": ""
                      }
                    ],
                    "src": "10141:157:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10396:272:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10406:53:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "10453:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "10420:32:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10420:39:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "10410:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10468:78:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10534:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10539:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10475:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10475:71:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "10468:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10581:5:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10588:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10577:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10577:16:72"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10595:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10600:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "10555:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10555:52:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10555:52:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10616:46:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10627:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10654:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "10632:21:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10632:29:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10623:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10623:39:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "10616:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10377:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10384:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "10392:3:72",
                        "type": ""
                      }
                    ],
                    "src": "10304:364:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10820:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10830:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10896:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10901:2:72",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10837:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10837:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "10830:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11002:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                              "nodeType": "YulIdentifier",
                              "src": "10913:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10913:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10913:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11015:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11026:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11031:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11022:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11022:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "11015:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10808:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "10816:3:72",
                        "type": ""
                      }
                    ],
                    "src": "10674:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11192:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11202:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11268:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11273:2:72",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11209:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11209:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "11202:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11374:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b",
                              "nodeType": "YulIdentifier",
                              "src": "11285:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11285:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11285:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11387:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11398:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11403:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11394:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11394:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "11387:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "11180:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "11188:3:72",
                        "type": ""
                      }
                    ],
                    "src": "11046:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11564:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11574:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11640:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11645:2:72",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11581:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11581:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "11574:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11746:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08",
                              "nodeType": "YulIdentifier",
                              "src": "11657:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11657:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11657:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11759:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11770:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11775:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11766:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11766:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "11759:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "11552:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "11560:3:72",
                        "type": ""
                      }
                    ],
                    "src": "11418:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11936:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11946:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12012:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12017:2:72",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11953:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11953:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "11946:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12118:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
                              "nodeType": "YulIdentifier",
                              "src": "12029:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12029:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12029:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12131:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12142:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12147:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12138:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12138:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "12131:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "11924:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "11932:3:72",
                        "type": ""
                      }
                    ],
                    "src": "11790:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12308:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12318:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12384:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12389:2:72",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "12325:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12325:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "12318:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12490:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3",
                              "nodeType": "YulIdentifier",
                              "src": "12401:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12401:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12401:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12503:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12514:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12519:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12510:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12510:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "12503:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "12296:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "12304:3:72",
                        "type": ""
                      }
                    ],
                    "src": "12162:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12680:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12690:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12756:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12761:2:72",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "12697:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12697:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "12690:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12862:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a",
                              "nodeType": "YulIdentifier",
                              "src": "12773:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12773:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12773:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12875:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12886:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12891:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12882:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12882:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "12875:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "12668:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "12676:3:72",
                        "type": ""
                      }
                    ],
                    "src": "12534:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13052:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13062:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13128:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13133:2:72",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13069:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13069:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "13062:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13234:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                              "nodeType": "YulIdentifier",
                              "src": "13145:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13145:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13145:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13247:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13258:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13263:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13254:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13254:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "13247:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13040:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13048:3:72",
                        "type": ""
                      }
                    ],
                    "src": "12906:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13442:236:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13452:91:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13536:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13541:1:72",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13459:76:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13459:84:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "13452:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13641:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                              "nodeType": "YulIdentifier",
                              "src": "13552:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13552:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13552:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13654:18:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13665:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13670:1:72",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13661:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13661:11:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "13654:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13430:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13438:3:72",
                        "type": ""
                      }
                    ],
                    "src": "13278:400:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13830:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13840:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13906:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13911:2:72",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "13847:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13847:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "13840:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14012:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff",
                              "nodeType": "YulIdentifier",
                              "src": "13923:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13923:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13923:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14025:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14036:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14041:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14032:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14032:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "14025:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13818:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13826:3:72",
                        "type": ""
                      }
                    ],
                    "src": "13684:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14202:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14212:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14278:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14283:2:72",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14219:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14219:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "14212:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14384:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
                              "nodeType": "YulIdentifier",
                              "src": "14295:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14295:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14295:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14397:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14408:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14413:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14404:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14404:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "14397:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14190:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14198:3:72",
                        "type": ""
                      }
                    ],
                    "src": "14056:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14574:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14584:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14650:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14655:2:72",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14591:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14591:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "14584:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14756:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6",
                              "nodeType": "YulIdentifier",
                              "src": "14667:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14667:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14667:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14769:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14780:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14785:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14776:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14776:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "14769:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14562:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14570:3:72",
                        "type": ""
                      }
                    ],
                    "src": "14428:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14946:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14956:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15022:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15027:2:72",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14963:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14963:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "14956:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15128:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
                              "nodeType": "YulIdentifier",
                              "src": "15039:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15039:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15039:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15141:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15152:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15157:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15148:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15148:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "15141:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14934:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14942:3:72",
                        "type": ""
                      }
                    ],
                    "src": "14800:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15318:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15328:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15394:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15399:2:72",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "15335:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15335:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "15328:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15500:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
                              "nodeType": "YulIdentifier",
                              "src": "15411:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15411:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15411:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15513:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15524:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15529:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15520:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15520:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "15513:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "15306:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "15314:3:72",
                        "type": ""
                      }
                    ],
                    "src": "15172:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15690:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15700:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15766:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15771:2:72",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "15707:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15707:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "15700:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15872:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411",
                              "nodeType": "YulIdentifier",
                              "src": "15783:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15783:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15783:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15885:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15896:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15901:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15892:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15892:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "15885:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "15678:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "15686:3:72",
                        "type": ""
                      }
                    ],
                    "src": "15544:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16062:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16072:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16138:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16143:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16079:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16079:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "16072:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16244:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                              "nodeType": "YulIdentifier",
                              "src": "16155:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16155:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16155:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16257:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16268:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16273:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16264:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16264:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "16257:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16050:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "16058:3:72",
                        "type": ""
                      }
                    ],
                    "src": "15916:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16434:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16444:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16510:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16515:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16451:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16451:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "16444:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16616:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c",
                              "nodeType": "YulIdentifier",
                              "src": "16527:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16527:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16527:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16629:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16640:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16645:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16636:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16636:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "16629:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16422:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "16430:3:72",
                        "type": ""
                      }
                    ],
                    "src": "16288:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16806:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16816:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16882:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16887:2:72",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16823:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16823:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "16816:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16988:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347",
                              "nodeType": "YulIdentifier",
                              "src": "16899:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16899:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16899:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17001:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17012:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17017:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17008:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17008:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17001:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16794:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "16802:3:72",
                        "type": ""
                      }
                    ],
                    "src": "16660:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17178:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17188:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17254:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17259:2:72",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "17195:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17195:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "17188:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17360:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c",
                              "nodeType": "YulIdentifier",
                              "src": "17271:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17271:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17271:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17373:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17384:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17389:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17380:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17380:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17373:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17166:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17174:3:72",
                        "type": ""
                      }
                    ],
                    "src": "17032:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17550:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17560:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17626:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17631:2:72",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "17567:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17567:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "17560:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17732:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d",
                              "nodeType": "YulIdentifier",
                              "src": "17643:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17643:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17643:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17745:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17756:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17761:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17752:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17752:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17745:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17538:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17546:3:72",
                        "type": ""
                      }
                    ],
                    "src": "17404:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17922:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17932:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17998:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18003:2:72",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "17939:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17939:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "17932:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18104:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
                              "nodeType": "YulIdentifier",
                              "src": "18015:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18015:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18015:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18117:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18128:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18133:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18124:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18124:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "18117:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17910:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17918:3:72",
                        "type": ""
                      }
                    ],
                    "src": "17776:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18294:220:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18304:74:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18370:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18375:2:72",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18311:58:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18311:67:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "18304:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18476:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e",
                              "nodeType": "YulIdentifier",
                              "src": "18387:88:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18387:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18387:93:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18489:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18500:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18505:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18496:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18496:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "18489:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18282:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "18290:3:72",
                        "type": ""
                      }
                    ],
                    "src": "18148:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18585:53:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18602:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "18625:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "18607:17:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18607:24:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18595:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18595:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18595:37:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "18573:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18580:3:72",
                        "type": ""
                      }
                    ],
                    "src": "18520:118:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18705:51:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18722:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "18743:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "18727:15:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18727:22:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18715:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18715:35:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18715:35:72"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "18693:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18700:3:72",
                        "type": ""
                      }
                    ],
                    "src": "18644:112:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19007:418:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19018:155:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19169:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19025:142:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19025:148:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "19018:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "19245:6:72"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19254:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19183:61:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19183:75:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19183:75:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19267:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19278:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19283:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19274:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19274:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "19267:3:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19358:6:72"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19367:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19296:61:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19296:75:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19296:75:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19380:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19391:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19396:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19387:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19387:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "19380:3:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19409:10:72",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "19416:3:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "19409:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18978:3:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18984:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18992:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "19003:3:72",
                        "type": ""
                      }
                    ],
                    "src": "18762:663:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19529:124:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19539:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19551:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19562:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19547:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19547:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19539:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "19619:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19632:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19643:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19628:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19628:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19575:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19575:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19575:71:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19501:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19513:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19524:4:72",
                        "type": ""
                      }
                    ],
                    "src": "19431:222:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19837:367:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19847:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19859:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19870:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19855:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19855:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19847:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "19928:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19941:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19952:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19937:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19937:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19884:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19884:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19884:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20009:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20022:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20033:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20018:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20018:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19965:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19965:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19965:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "20087:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20100:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20111:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20096:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20096:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20047:39:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20047:68:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20047:68:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "20169:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20182:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20193:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20178:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20178:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20125:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20125:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20125:72:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint8_t_uint256__to_t_address_t_uint256_t_uint8_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19785:9:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "19797:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19805:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19813:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19821:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19832:4:72",
                        "type": ""
                      }
                    ],
                    "src": "19659:545:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20302:118:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20312:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20324:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20335:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20320:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20320:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20312:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20386:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20399:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20410:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20395:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20395:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20348:37:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20348:65:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20348:65:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20274:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20286:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20297:4:72",
                        "type": ""
                      }
                    ],
                    "src": "20210:210:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20524:124:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20534:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20546:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20557:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20542:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20542:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20534:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20614:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20627:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20638:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20623:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20623:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20570:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20570:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20570:71:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20496:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20508:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20519:4:72",
                        "type": ""
                      }
                    ],
                    "src": "20426:222:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20864:454:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20874:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20886:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20897:3:72",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20882:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20882:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20874:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20955:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20968:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20979:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20964:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20964:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20911:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20911:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20911:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21036:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21049:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21060:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21045:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21045:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20992:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20992:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20992:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21118:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21131:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21142:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21127:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21127:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21074:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21074:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21074:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21200:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21213:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21224:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21209:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21209:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21156:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21156:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21156:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "21282:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21295:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21306:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21291:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21291:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21238:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21238:73:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21238:73:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20804:9:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "20816:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20824:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20832:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20840:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20848:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20859:4:72",
                        "type": ""
                      }
                    ],
                    "src": "20654:664:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21474:284:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21484:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21496:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21507:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21492:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21492:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21484:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21564:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21577:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21588:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21573:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21573:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21520:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21520:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21520:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21645:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21658:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21669:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21654:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21654:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21601:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21601:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21601:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21723:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21736:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21747:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21732:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21732:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21683:39:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21683:68:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21683:68:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21430:9:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21442:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21450:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21458:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21469:4:72",
                        "type": ""
                      }
                    ],
                    "src": "21324:434:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21942:367:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21952:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21964:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21975:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21960:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21960:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21952:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22033:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22046:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22057:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22042:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22042:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21989:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21989:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21989:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22110:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22123:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22134:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22119:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22119:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22070:39:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22070:68:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22070:68:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22192:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22205:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22216:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22201:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22201:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22148:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22148:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22148:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "22274:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22287:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22298:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22283:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22283:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22230:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22230:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22230:72:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21890:9:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "21902:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21910:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21918:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21926:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21937:4:72",
                        "type": ""
                      }
                    ],
                    "src": "21764:545:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22433:195:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22443:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22455:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22466:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22451:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22451:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22443:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22490:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22501:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22486:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22486:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "22509:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22515:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22505:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22505:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22479:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22479:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22479:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22535:86:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22607:6:72"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "22616:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22543:63:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22543:78:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22535:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22405:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22417:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22428:4:72",
                        "type": ""
                      }
                    ],
                    "src": "22315:313:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22805:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22815:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22827:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22838:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22823:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22823:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22815:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22862:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22873:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22858:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22858:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "22881:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22887:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22877:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22877:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22851:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22851:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22851:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22907:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "23041:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22915:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22915:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22907:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22785:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22800:4:72",
                        "type": ""
                      }
                    ],
                    "src": "22634:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23230:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23240:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23252:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23263:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23248:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23248:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23240:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23287:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23298:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23283:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23283:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "23306:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23312:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "23302:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23302:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23276:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23276:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23276:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23332:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "23466:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "23340:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23340:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23332:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23210:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23225:4:72",
                        "type": ""
                      }
                    ],
                    "src": "23059:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23655:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23665:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23677:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23688:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23673:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23673:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23665:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23712:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23723:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23708:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23708:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "23731:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23737:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "23727:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23727:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23701:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23701:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23701:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23757:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "23891:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "23765:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23765:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23757:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23635:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23650:4:72",
                        "type": ""
                      }
                    ],
                    "src": "23484:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24080:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24090:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24102:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24113:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24098:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24098:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24090:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24137:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24148:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24133:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24133:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "24156:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24162:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "24152:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24152:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24126:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24126:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24126:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24182:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "24316:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "24190:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24190:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24182:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24060:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24075:4:72",
                        "type": ""
                      }
                    ],
                    "src": "23909:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24505:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24515:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24527:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24538:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24523:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24523:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24515:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24562:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24573:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24558:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24558:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "24581:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24587:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "24577:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24577:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24551:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24551:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24551:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24607:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "24741:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "24615:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24615:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24607:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24485:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24500:4:72",
                        "type": ""
                      }
                    ],
                    "src": "24334:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24930:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24940:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24952:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24963:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24948:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24948:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24940:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24987:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24998:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24983:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24983:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "25006:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25012:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "25002:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25002:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24976:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24976:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24976:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25032:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "25166:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25040:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25040:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25032:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24910:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24925:4:72",
                        "type": ""
                      }
                    ],
                    "src": "24759:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25355:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25365:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25377:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25388:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25373:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25373:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25365:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25412:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25423:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25408:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25408:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "25431:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25437:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "25427:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25427:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25401:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25401:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25401:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25457:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "25591:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25465:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25465:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25457:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25335:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25350:4:72",
                        "type": ""
                      }
                    ],
                    "src": "25184:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25780:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25790:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25802:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25813:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25798:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25798:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25790:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25837:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25848:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25833:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25833:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "25856:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25862:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "25852:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25852:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25826:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25826:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25826:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25882:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "26016:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25890:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25890:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25882:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25760:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25775:4:72",
                        "type": ""
                      }
                    ],
                    "src": "25609:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26205:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26215:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26227:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26238:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26223:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26223:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26215:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26262:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26273:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26258:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26258:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "26281:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26287:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "26277:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26277:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26251:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26251:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26251:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26307:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "26441:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "26315:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26315:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26307:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26185:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26200:4:72",
                        "type": ""
                      }
                    ],
                    "src": "26034:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26630:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26640:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26652:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26663:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26648:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26648:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26640:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26687:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26698:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26683:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26683:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "26706:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26712:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "26702:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26702:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26676:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26676:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26676:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26732:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "26866:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "26740:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26740:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26732:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26610:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26625:4:72",
                        "type": ""
                      }
                    ],
                    "src": "26459:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27055:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27065:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27077:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27088:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27073:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27073:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27065:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27112:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27123:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27108:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27108:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "27131:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27137:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "27127:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27127:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27101:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27101:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27101:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27157:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "27291:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "27165:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27165:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27157:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27035:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27050:4:72",
                        "type": ""
                      }
                    ],
                    "src": "26884:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27480:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27490:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27502:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27513:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27498:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27498:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27490:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27537:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27548:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27533:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27533:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "27556:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27562:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "27552:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27552:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27526:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27526:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27526:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27582:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "27716:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "27590:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27590:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27582:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27460:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27475:4:72",
                        "type": ""
                      }
                    ],
                    "src": "27309:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27905:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27915:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27927:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27938:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27923:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27923:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27915:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27962:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27973:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27958:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27958:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "27981:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27987:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "27977:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27977:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27951:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27951:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27951:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28007:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "28141:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28015:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28015:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28007:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27885:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27900:4:72",
                        "type": ""
                      }
                    ],
                    "src": "27734:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28330:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "28340:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28352:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28363:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28348:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28348:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28340:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28387:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28398:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28383:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28383:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "28406:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28412:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "28402:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28402:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28376:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28376:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28376:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28432:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "28566:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28440:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28440:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28432:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28310:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28325:4:72",
                        "type": ""
                      }
                    ],
                    "src": "28159:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28755:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "28765:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28777:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28788:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28773:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28773:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28765:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28812:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28823:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28808:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28808:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "28831:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28837:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "28827:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28827:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28801:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28801:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28801:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28857:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "28991:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28865:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28865:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28857:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28735:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28750:4:72",
                        "type": ""
                      }
                    ],
                    "src": "28584:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29180:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "29190:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29202:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29213:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29198:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29198:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29190:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29237:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29248:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29233:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29233:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "29256:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29262:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "29252:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29252:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29226:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29226:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29226:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29282:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "29416:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "29290:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29290:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29282:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29160:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29175:4:72",
                        "type": ""
                      }
                    ],
                    "src": "29009:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29605:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "29615:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29627:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29638:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29623:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29623:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29615:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29662:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29673:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29658:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29658:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "29681:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29687:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "29677:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29677:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29651:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29651:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29651:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29707:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "29841:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "29715:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29715:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29707:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29585:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29600:4:72",
                        "type": ""
                      }
                    ],
                    "src": "29434:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30030:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "30040:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30052:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30063:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30048:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30048:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30040:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30087:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30098:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30083:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30083:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "30106:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30112:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "30102:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30102:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30076:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30076:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30076:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30132:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "30266:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30140:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30140:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30132:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30010:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30025:4:72",
                        "type": ""
                      }
                    ],
                    "src": "29859:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30455:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "30465:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30477:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30488:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30473:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30473:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30465:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30512:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30523:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30508:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30508:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "30531:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30537:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "30527:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30527:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30501:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30501:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30501:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30557:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "30691:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30565:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30565:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30557:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30435:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30450:4:72",
                        "type": ""
                      }
                    ],
                    "src": "30284:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30880:248:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "30890:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30902:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30913:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30898:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30898:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30890:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30937:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30948:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30933:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30933:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "30956:4:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30962:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "30952:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30952:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30926:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30926:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30926:47:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30982:139:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "31116:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30990:124:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30990:131:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30982:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30860:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30875:4:72",
                        "type": ""
                      }
                    ],
                    "src": "30709:419:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31232:124:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31242:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31254:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31265:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31250:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31250:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31242:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "31322:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31335:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31346:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31331:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31331:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "31278:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31278:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31278:71:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31204:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31216:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31227:4:72",
                        "type": ""
                      }
                    ],
                    "src": "31134:222:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31488:206:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31498:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31510:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31521:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31506:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31506:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31498:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "31578:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31591:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31602:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31587:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31587:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "31534:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31534:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31534:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "31659:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31672:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31683:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31668:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31668:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "31615:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31615:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31615:72:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31452:9:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "31464:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31472:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31483:4:72",
                        "type": ""
                      }
                    ],
                    "src": "31362:332:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31910:454:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31920:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31932:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31943:3:72",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31928:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31928:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31920:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "32001:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32014:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32025:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32010:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32010:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "31957:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31957:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31957:71:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "32082:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32095:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32106:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32091:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32091:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "32038:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32038:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32038:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "32164:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32177:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32188:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32173:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32173:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "32120:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32120:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32120:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "32246:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32259:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32270:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32255:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32255:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "32202:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32202:72:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32202:72:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "32328:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32341:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32352:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32337:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32337:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "32284:43:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32284:73:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32284:73:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31850:9:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "31862:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "31870:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "31878:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "31886:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31894:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31905:4:72",
                        "type": ""
                      }
                    ],
                    "src": "31700:664:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32411:88:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32421:30:72",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nodeType": "YulIdentifier",
                              "src": "32431:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32431:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "32421:6:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "32480:6:72"
                              },
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "32488:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "32460:19:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32460:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32460:33:72"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "32395:4:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "32404:6:72",
                        "type": ""
                      }
                    ],
                    "src": "32370:129:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32545:35:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32555:19:72",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32571:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "32565:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32565:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "32555:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "32538:6:72",
                        "type": ""
                      }
                    ],
                    "src": "32505:75:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32668:229:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "32773:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "32775:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32775:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "32775:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "32745:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32753:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "32742:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32742:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "32739:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32805:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "32817:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32825:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "32813:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32813:17:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "32805:4:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32867:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "32879:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32885:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32875:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32875:15:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "32867:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "32652:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "32663:4:72",
                        "type": ""
                      }
                    ],
                    "src": "32586:311:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32969:241:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33074:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "33076:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33076:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33076:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33046:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33054:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "33043:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33043:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "33040:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33106:37:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33136:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nodeType": "YulIdentifier",
                              "src": "33114:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33114:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "33106:4:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33180:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "33192:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33198:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33188:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33188:15:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "33180:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "32953:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "32964:4:72",
                        "type": ""
                      }
                    ],
                    "src": "32903:307:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33283:241:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33388:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "33390:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33390:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33390:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33360:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33368:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "33357:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33357:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "33354:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33420:37:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33450:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nodeType": "YulIdentifier",
                              "src": "33428:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33428:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "33420:4:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33494:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "33506:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33512:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33502:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33502:15:72"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "33494:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33267:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "33278:4:72",
                        "type": ""
                      }
                    ],
                    "src": "33216:308:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33589:40:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "33600:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "33616:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "33610:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33610:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "33600:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "33572:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33582:6:72",
                        "type": ""
                      }
                    ],
                    "src": "33530:99:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33731:73:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "33748:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "33753:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33741:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33741:19:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33741:19:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33769:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "33788:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33793:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33784:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33784:14:72"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "33769:11:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "33703:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33708:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "33719:11:72",
                        "type": ""
                      }
                    ],
                    "src": "33635:169:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33924:34:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "33934:18:72",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "33949:3:72"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "33934:11:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "33896:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "33901:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "33912:11:72",
                        "type": ""
                      }
                    ],
                    "src": "33810:148:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34008:261:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34018:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34041:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "34023:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34023:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "34018:1:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34052:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34075:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "34057:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34057:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "34052:1:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "34215:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "34217:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "34217:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "34217:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34136:1:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34143:66:72",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "34211:1:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "34139:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34139:74:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "34133:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34133:81:72"
                          },
                          "nodeType": "YulIf",
                          "src": "34130:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34247:16:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34258:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34261:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34254:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34254:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "34247:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "33995:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "33998:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "34004:3:72",
                        "type": ""
                      }
                    ],
                    "src": "33964:305:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34317:143:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34327:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34350:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "34332:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34332:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "34327:1:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34361:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34384:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "34366:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34366:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "34361:1:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "34408:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "34410:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "34410:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "34410:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34405:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "34398:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34398:9:72"
                          },
                          "nodeType": "YulIf",
                          "src": "34395:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34440:14:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34449:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34452:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "34445:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34445:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "34440:1:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "34306:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "34309:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "34315:1:72",
                        "type": ""
                      }
                    ],
                    "src": "34275:185:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34514:300:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34524:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34547:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "34529:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34529:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "34524:1:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34558:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34581:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "34563:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34563:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "34558:1:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "34756:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "34758:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "34758:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "34758:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "34668:1:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "34661:6:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "34661:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "34654:6:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34654:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "34676:1:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "34683:66:72",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "34751:1:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "34679:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "34679:74:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "34673:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34673:81:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "34650:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34650:105:72"
                          },
                          "nodeType": "YulIf",
                          "src": "34647:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34788:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34803:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34806:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "34799:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34799:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "34788:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "34497:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "34500:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "34506:7:72",
                        "type": ""
                      }
                    ],
                    "src": "34466:348:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34865:51:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34875:35:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "34904:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "34886:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34886:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "34875:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "34847:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "34857:7:72",
                        "type": ""
                      }
                    ],
                    "src": "34820:96:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34975:51:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34985:35:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "35014:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "34996:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34996:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "34985:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "34957:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "34967:7:72",
                        "type": ""
                      }
                    ],
                    "src": "34922:104:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35074:48:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35084:32:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "35109:5:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "35102:6:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35102:13:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "35095:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35095:21:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "35084:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "35056:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "35066:7:72",
                        "type": ""
                      }
                    ],
                    "src": "35032:90:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35173:32:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35183:16:72",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "35194:5:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "35183:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "35155:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "35165:7:72",
                        "type": ""
                      }
                    ],
                    "src": "35128:77:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35256:81:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35266:65:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "35281:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35288:42:72",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "35277:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35277:54:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "35266:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "35238:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "35248:7:72",
                        "type": ""
                      }
                    ],
                    "src": "35211:126:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35388:32:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35398:16:72",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "35409:5:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "35398:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "35370:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "35380:7:72",
                        "type": ""
                      }
                    ],
                    "src": "35343:77:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35469:43:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35479:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "35494:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35501:4:72",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "35490:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35490:16:72"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "35479:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "35451:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "35461:7:72",
                        "type": ""
                      }
                    ],
                    "src": "35426:86:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35569:103:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "35592:3:72"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "35597:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "35602:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "35579:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35579:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35579:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "35650:3:72"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "35655:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35646:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35646:16:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35664:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35639:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35639:27:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35639:27:72"
                        }
                      ]
                    },
                    "name": "copy_calldata_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "35551:3:72",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "35556:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "35561:6:72",
                        "type": ""
                      }
                    ],
                    "src": "35518:154:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35727:258:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "35737:10:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "35746:1:72",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "35741:1:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "35806:63:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "35831:3:72"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "35836:1:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "35827:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "35827:11:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "35850:3:72"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "35855:1:72"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "35846:3:72"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "35846:11:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "35840:5:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "35840:18:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "35820:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35820:39:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "35820:39:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "35767:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "35770:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "35764:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35764:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "35778:19:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "35780:15:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "35789:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35792:2:72",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "35785:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35785:10:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "35780:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "35760:3:72",
                            "statements": []
                          },
                          "src": "35756:113:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "35903:76:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "35953:3:72"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "35958:6:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "35949:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "35949:16:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35967:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "35942:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35942:27:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "35942:27:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "35884:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "35887:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "35881:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35881:13:72"
                          },
                          "nodeType": "YulIf",
                          "src": "35878:2:72"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "35709:3:72",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "35714:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "35719:6:72",
                        "type": ""
                      }
                    ],
                    "src": "35678:307:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36034:128:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "36044:33:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "36071:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "36053:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36053:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "36044:5:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36105:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "36107:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36107:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "36107:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "36092:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36099:4:72",
                                "type": "",
                                "value": "0x00"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "36089:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36089:15:72"
                          },
                          "nodeType": "YulIf",
                          "src": "36086:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36136:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "36147:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36154:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "36143:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36143:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "36136:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "36020:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "36030:3:72",
                        "type": ""
                      }
                    ],
                    "src": "35991:171:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36219:269:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "36229:22:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "36243:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36249:1:72",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "36239:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36239:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "36229:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "36260:38:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "36290:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36296:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "36286:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36286:12:72"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "36264:18:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36337:51:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "36351:27:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "36365:6:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "36373:4:72",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "36361:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36361:17:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "36351:6:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "36317:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "36310:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36310:26:72"
                          },
                          "nodeType": "YulIf",
                          "src": "36307:2:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36440:42:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nodeType": "YulIdentifier",
                                    "src": "36454:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36454:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "36454:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "36404:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "36427:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36435:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "36424:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36424:14:72"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "36401:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36401:38:72"
                          },
                          "nodeType": "YulIf",
                          "src": "36398:2:72"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "36203:4:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "36212:6:72",
                        "type": ""
                      }
                    ],
                    "src": "36168:320:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36537:238:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "36547:58:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "36569:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "36599:4:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "36577:21:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36577:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36565:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36565:40:72"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "36551:10:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36716:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "36718:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36718:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "36718:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "36659:10:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36671:18:72",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "36656:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36656:34:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "36695:10:72"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "36707:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "36692:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36692:22:72"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "36653:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36653:62:72"
                          },
                          "nodeType": "YulIf",
                          "src": "36650:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36754:2:72",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "36758:10:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36747:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36747:22:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36747:22:72"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "36523:6:72",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "36531:4:72",
                        "type": ""
                      }
                    ],
                    "src": "36494:281:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36824:190:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "36834:33:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "36861:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "36843:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36843:24:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "36834:5:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36957:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "36959:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36959:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "36959:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "36882:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36889:66:72",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "36879:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36879:77:72"
                          },
                          "nodeType": "YulIf",
                          "src": "36876:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36988:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "36999:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37006:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36995:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36995:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "36988:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "36810:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "36820:3:72",
                        "type": ""
                      }
                    ],
                    "src": "36781:233:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37067:32:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37077:16:72",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "37088:5:72"
                          },
                          "variableNames": [
                            {
                              "name": "aligned",
                              "nodeType": "YulIdentifier",
                              "src": "37077:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "leftAlign_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "37049:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "aligned",
                        "nodeType": "YulTypedName",
                        "src": "37059:7:72",
                        "type": ""
                      }
                    ],
                    "src": "37020:79:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37133:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37150:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37153:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37143:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37143:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37143:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37247:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37250:4:72",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37240:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37240:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37240:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37271:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37274:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "37264:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37264:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37264:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "37105:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37319:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37336:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37339:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37329:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37329:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37329:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37433:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37436:4:72",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37426:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37426:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37426:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37457:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37460:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "37450:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37450:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37450:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "37291:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37505:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37522:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37525:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37515:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37515:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37515:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37619:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37622:4:72",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37612:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37612:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37612:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37643:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37646:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "37636:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37636:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37636:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "37477:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37691:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37708:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37711:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37701:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37701:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37701:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37805:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37808:4:72",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37798:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37798:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37798:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37829:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37832:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "37822:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37822:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37822:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nodeType": "YulFunctionDefinition",
                    "src": "37663:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37877:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37894:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37897:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37887:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37887:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37887:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37991:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37994:4:72",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37984:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37984:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37984:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38015:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38018:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38008:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38008:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38008:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "37849:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38063:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38080:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38083:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38073:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38073:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38073:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38177:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38180:4:72",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38170:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38170:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38170:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38201:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38204:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38194:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38194:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38194:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "38035:180:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38310:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38327:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38330:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38320:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38320:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38320:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulFunctionDefinition",
                    "src": "38221:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38433:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38450:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38453:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38443:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38443:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38443:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    "nodeType": "YulFunctionDefinition",
                    "src": "38344:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38556:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38573:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38576:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38566:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38566:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38566:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulFunctionDefinition",
                    "src": "38467:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38679:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38696:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38699:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38689:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38689:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38689:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nodeType": "YulFunctionDefinition",
                    "src": "38590:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38802:28:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38819:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38822:1:72",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "38812:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38812:12:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38812:12:72"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulFunctionDefinition",
                    "src": "38713:117:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38884:54:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "38894:38:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "38912:5:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38919:2:72",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38908:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38908:14:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38928:2:72",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "38924:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38924:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "38904:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38904:28:72"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nodeType": "YulIdentifier",
                              "src": "38894:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "38867:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nodeType": "YulTypedName",
                        "src": "38877:6:72",
                        "type": ""
                      }
                    ],
                    "src": "38836:102:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39050:68:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39072:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39080:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39068:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39068:14:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "39084:26:72",
                                "type": "",
                                "value": "ECDSA: invalid signature"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39061:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39061:50:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39061:50:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39042:6:72",
                        "type": ""
                      }
                    ],
                    "src": "38944:174:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39230:116:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39252:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39260:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39248:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39248:14:72"
                              },
                              {
                                "hexValue": "766f74696e67506572696f64206d757374206265206772656174657220746861",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "39264:34:72",
                                "type": "",
                                "value": "votingPeriod must be greater tha"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39241:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39241:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39241:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39320:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39328:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39316:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39316:15:72"
                              },
                              {
                                "hexValue": "6e2031",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "39333:5:72",
                                "type": "",
                                "value": "n 1"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39309:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39309:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39309:30:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39222:6:72",
                        "type": ""
                      }
                    ],
                    "src": "39124:222:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39458:73:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39480:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39488:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39476:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39476:14:72"
                              },
                              {
                                "hexValue": "6d616a6f7269747920796573566f746573206e6f742072656163686564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "39492:31:72",
                                "type": "",
                                "value": "majority yesVotes not reached"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39469:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39469:55:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39469:55:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39450:6:72",
                        "type": ""
                      }
                    ],
                    "src": "39352:179:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39643:75:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39665:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39673:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39661:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39661:14:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "39677:33:72",
                                "type": "",
                                "value": "ECDSA: invalid signature length"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39654:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39654:57:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39654:57:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39635:6:72",
                        "type": ""
                      }
                    ],
                    "src": "39537:181:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39830:68:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39852:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39860:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39848:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39848:14:72"
                              },
                              {
                                "hexValue": "766f74696e6720706572696f642068617320706173736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "39864:26:72",
                                "type": "",
                                "value": "voting period has passed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39841:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39841:50:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39841:50:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39822:6:72",
                        "type": ""
                      }
                    ],
                    "src": "39724:174:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40010:127:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40032:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40040:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40028:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40028:14:72"
                              },
                              {
                                "hexValue": "612071756f72756d20686173206e6f74206265656e207265616368656420666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40044:34:72",
                                "type": "",
                                "value": "a quorum has not been reached fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40021:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40021:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40021:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40100:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40108:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40096:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40096:15:72"
                              },
                              {
                                "hexValue": "72207468652070726f706f73616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40113:16:72",
                                "type": "",
                                "value": "r the proposal"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40089:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40089:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40089:41:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40002:6:72",
                        "type": ""
                      }
                    ],
                    "src": "39904:233:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40249:119:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40271:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40279:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40267:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40267:14:72"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40283:34:72",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40260:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40260:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40260:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40339:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40347:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40335:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40335:15:72"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40352:8:72",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40328:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40328:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40328:33:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40241:6:72",
                        "type": ""
                      }
                    ],
                    "src": "40143:225:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40480:108:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40502:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40510:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40498:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40498:14:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40514:66:72",
                                "type": "",
                                "value": "0x1901000000000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40491:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40491:90:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40491:90:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40472:6:72",
                        "type": ""
                      }
                    ],
                    "src": "40374:214:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40700:72:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40722:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40730:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40718:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40718:14:72"
                              },
                              {
                                "hexValue": "6d656d62657220697320616c72656164792072656769737465726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40734:30:72",
                                "type": "",
                                "value": "member is already registered"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40711:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40711:54:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40711:54:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40692:6:72",
                        "type": ""
                      }
                    ],
                    "src": "40594:178:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40884:115:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40906:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40914:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40902:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40902:14:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40918:34:72",
                                "type": "",
                                "value": "ECDSA: invalid signature 's' val"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40895:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40895:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40895:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "40974:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40982:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40970:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40970:15:72"
                              },
                              {
                                "hexValue": "7565",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "40987:4:72",
                                "type": "",
                                "value": "ue"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "40963:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40963:29:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "40963:29:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40876:6:72",
                        "type": ""
                      }
                    ],
                    "src": "40778:221:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41111:67:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41133:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41141:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41129:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41129:14:72"
                              },
                              {
                                "hexValue": "766f7465722068617320616c726561647920766f746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41145:25:72",
                                "type": "",
                                "value": "voter has already voted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41122:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41122:49:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41122:49:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "41103:6:72",
                        "type": ""
                      }
                    ],
                    "src": "41005:173:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41290:127:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41312:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41320:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41308:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41308:14:72"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41324:34:72",
                                "type": "",
                                "value": "Initializable: contract is alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41301:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41301:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41301:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41380:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41388:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41376:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41376:15:72"
                              },
                              {
                                "hexValue": "647920696e697469616c697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41393:16:72",
                                "type": "",
                                "value": "dy initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41369:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41369:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41369:41:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "41282:6:72",
                        "type": ""
                      }
                    ],
                    "src": "41184:233:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41529:115:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41551:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41559:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41547:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41547:14:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41563:34:72",
                                "type": "",
                                "value": "ECDSA: invalid signature 'v' val"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41540:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41540:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41540:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41619:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41627:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41615:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41615:15:72"
                              },
                              {
                                "hexValue": "7565",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41632:4:72",
                                "type": "",
                                "value": "ue"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41608:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41608:29:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41608:29:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "41521:6:72",
                        "type": ""
                      }
                    ],
                    "src": "41423:221:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41756:70:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41778:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41786:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41774:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41774:14:72"
                              },
                              {
                                "hexValue": "6f6e6c79205573756c206d6f64756c65206d617920656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41790:28:72",
                                "type": "",
                                "value": "only Usul module may enter"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41767:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41767:52:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41767:52:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "41748:6:72",
                        "type": ""
                      }
                    ],
                    "src": "41650:176:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41938:76:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41960:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41968:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41956:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41956:14:72"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41972:34:72",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41949:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41949:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41949:58:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "41930:6:72",
                        "type": ""
                      }
                    ],
                    "src": "41832:182:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42126:76:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42148:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42156:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42144:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42144:14:72"
                              },
                              {
                                "hexValue": "766f74696e6720706572696f6420686173206e6f742070617373656420796574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "42160:34:72",
                                "type": "",
                                "value": "voting period has not passed yet"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42137:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42137:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42137:58:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "42118:6:72",
                        "type": ""
                      }
                    ],
                    "src": "42020:182:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42314:119:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42336:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42344:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42332:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42332:14:72"
                              },
                              {
                                "hexValue": "71756f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "42348:34:72",
                                "type": "",
                                "value": "quorumNumerator over quorumDenom"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42325:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42325:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42325:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42404:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42412:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42400:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42400:15:72"
                              },
                              {
                                "hexValue": "696e61746f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "42417:8:72",
                                "type": "",
                                "value": "inator"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42393:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42393:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42393:33:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "42306:6:72",
                        "type": ""
                      }
                    ],
                    "src": "42208:225:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42545:65:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42567:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42575:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42563:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42563:14:72"
                              },
                              {
                                "hexValue": "766f746572206973206e6f742061206d656d626572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "42579:23:72",
                                "type": "",
                                "value": "voter is not a member"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42556:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42556:47:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42556:47:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "42537:6:72",
                        "type": ""
                      }
                    ],
                    "src": "42439:171:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42722:68:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42744:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42752:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42740:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42740:14:72"
                              },
                              {
                                "hexValue": "6d656d626572206973206e6f742072656769737465726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "42756:26:72",
                                "type": "",
                                "value": "member is not registered"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42733:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42733:50:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42733:50:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "42714:6:72",
                        "type": ""
                      }
                    ],
                    "src": "42616:174:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42902:124:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42924:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42932:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42920:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42920:14:72"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "42936:34:72",
                                "type": "",
                                "value": "Initializable: contract is not i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42913:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42913:58:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42913:58:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "42992:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43000:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42988:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42988:15:72"
                              },
                              {
                                "hexValue": "6e697469616c697a696e67",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "43005:13:72",
                                "type": "",
                                "value": "nitializing"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42981:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42981:38:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42981:38:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "42894:6:72",
                        "type": ""
                      }
                    ],
                    "src": "42796:230:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43138:75:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "43160:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43168:1:72",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43156:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43156:14:72"
                              },
                              {
                                "hexValue": "696e76616c69642076616c756520666f7220656e756d20566f746554797065",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "43172:33:72",
                                "type": "",
                                "value": "invalid value for enum VoteType"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "43149:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43149:57:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43149:57:72"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "43130:6:72",
                        "type": ""
                      }
                    ],
                    "src": "43032:181:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43262:79:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "43319:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43328:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43331:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "43321:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "43321:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "43321:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "43285:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "43310:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "43292:17:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "43292:24:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "43282:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43282:35:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "43275:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43275:43:72"
                          },
                          "nodeType": "YulIf",
                          "src": "43272:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "43255:5:72",
                        "type": ""
                      }
                    ],
                    "src": "43219:122:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43398:87:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "43463:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43472:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43475:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "43465:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "43465:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "43465:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "43421:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "43454:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address_payable",
                                      "nodeType": "YulIdentifier",
                                      "src": "43428:25:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "43428:32:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "43418:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43418:43:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "43411:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43411:51:72"
                          },
                          "nodeType": "YulIf",
                          "src": "43408:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "43391:5:72",
                        "type": ""
                      }
                    ],
                    "src": "43347:138:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43534:79:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "43591:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43600:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43603:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "43593:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "43593:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "43593:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "43557:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "43582:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "43564:17:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "43564:24:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "43554:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43554:35:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "43547:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43547:43:72"
                          },
                          "nodeType": "YulIf",
                          "src": "43544:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "43527:5:72",
                        "type": ""
                      }
                    ],
                    "src": "43491:122:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43660:77:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "43715:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43724:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43727:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "43717:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "43717:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "43717:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "43683:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "43706:5:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint8",
                                      "nodeType": "YulIdentifier",
                                      "src": "43690:15:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "43690:22:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "43680:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43680:33:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "43673:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43673:41:72"
                          },
                          "nodeType": "YulIf",
                          "src": "43670:2:72"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "43653:5:72",
                        "type": ""
                      }
                    ],
                    "src": "43619:118:72"
                  }
                ]
              },
              "contents": "{\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_payable_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_uint256t_string_memory_ptrt_array$_t_address_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_payable_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_payable_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 160))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value5 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 192))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value6 := abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint8t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint8t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)\n        end := add(pos, 2)\n    }\n\n    function abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint8_t_uint256__to_t_address_t_uint256_t_uint8_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function store_literal_in_memory_04812fa44c85a708fd560b6640f30eef7c95beb4331a58d513a36286dcc28a7b(memPtr) {\n\n        mstore(add(memPtr, 0), \"votingPeriod must be greater tha\")\n\n        mstore(add(memPtr, 32), \"n 1\")\n\n    }\n\n    function store_literal_in_memory_08771d892ee6c567ae659302df0cda99f3432cb8a1a0a7a9dc94910895814a08(memPtr) {\n\n        mstore(add(memPtr, 0), \"majority yesVotes not reached\")\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function store_literal_in_memory_18bb65c70a7cd29aadb7fc0adf3bac2ff813f6f2ce6b4675576e98bce9d727e3(memPtr) {\n\n        mstore(add(memPtr, 0), \"voting period has passed\")\n\n    }\n\n    function store_literal_in_memory_2120a5cdcaf3c362b8797069ffa1cef8a9f088b584831292720686d1a002192a(memPtr) {\n\n        mstore(add(memPtr, 0), \"a quorum has not been reached fo\")\n\n        mstore(add(memPtr, 32), \"r the proposal\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr) {\n\n        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function store_literal_in_memory_3b1bc0e1ea7cdecacab63dc037b025d1d2fbf717f9dbf6b5b7f26cf33736a5ff(memPtr) {\n\n        mstore(add(memPtr, 0), \"member is already registered\")\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function store_literal_in_memory_73186d815de67c379e2b0dee8b0aae2cfb7f384db93b689a9eae02c57fdafdc6(memPtr) {\n\n        mstore(add(memPtr, 0), \"voter has already voted\")\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function store_literal_in_memory_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 'v' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function store_literal_in_memory_895270ed4b68f2c8a9eb0080859b2d778ec76d80939369a867c4fbbbf3cb6411(memPtr) {\n\n        mstore(add(memPtr, 0), \"only Usul module may enter\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_a41f8912b3e08d134aad7c78867c4f2c1951cf07d08e0a8b9c09039eaddc651c(memPtr) {\n\n        mstore(add(memPtr, 0), \"voting period has not passed yet\")\n\n    }\n\n    function store_literal_in_memory_b914574c0ad2969023b4ca0b732dd13b39bb1d7db646661683c0f31defbaf347(memPtr) {\n\n        mstore(add(memPtr, 0), \"quorumNumerator over quorumDenom\")\n\n        mstore(add(memPtr, 32), \"inator\")\n\n    }\n\n    function store_literal_in_memory_c07c03c7414548e240251633f24376503b9247b0c717709893770a5b58318d0c(memPtr) {\n\n        mstore(add(memPtr, 0), \"voter is not a member\")\n\n    }\n\n    function store_literal_in_memory_c3840d5b95b188b6cd238c8a184d3fe8743a98995072f6985b42fc6c44df9d1d(memPtr) {\n\n        mstore(add(memPtr, 0), \"member is not registered\")\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function store_literal_in_memory_ed0bc6518d7401847b8574a7a64dd22327d64bd81f726945ef5e4239952d383e(memPtr) {\n\n        mstore(add(memPtr, 0), \"invalid value for enum VoteType\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n}\n",
              "id": 72,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78446BC1 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA7713A70 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD69BE91C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD69BE91C EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0xEF00EF43 EQ PUSH2 0x516 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xF8CE560A EQ PUSH2 0x54E JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0xA7713A70 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xA8A829C1 EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0xBF1B5EFD EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0xCA6D56DC EQ PUSH2 0x4CA JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x86522973 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x86522973 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x97C3D334 EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xA4F9EDBF EQ PUSH2 0x458 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x78446BC1 EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0x79BFB089 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x7A3FF4D2 EQ PUSH2 0x3E2 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1F2C562E GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x49403183 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x49403183 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x380 JUMPI DUP1 PUSH4 0x747691DF EQ PUSH2 0x38A JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x1F2C562E EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x224F3263 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x43859632 EQ PUSH2 0x302 JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x8AE4B0C EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xB1CA49A EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x11AEE380 EQ PUSH2 0x2AC JUMPI PUSH2 0x1CF JUMP JUMPDEST DUP1 PUSH4 0x13CF08B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x2A251A3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x6F3F9E6 EQ PUSH2 0x226 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x5BA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24A PUSH2 0x642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x2C35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x287 SWAP2 SWAP1 PUSH2 0x2B30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x6F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B4 PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH2 0x8AF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x921 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x25D1 JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x329 SWAP2 SWAP1 PUSH2 0x2B30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x2B30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x36A PUSH2 0xC07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x377 SWAP2 SWAP1 PUSH2 0x2C35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x388 PUSH2 0xC44 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x392 PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B0 PUSH2 0xCF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0xCF8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0xDD4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x406 PUSH2 0xE9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x2B4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x424 PUSH2 0xEBF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x431 SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x442 PUSH2 0xEE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x44F SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x472 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x46D SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0xEF2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x47C PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x489 SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A7 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x119E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0x2611 JUMP JUMPDEST PUSH2 0x12E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4DF SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x12F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x500 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4FB SWAP2 SWAP1 PUSH2 0x24EE JUMP JUMPDEST PUSH2 0x14A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50D SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x530 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x52B SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x1543 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x54C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x547 SWAP2 SWAP1 PUSH2 0x23E7 JUMP JUMPDEST PUSH2 0x160A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x568 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x563 SWAP2 SWAP1 PUSH2 0x2577 JUMP JUMPDEST PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x575 SWAP2 SWAP1 PUSH2 0x2ED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x9D PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0x9A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x5C2 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5E0 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62D SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x63F DUP2 PUSH2 0x175D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x9C DUP1 SLOAD PUSH2 0x64F SWAP1 PUSH2 0x3206 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x67B SWAP1 PUSH2 0x3206 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6C8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x69D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6C8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6AB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x9F PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x6F8 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x716 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x763 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x7FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7F6 SWAP1 PUSH2 0x2E77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x9E PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x86A SWAP1 PUSH2 0x31DC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH32 0x6E76FB4C77256006D9C38EC7D82B45A8C8F3C27B1D6766FFFC42DFB8DE684492 DUP2 PUSH1 0x40 MLOAD PUSH2 0x89E SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x9E SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90D PUSH2 0x907 PUSH32 0xB780761E36898D7EC1CC0FB66FDD6A8A42E635EE643709D6B20652C68A3B29F5 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8EC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x17F2 JUMP JUMPDEST DUP5 PUSH2 0x180C JUMP JUMPDEST SWAP1 POP PUSH2 0x91A DUP6 DUP3 DUP7 PUSH2 0x1833 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A8 SWAP1 PUSH2 0x2DD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9C7 SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST SWAP1 POP TIMESTAMP PUSH1 0x9A SLOAD PUSH2 0x9D7 SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP NUMBER PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH32 0x3AEDA78F6230A590817748B94B63D690CEC4D1A15D494DFC7006E0A39E77F81A DUP2 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xA3D SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT PUSH2 0xB24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB1B SWAP1 PUSH2 0x2C97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB2D NUMBER PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xB65 SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST LT ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9D SWAP1 PUSH2 0x2CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD LT PUSH2 0xBFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF5 SWAP1 PUSH2 0x2E17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC4C PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6A PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCCA PUSH1 0x0 PUSH2 0x1AC8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x9B SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD01 DUP2 PUSH2 0xAB4 JUMP JUMPDEST ISZERO PUSH2 0xD98 JUMPI PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4FD61348 DUP3 PUSH1 0x9B SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD65 SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH32 0x54FFCEE03E8B80C05E4D1C55E3DC60602D9082A899E50337B680C9C4C4D80A3A DUP2 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xDC9 SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xDDC PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDFA PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE50 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE47 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9B SLOAD SWAP1 POP DUP2 PUSH1 0x9B DUP2 SWAP1 SSTORE POP PUSH32 0x2A72574D775756E698A258FC07C826B7185131FFF8A96B868FEACAB45FB23432 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0xE8F SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0xB780761E36898D7EC1CC0FB66FDD6A8A42E635EE643709D6B20652C68A3B29F5 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF1A JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xF22 PUSH2 0x1B8E JUMP JUMPDEST JUMPDEST PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF59 SWAP1 PUSH2 0x2D97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0xFB2 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xFD1 SWAP2 SWAP1 PUSH2 0x2414 JUMP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP PUSH1 0x1 DUP6 GT PUSH2 0x1022 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1019 SWAP1 PUSH2 0x2C77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x102A PUSH2 0x1B9F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x106C JUMPI PUSH2 0x1059 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x104C JUMPI PUSH2 0x104B PUSH2 0x3378 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x12F0 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1064 SWAP1 PUSH2 0x3269 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x102D JUMP JUMPDEST POP PUSH2 0x107E DUP3 PUSH2 0x1079 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0x1BF8 JUMP JUMPDEST PUSH2 0x1087 DUP5 PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x1090 DUP8 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x30CF JUMP JUMPDEST PUSH1 0x9A DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 PUSH2 0x10F1 SWAP2 SWAP1 PUSH2 0x30CF JUMP JUMPDEST PUSH1 0x9B DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9C SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x110D SWAP3 SWAP2 SWAP1 PUSH2 0x2148 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x61586574B8B0EDCA97136AD4CB664EEC4742D53DE53403D531506632E6342A39 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP DUP1 ISZERO PUSH2 0x1190 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x11A6 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C4 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x121A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1211 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x20C8544544AEFAEFDF339D996D855F2D4040CF93548344AA7DCB03B19E160CD1 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x12EB DUP4 CALLER DUP5 PUSH2 0x1833 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x12F8 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1316 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x136C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1363 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x13FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F6 SWAP1 PUSH2 0x2D37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x9E PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x146A SWAP1 PUSH2 0x3269 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH32 0xB251EB052AFC73FFD02FFE85AD79990A8B3FED60D76DBC2FA2FDD7123DFFD914 DUP2 PUSH1 0x40 MLOAD PUSH2 0x149E SWAP2 SWAP1 PUSH2 0x2AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x9F PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1538 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x152F SWAP1 PUSH2 0x2E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x154B PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1569 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15B6 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9A SLOAD SWAP1 POP DUP2 PUSH1 0x9A DUP2 SWAP1 SSTORE POP PUSH32 0xFFC708F072CA56E3D45EF0CB288B96CB9378F5F63E1646868BFBC9C38F4263A1 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x15FE SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1612 PUSH2 0x1755 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1630 PUSH2 0xEBF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x167D SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x16F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16ED SWAP1 PUSH2 0x2D17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16FF DUP2 PUSH2 0x1AC8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170C PUSH2 0xEE9 JUMP JUMPDEST PUSH2 0x1714 PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x9E SLOAD PUSH2 0x1721 SWAP2 SWAP1 PUSH2 0x30CF JUMP JUMPDEST PUSH2 0x172B SWAP2 SWAP1 PUSH2 0x309E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1765 PUSH2 0xEE9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x179E SWAP1 PUSH2 0x2E37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 SLOAD SWAP1 POP DUP2 PUSH1 0xA0 DUP2 SWAP1 SSTORE POP PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x17E6 SWAP3 SWAP2 SWAP1 PUSH2 0x2EF2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1805 PUSH2 0x17FF PUSH2 0x1C73 JUMP JUMPDEST DUP4 PUSH2 0x1CB3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x181B DUP6 DUP6 PUSH2 0x1CE6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1828 DUP2 PUSH2 0x1D69 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP GT ISZERO PUSH2 0x188C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1883 SWAP1 PUSH2 0x2CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1896 DUP4 DUP4 PUSH2 0xA49 JUMP JUMPDEST ISZERO PUSH2 0x18D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18CD SWAP1 PUSH2 0x2D77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x194E DUP4 DUP6 PUSH2 0x14A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1964 JUMPI PUSH2 0x1963 PUSH2 0x331A JUMP JUMPDEST JUMPDEST PUSH1 0xFF AND DUP3 PUSH1 0xFF AND EQ ISZERO PUSH2 0x19A3 JUMPI DUP1 PUSH1 0x9D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1997 SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1A85 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x19B7 JUMPI PUSH2 0x19B6 PUSH2 0x331A JUMP JUMPDEST JUMPDEST PUSH1 0xFF AND DUP3 PUSH1 0xFF AND EQ ISZERO PUSH2 0x19F6 JUMPI DUP1 PUSH1 0x9D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x19EA SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1A84 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x1A09 JUMPI PUSH2 0x1A08 PUSH2 0x331A JUMP JUMPDEST JUMPDEST PUSH1 0xFF AND DUP3 PUSH1 0xFF AND EQ ISZERO PUSH2 0x1A48 JUMPI DUP1 PUSH1 0x9D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1A3C SWAP2 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A7A SWAP1 PUSH2 0x2EB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST JUMPDEST PUSH32 0x27EB20ECADC80D52F641A540B295D208F7C3735545D321B08E505116C6013199 DUP4 DUP6 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1ABA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B99 ADDRESS PUSH2 0x1732 JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BE5 SWAP1 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1BF6 PUSH2 0x1F3E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3E SWAP1 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x66 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x67 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CAE PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1CA1 PUSH2 0x1F9F JUMP JUMPDEST PUSH2 0x1CA9 PUSH2 0x1FA9 JUMP JUMPDEST PUSH2 0x1FB3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CC8 SWAP3 SWAP2 SWAP1 PUSH2 0x2A99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x41 DUP4 MLOAD EQ ISZERO PUSH2 0x1D28 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0x1D1C DUP8 DUP3 DUP6 DUP6 PUSH2 0x1FED JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x40 DUP4 MLOAD EQ ISZERO PUSH2 0x1D59 JUMPI PUSH1 0x0 DUP1 PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP6 ADD MLOAD SWAP1 POP PUSH2 0x1D4E DUP7 DUP4 DUP4 PUSH2 0x20FA JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x1D62 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D7D JUMPI PUSH2 0x1D7C PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D90 JUMPI PUSH2 0x1D8F PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1D9B JUMPI PUSH2 0x1F3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1DAF JUMPI PUSH2 0x1DAE PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1DC2 JUMPI PUSH2 0x1DC1 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1E03 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DFA SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E2A JUMPI PUSH2 0x1E29 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1E6B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E62 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E7F JUMPI PUSH2 0x1E7E PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1E92 JUMPI PUSH2 0x1E91 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1ED3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ECA SWAP1 PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 DUP2 GT ISZERO PUSH2 0x1EE6 JUMPI PUSH2 0x1EE5 PUSH2 0x331A JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1EF9 JUMPI PUSH2 0x1EF8 PUSH2 0x331A JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x1F3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F31 SWAP1 PUSH2 0x2DB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F84 SWAP1 PUSH2 0x2E97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F9D PUSH2 0x1F98 PUSH2 0x1755 JUMP JUMPDEST PUSH2 0x1AC8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x66 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1FCE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x2028 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x20F1 JUMP JUMPDEST PUSH1 0x1B DUP6 PUSH1 0xFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2040 JUMPI POP PUSH1 0x1C DUP6 PUSH1 0xFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2052 JUMPI PUSH1 0x0 PUSH1 0x4 SWAP2 POP SWAP2 POP PUSH2 0x20F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2077 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BF0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2099 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x20E8 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x20F1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 POP PUSH1 0x1B DUP6 PUSH1 0xFF SHR ADD SWAP1 POP PUSH2 0x213A DUP8 DUP3 DUP9 DUP6 PUSH2 0x1FED JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2154 SWAP1 PUSH2 0x3206 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2176 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x21BD JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x218F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x21BD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x21BD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x21BC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x21A1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x21CA SWAP2 SWAP1 PUSH2 0x21CE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x21E7 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x21CF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21FE PUSH2 0x21F9 DUP5 PUSH2 0x2F93 JUMP JUMPDEST PUSH2 0x2F6E JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x2221 JUMPI PUSH2 0x2220 PUSH2 0x33DB JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2251 JUMPI DUP2 PUSH2 0x2237 DUP9 DUP3 PUSH2 0x22F4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2224 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x226E PUSH2 0x2269 DUP5 PUSH2 0x2FBF JUMP JUMPDEST PUSH2 0x2F6E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x228A JUMPI PUSH2 0x2289 PUSH2 0x33E0 JUMP JUMPDEST JUMPDEST PUSH2 0x2295 DUP5 DUP3 DUP6 PUSH2 0x319A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22B0 PUSH2 0x22AB DUP5 PUSH2 0x2FF0 JUMP JUMPDEST PUSH2 0x2F6E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x22CC JUMPI PUSH2 0x22CB PUSH2 0x33E0 JUMP JUMPDEST JUMPDEST PUSH2 0x22D7 DUP5 DUP3 DUP6 PUSH2 0x31A9 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22EE DUP2 PUSH2 0x388D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2303 DUP2 PUSH2 0x388D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2318 DUP2 PUSH2 0x38A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2333 JUMPI PUSH2 0x2332 PUSH2 0x33D6 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x2343 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x21EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2361 JUMPI PUSH2 0x2360 PUSH2 0x33D6 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2371 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x225B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x238F JUMPI PUSH2 0x238E PUSH2 0x33D6 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x239F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x229D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23B7 DUP2 PUSH2 0x38BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x23CC DUP2 PUSH2 0x38BB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23E1 DUP2 PUSH2 0x38D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23FD JUMPI PUSH2 0x23FC PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x240B DUP5 DUP3 DUP6 ADD PUSH2 0x22DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2433 JUMPI PUSH2 0x2432 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2441 DUP11 DUP3 DUP12 ADD PUSH2 0x2309 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x2452 DUP11 DUP3 DUP12 ADD PUSH2 0x2309 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x2463 DUP11 DUP3 DUP12 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x2474 DUP11 DUP3 DUP12 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2485 DUP11 DUP3 DUP12 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24A6 JUMPI PUSH2 0x24A5 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x24B2 DUP11 DUP3 DUP12 ADD PUSH2 0x237A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24D3 JUMPI PUSH2 0x24D2 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x24DF DUP11 DUP3 DUP12 ADD PUSH2 0x231E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2505 JUMPI PUSH2 0x2504 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2513 DUP6 DUP3 DUP7 ADD PUSH2 0x22DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2524 DUP6 DUP3 DUP7 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2544 JUMPI PUSH2 0x2543 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2562 JUMPI PUSH2 0x2561 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x256E DUP5 DUP3 DUP6 ADD PUSH2 0x234C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x258D JUMPI PUSH2 0x258C PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x259B DUP5 DUP3 DUP6 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25BA JUMPI PUSH2 0x25B9 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25C8 DUP5 DUP3 DUP6 ADD PUSH2 0x23BD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25E8 JUMPI PUSH2 0x25E7 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25F6 DUP6 DUP3 DUP7 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2607 DUP6 DUP3 DUP7 ADD PUSH2 0x22DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x262A JUMPI PUSH2 0x2629 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2638 DUP7 DUP3 DUP8 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2649 DUP7 DUP3 DUP8 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x266A JUMPI PUSH2 0x2669 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x2676 DUP7 DUP3 DUP8 ADD PUSH2 0x234C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x269A JUMPI PUSH2 0x2699 PUSH2 0x33EA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26A8 DUP8 DUP3 DUP9 ADD PUSH2 0x23A8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x26B9 DUP8 DUP3 DUP9 ADD PUSH2 0x23D2 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26DA JUMPI PUSH2 0x26D9 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x26E6 DUP8 DUP3 DUP9 ADD PUSH2 0x234C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2707 JUMPI PUSH2 0x2706 PUSH2 0x33E5 JUMP JUMPDEST JUMPDEST PUSH2 0x2713 DUP8 DUP3 DUP9 ADD PUSH2 0x234C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x2728 DUP2 PUSH2 0x3129 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2737 DUP2 PUSH2 0x314D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2746 DUP2 PUSH2 0x3159 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x275D PUSH2 0x2758 DUP3 PUSH2 0x3159 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x276E DUP3 PUSH2 0x3021 JUMP JUMPDEST PUSH2 0x2778 DUP2 DUP6 PUSH2 0x302C JUMP JUMPDEST SWAP4 POP PUSH2 0x2788 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x31A9 JUMP JUMPDEST PUSH2 0x2791 DUP2 PUSH2 0x33EF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27A9 PUSH1 0x18 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x27B4 DUP3 PUSH2 0x3400 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27CC PUSH1 0x23 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x27D7 DUP3 PUSH2 0x3429 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EF PUSH1 0x1D DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x27FA DUP3 PUSH2 0x3478 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2812 PUSH1 0x1F DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x281D DUP3 PUSH2 0x34A1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2835 PUSH1 0x18 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2840 DUP3 PUSH2 0x34CA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2858 PUSH1 0x2E DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2863 DUP3 PUSH2 0x34F3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x287B PUSH1 0x26 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2886 DUP3 PUSH2 0x3542 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x289E PUSH1 0x2 DUP4 PUSH2 0x303D JUMP JUMPDEST SWAP2 POP PUSH2 0x28A9 DUP3 PUSH2 0x3591 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C1 PUSH1 0x1C DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x28CC DUP3 PUSH2 0x35BA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28E4 PUSH1 0x22 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x28EF DUP3 PUSH2 0x35E3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2907 PUSH1 0x17 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2912 DUP3 PUSH2 0x3632 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x292A PUSH1 0x2E DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2935 DUP3 PUSH2 0x365B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294D PUSH1 0x22 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2958 DUP3 PUSH2 0x36AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2970 PUSH1 0x1A DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x297B DUP3 PUSH2 0x36F9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2993 PUSH1 0x20 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x299E DUP3 PUSH2 0x3722 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29B6 PUSH1 0x20 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x29C1 DUP3 PUSH2 0x374B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D9 PUSH1 0x26 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x29E4 DUP3 PUSH2 0x3774 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29FC PUSH1 0x15 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A07 DUP3 PUSH2 0x37C3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A1F PUSH1 0x18 DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A2A DUP3 PUSH2 0x37EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A42 PUSH1 0x2B DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A4D DUP3 PUSH2 0x3815 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A65 PUSH1 0x1F DUP4 PUSH2 0x302C JUMP JUMPDEST SWAP2 POP PUSH2 0x2A70 DUP3 PUSH2 0x3864 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A84 DUP2 PUSH2 0x3183 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2A93 DUP2 PUSH2 0x318D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AA4 DUP3 PUSH2 0x2891 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AB0 DUP3 DUP6 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2AC0 DUP3 DUP5 PUSH2 0x274C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2AE5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x271F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2B00 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x271F JUMP JUMPDEST PUSH2 0x2B0D PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2B1A PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x2B27 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B45 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x272E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B60 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x273D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2B7B PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2B88 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2B95 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2BA2 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2BAF PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x271F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2BCE PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2BDB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2BE8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A8A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2C05 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2C12 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x2C1F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x273D JUMP JUMPDEST PUSH2 0x2C2C PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x273D JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C4F DUP2 DUP5 PUSH2 0x2763 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C70 DUP2 PUSH2 0x279C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C90 DUP2 PUSH2 0x27BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CB0 DUP2 PUSH2 0x27E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CD0 DUP2 PUSH2 0x2805 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF0 DUP2 PUSH2 0x2828 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D10 DUP2 PUSH2 0x284B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D30 DUP2 PUSH2 0x286E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D50 DUP2 PUSH2 0x28B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D70 DUP2 PUSH2 0x28D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D90 DUP2 PUSH2 0x28FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DB0 DUP2 PUSH2 0x291D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DD0 DUP2 PUSH2 0x2940 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2DF0 DUP2 PUSH2 0x2963 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E10 DUP2 PUSH2 0x2986 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E30 DUP2 PUSH2 0x29A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E50 DUP2 PUSH2 0x29CC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E70 DUP2 PUSH2 0x29EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E90 DUP2 PUSH2 0x2A12 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EB0 DUP2 PUSH2 0x2A35 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2ED0 DUP2 PUSH2 0x2A58 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EEC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F07 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F14 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2F30 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F3D PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F4A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F57 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2A7B JUMP JUMPDEST PUSH2 0x2F64 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2A7B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F78 PUSH2 0x2F89 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F84 DUP3 DUP3 PUSH2 0x3238 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2FAE JUMPI PUSH2 0x2FAD PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2FDA JUMPI PUSH2 0x2FD9 PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST PUSH2 0x2FE3 DUP3 PUSH2 0x33EF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x300B JUMPI PUSH2 0x300A PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST PUSH2 0x3014 DUP3 PUSH2 0x33EF JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3053 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH2 0x305E DUP4 PUSH2 0x3183 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3093 JUMPI PUSH2 0x3092 PUSH2 0x32BC JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A9 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH2 0x30B4 DUP4 PUSH2 0x3183 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x30C4 JUMPI PUSH2 0x30C3 PUSH2 0x32EB JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DA DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH2 0x30E5 DUP4 PUSH2 0x3183 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x311E JUMPI PUSH2 0x311D PUSH2 0x32BC JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3134 DUP3 PUSH2 0x3163 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3146 DUP3 PUSH2 0x3163 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31C7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x31AC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x31D6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E7 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x31FB JUMPI PUSH2 0x31FA PUSH2 0x32BC JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x321E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3232 JUMPI PUSH2 0x3231 PUSH2 0x3349 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3241 DUP3 PUSH2 0x33EF JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3260 JUMPI PUSH2 0x325F PUSH2 0x33A7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3274 DUP3 PUSH2 0x3183 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x32A7 JUMPI PUSH2 0x32A6 PUSH2 0x32BC JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F74696E67506572696F64206D757374206265206772656174657220746861 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E20310000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D616A6F7269747920796573566F746573206E6F742072656163686564000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F74696E6720706572696F6420686173207061737365640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x612071756F72756D20686173206E6F74206265656E207265616368656420666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72207468652070726F706F73616C000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D656D62657220697320616C7265616479207265676973746572656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F7465722068617320616C726561647920766F746564000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6F6E6C79205573756C206D6F64756C65206D617920656E746572000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F74696E6720706572696F6420686173206E6F742070617373656420796574 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x71756F72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x696E61746F720000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x766F746572206973206E6F742061206D656D6265720000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x6D656D626572206973206E6F7420726567697374657265640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x696E76616C69642076616C756520666F7220656E756D20566F74655479706500 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x3896 DUP2 PUSH2 0x3129 JUMP JUMPDEST DUP2 EQ PUSH2 0x38A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38AD DUP2 PUSH2 0x313B JUMP JUMPDEST DUP2 EQ PUSH2 0x38B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38C4 DUP2 PUSH2 0x3183 JUMP JUMPDEST DUP2 EQ PUSH2 0x38CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x38DB DUP2 PUSH2 0x318D JUMP JUMPDEST DUP2 EQ PUSH2 0x38E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 SWAP9 0xD3 0xAC SLT PUSH9 0x6723D61CA7D42D7E69 0xC7 EXP RETURNDATACOPY JUMPI 0xB6 0x22 SWAP16 PUSH13 0x3802DCC0214F4C6A2B64736F6C PUSH4 0x43000806 STOP CALLER ",
          "sourceMap": "459:2848:71:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1233:51:58;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;1087:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;794:171:56;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1208:18:58;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;318:39:54;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;799:232;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;285:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3526:392:58;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4978:370;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2824:173;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2362:613:71;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1760:90:58;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1908:101:28;;;:::i;:::-;;499:25:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1173:29:58;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5487:259;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2356:265;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;479:96;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1276:85:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;613:94:56;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1177:1049:71;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;502:105:56;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;770:170:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3148:165:58;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;562:231:54;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3130:175:71;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1968:227:58;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2158:198:28;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2981:143:71;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1233:51:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1087:27::-;;;;:::o;794:171:56:-;1499:12:28;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;916:42:56::1;939:18;916:22;:42::i;:::-;794:171:::0;:::o;1208:18:58:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;318:39:54:-;;;;;;;;;;;;;;;;;;;;;;:::o;799:232::-;1499:12:28;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;899:4:54::1;880:23;;:7;:15;888:6;880:15;;;;;;;;;;;;;;;;;;;;;;;;;:23;;;872:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;960:5;942:7;:15;950:6;942:15;;;;;;;;;;;;;;;;:23;;;;;;;;;;;;;;;;;;975:11;;:13;;;;;;;;;:::i;:::-;;;;;;1003:21;1017:6;1003:21;;;;;;:::i;:::-;;;;;;;;799:232:::0;:::o;285:26::-;;;;:::o;3526:392:58:-;3687:13;3703:165;3730:105;527:48;3800:10;3812:7;3774:46;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3764:57;;;;;;3730:16;:105::i;:::-;3849:9;3703:13;:165::i;:::-;3687:181;;3878:33;3884:10;3896:5;3903:7;3878:5;:33::i;:::-;3677:241;3526:392;;;;:::o;4978:370::-;583:10:49;;;;;;;;;;;569:24;;:10;:24;;;561:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;5103:18:58::1;5135:4;5124:27;;;;;;;;;;;;:::i;:::-;5103:48;;5209:15;5194:12;;:30;;;;:::i;:::-;5161:9;:21;5171:10;5161:21;;;;;;;;;;;:30;;:63;;;;5269:12;5234:9;:21;5244:10;5234:21;;;;;;;;;;;:32;;:47;;;;5296:45;5313:10;5325:15;5296:45;;;;;;;:::i;:::-;;;;;;;;5093:255;4978:370:::0;:::o;2824:173::-;2924:4;2951:9;:21;2961:10;2951:21;;;;;;;;;;;:30;;:39;2982:7;2951:39;;;;;;;;;;;;;;;;;;;;;;;;;2944:46;;2824:173;;;;:::o;2362:613:71:-;2430:4;2500:9;:21;2510:10;2500:21;;;;;;;;;;;:29;;;2467:9;:21;2477:10;2467:21;;;;;;;;;;;:30;;;:62;2446:138;;;;;;;;;;;;:::i;:::-;;;;;;;;;2718:20;2725:12;2718:6;:20::i;:::-;2664:9;:21;2674:10;2664:21;;;;;;;;;;;:34;;;2615:9;:21;2625:10;2615:21;;;;;;;;;;;:30;;;:83;;;;:::i;:::-;:123;;2594:216;;;;;;;;;;;;:::i;:::-;;;;;;;;;2874:15;2841:9;:21;2851:10;2841:21;;;;;;;;;;;:30;;;:48;2820:127;;;;;;;;;;;;:::i;:::-;;;;;;;;;2964:4;2957:11;;2362:613;;;:::o;1760:90:58:-;1808:13;1833:10;;;;;;;;;;;;;;;;;;;1760:90;:::o;1908:101:28:-;1499:12;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1972:30:::1;1999:1;1972:18;:30::i;:::-;1908:101::o:0;499:25:49:-;;;;;;;;;;;;;:::o;1173:29:58:-;;;;:::o;5487:259::-;5571:20;5580:10;5571:8;:20::i;:::-;5567:116;;;5617:10;;;;;;;;;;;5607:37;;;5645:10;5657:14;;5607:65;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5567:116;5697:42;5711:10;5723:15;5697:42;;;;;;;:::i;:::-;;;;;;;;5487:259;:::o;2356:265::-;1499:12:28;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2462:24:58::1;2489:14;;2462:41;;2530:17;2513:14;:34;;;;2562:52;2578:16;2596:17;2562:52;;;;;;;:::i;:::-;;;;;;;;2452:169;2356:265:::0;:::o;479:96::-;527:48;479:96;:::o;1276:85:28:-;1322:7;1348:6;;;;;;;;;;;1341:13;;1276:85;:::o;613:94:56:-;671:7;697:3;690:10;;613:94;:::o;1177:1049:71:-;2369:13:29;;;;;;;;;;;:48;;2405:12;;;;;;;;;;2404:13;2369:48;;;2385:16;:14;:16::i;:::-;2369:48;2361:107;;;;;;;;;;;;:::i;:::-;;;;;;;;;2479:19;2502:13;;;;;;;;;;;2501:14;2479:36;;2529:14;2525:98;;;2575:4;2559:13;;:20;;;;;;;;;;;;;;;;;;2608:4;2593:12;;:19;;;;;;;;;;;;;;;;;;2525:98;1269:14:71::1;1297:19:::0;1330:21:::1;1365:24:::0;1403:23:::1;1440:19:::0;1473:25:::1;1539:10;1511:134;;;;;;;;;;;;:::i;:::-;1255:390;;;;;;;;;;;;;;1679:1;1663:13;:17;1655:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1730:16;:14;:16::i;:::-;1761:9;1756:93;1780:8;:15;1776:1;:19;1756:93;;;1816:22;1826:8;1835:1;1826:11;;;;;;;;:::i;:::-;;;;;;;;1816:9;:22::i;:::-;1797:3;;;;;:::i;:::-;;;;1756:93;;;;1858:41;1882:5;1889:9;:7;:9::i;:::-;1858:23;:41::i;:::-;1909:39;1931:16;1909:21;:39::i;:::-;1958:25;1976:6;1958:17;:25::i;:::-;2024:9;2008:13;:25;;;;:::i;:::-;1993:12;:40;;;;2083:11;2070:10;;:24;;;;;;;;;;;;;;;;;;2139:9;2121:15;:27;;;;:::i;:::-;2104:14;:44;;;;2165:5;2158:4;:12;;;;;;;;;;;;:::i;:::-;;2212:6;2185:34;;2199:11;2185:34;;;;;;;;;;;;1245:981;;;;;;;2649:14:29::0;2645:66;;;2695:5;2679:13;;:21;;;;;;;;;;;;;;;;;;2645:66;2080:637;1177:1049:71;:::o;502:105:56:-;558:7;584:16;;577:23;;502:105;:::o;770:170:49:-;1499:12:28;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;829:20:49::1;852:10;;;;;;;;;;;829:33;;885:5;872:10;;:18;;;;;;;;;;;;;;;;;;927:5;905:28;;913:12;905:28;;;;;;;;;;;;819:121;770:170:::0;:::o;3148:165:58:-;3268:38;3274:10;3286;3298:7;3268:5;:38::i;:::-;3148:165;;;:::o;562:231:54:-;1499:12:28;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;659:5:54::1;640:24;;:7;:15;648:6;640:15;;;;;;;;;;;;;;;;;;;;;;;;;:24;;;632:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;725:4;707:7;:15;715:6;707:15;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;739:11;;:13;;;;;;;;;:::i;:::-;;;;;;767:19;779:6;767:19;;;;;;:::i;:::-;;;;;;;;562:231:::0;:::o;3130:175:71:-;3267:7;3243:5;417:7:54;:14;425:5;417:14;;;;;;;;;;;;;;;;;;;;;;;;;409:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;3297:1:71::1;3290:8;;3130:175:::0;;;;;:::o;1968:227:58:-;1499:12:28;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2044:28:58::1;2075:12;;2044:43;;2112:9;2097:12;:24;;;;2136:52;2156:20;2178:9;2136:52;;;;;;;:::i;:::-;;;;;;;;2034:161;1968:227:::0;:::o;2158:198:28:-;1499:12;:10;:12::i;:::-;1488:23;;:7;:5;:7::i;:::-;:23;;;1480:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2266:1:::1;2246:22;;:8;:22;;;;2238:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;2981:143:71:-;3036:7;3098:19;:17;:19::i;:::-;3077:17;:15;:17::i;:::-;3063:11;;:31;;;;:::i;:::-;3062:55;;;;:::i;:::-;3055:62;;2981:143;;;:::o;1186:320:30:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;850:96:31:-;903:7;929:10;922:17;;850:96;:::o;971:421:56:-;1121:19;:17;:19::i;:::-;1099:18;:41;;1078:126;;;;;;;;;;;;:::i;:::-;;;;;;;;;1215:26;1244:16;;1215:45;;1289:18;1270:16;:37;;;;1323:62;1346:18;1366;1323:62;;;;;;;:::i;:::-;;;;;;;;1068:324;971:421;:::o;3860:176:34:-;3937:7;3963:66;3996:20;:18;:20::i;:::-;4018:10;3963:32;:66::i;:::-;3956:73;;3860:176;;;:::o;4203:227:44:-;4281:7;4301:17;4320:18;4342:27;4353:4;4359:9;4342:10;:27::i;:::-;4300:69;;;;4379:18;4391:5;4379:11;:18::i;:::-;4414:9;4407:16;;;;4203:227;;;;:::o;3924:893:58:-;4078:9;:21;4088:10;4078:21;;;;;;;;;;;:30;;;4059:15;:49;;4038:120;;;;;;;;;;;;:::i;:::-;;;;;;;;;4177:27;4186:10;4198:5;4177:8;:27::i;:::-;4176:28;4168:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;4282:4;4242:9;:21;4252:10;4242:21;;;;;;;;;;;:30;;:37;4273:5;4242:37;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;4296:14;4313:34;4329:5;4336:10;4313:15;:34::i;:::-;4296:51;;4378:16;4372:23;;;;;;;;:::i;:::-;;4361:34;;:7;:34;;;4357:398;;;4444:6;4411:9;:21;4421:10;4411:21;;;;;;;;;;;:29;;;:39;;;;;;;:::i;:::-;;;;;;;;4357:398;;;4488:12;4482:19;;;;;;;;:::i;:::-;;4471:30;;:7;:30;;;4467:288;;;4551:6;4517:9;:21;4527:10;4517:21;;;;;;;;;;;:30;;;:40;;;;;;;:::i;:::-;;;;;;;;4467:288;;;4595:16;4589:23;;;;;;;;:::i;:::-;;4578:34;;:7;:34;;;4574:181;;;4666:6;4628:9;:21;4638:10;4628:21;;;;;;;;;;;:34;;;:44;;;;;;;:::i;:::-;;;;;;;;4574:181;;;4703:41;;;;;;;;;;:::i;:::-;;;;;;;;4574:181;4467:288;4357:398;4769:41;4775:5;4782:10;4794:7;4803:6;4769:41;;;;;;;;;:::i;:::-;;;;;;;;4028:789;3924:893;;;:::o;2510:187:28:-;2583:16;2602:6;;;;;;;;;;;2583:25;;2627:8;2618:6;;:17;;;;;;;;;;;;;;;;;;2681:8;2650:40;;2671:8;2650:40;;;;;;;;;;;;2573:124;2510:187;:::o;3037:123:29:-;3085:4;3109:44;3147:4;3109:29;:44::i;:::-;3108:45;3101:52;;3037:123;:::o;988:95:28:-;2952:13:29;;;;;;;;;;;2944:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1050:26:28::1;:24;:26::i;:::-;988:95::o:0;2429:297:34:-;2952:13:29;;;;;;;;;;;2944:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2541:18:34::1;2578:4;2562:22;;;;;;2541:43;;2594:21;2634:7;2618:25;;;;;;2594:49;;2668:10;2653:12;:25;;;;2706:13;2688:15;:31;;;;2531:195;;2429:297:::0;;:::o;2812:160::-;2865:7;2891:74;1565:95;2925:17;:15;:17::i;:::-;2944:20;:18;:20::i;:::-;2891:21;:74::i;:::-;2884:81;;2812:160;:::o;9130:194:33:-;9223:7;9288:15;9305:10;9259:57;;;;;;;;;:::i;:::-;;;;;;;;;;;;;9249:68;;;;;;9242:75;;9130:194;;;;:::o;2138:1279:44:-;2219:7;2228:12;2469:2;2449:9;:16;:22;2445:966;;;2487:9;2510;2533:7;2738:4;2727:9;2723:20;2717:27;2712:32;;2787:4;2776:9;2772:20;2766:27;2761:32;;2844:4;2833:9;2829:20;2823:27;2820:1;2815:36;2810:41;;2885:25;2896:4;2902:1;2905;2908;2885:10;:25::i;:::-;2878:32;;;;;;;;;2445:966;2951:2;2931:9;:16;:22;2927:484;;;2969:9;2992:10;3200:4;3189:9;3185:20;3179:27;3174:32;;3250:4;3239:9;3235:20;3229:27;3223:33;;3290:23;3301:4;3307:1;3310:2;3290:10;:23::i;:::-;3283:30;;;;;;;;2927:484;3360:1;3364:35;3344:56;;;;2138:1279;;;;;;:::o;443:631::-;520:20;511:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;507:561;;;556:7;;507:561;616:29;607:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;603:465;;;661:34;;;;;;;;;;:::i;:::-;;;;;;;;603:465;725:35;716:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;712:356;;;776:41;;;;;;;;;;:::i;:::-;;;;;;;;712:356;847:30;838:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;834:234;;;893:44;;;;;;;;;;:::i;:::-;;;;;;;;834:234;967:30;958:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;954:114;;;1013:44;;;;;;;;;;:::i;:::-;;;;;;;;954:114;443:631;;:::o;1089:111:28:-;2952:13:29;;;;;;;;;;;2944:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1161:32:28::1;1180:12;:10;:12::i;:::-;1161:18;:32::i;:::-;1089:111::o:0;4272:103:34:-;4330:7;4356:12;;4349:19;;4272:103;:::o;4614:109::-;4675:7;4701:15;;4694:22;;4614:109;:::o;2978:257::-;3118:7;3165:8;3175;3185:11;3198:13;3221:4;3154:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3144:84;;;;;;3137:91;;2978:257;;;;;:::o;5654:1603:44:-;5780:7;5789:12;6704:66;6699:1;6691:10;;:79;6687:161;;;6802:1;6806:30;6786:51;;;;;;6687:161;6866:2;6861:1;:7;;;;:18;;;;;6877:2;6872:1;:7;;;;6861:18;6857:100;;;6911:1;6915:30;6895:51;;;;;;6857:100;7051:14;7068:24;7078:4;7084:1;7087;7090;7068:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7051:41;;7124:1;7106:20;;:6;:20;;;7102:101;;;7158:1;7162:29;7142:50;;;;;;;7102:101;7221:6;7229:20;7213:37;;;;;5654:1603;;;;;;;;:::o;4684:379::-;4794:7;4803:12;4827:9;4846:7;4899:66;4895:2;4891:75;4886:80;;5002:2;4997;4992:3;4988:12;4984:21;4979:26;;5031:25;5042:4;5048:1;5051;5054;5031:10;:25::i;:::-;5024:32;;;;;;4684:379;;;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:744:72:-;131:5;156:81;172:64;229:6;172:64;:::i;:::-;156:81;:::i;:::-;147:90;;257:5;286:6;279:5;272:21;320:4;313:5;309:16;302:23;;346:6;396:3;388:4;380:6;376:17;371:3;367:27;364:36;361:2;;;415:79;;:::i;:::-;361:2;528:1;513:249;538:6;535:1;532:13;513:249;;;606:3;635:48;679:3;667:10;635:48;:::i;:::-;630:3;623:61;713:4;708:3;704:14;697:21;;747:4;742:3;738:14;731:21;;573:189;560:1;557;553:9;548:14;;513:249;;;517:14;137:631;;;;;;;:::o;774:410::-;851:5;876:65;892:48;933:6;892:48;:::i;:::-;876:65;:::i;:::-;867:74;;964:6;957:5;950:21;1002:4;995:5;991:16;1040:3;1031:6;1026:3;1022:16;1019:25;1016:2;;;1047:79;;:::i;:::-;1016:2;1137:41;1171:6;1166:3;1161;1137:41;:::i;:::-;857:327;;;;;;:::o;1190:421::-;1279:5;1304:66;1320:49;1362:6;1320:49;:::i;:::-;1304:66;:::i;:::-;1295:75;;1393:6;1386:5;1379:21;1431:4;1424:5;1420:16;1469:3;1460:6;1455:3;1451:16;1448:25;1445:2;;;1476:79;;:::i;:::-;1445:2;1566:39;1598:6;1593:3;1588;1566:39;:::i;:::-;1285:326;;;;;;:::o;1617:139::-;1663:5;1701:6;1688:20;1679:29;;1717:33;1744:5;1717:33;:::i;:::-;1669:87;;;;:::o;1762:143::-;1819:5;1850:6;1844:13;1835:22;;1866:33;1893:5;1866:33;:::i;:::-;1825:80;;;;:::o;1911:159::-;1976:5;2007:6;2001:13;1992:22;;2023:41;2058:5;2023:41;:::i;:::-;1982:88;;;;:::o;2093:385::-;2175:5;2224:3;2217:4;2209:6;2205:17;2201:27;2191:2;;2232:79;;:::i;:::-;2191:2;2342:6;2336:13;2367:105;2468:3;2460:6;2453:4;2445:6;2441:17;2367:105;:::i;:::-;2358:114;;2181:297;;;;;:::o;2497:338::-;2552:5;2601:3;2594:4;2586:6;2582:17;2578:27;2568:2;;2609:79;;:::i;:::-;2568:2;2726:6;2713:20;2751:78;2825:3;2817:6;2810:4;2802:6;2798:17;2751:78;:::i;:::-;2742:87;;2558:277;;;;;:::o;2855:355::-;2922:5;2971:3;2964:4;2956:6;2952:17;2948:27;2938:2;;2979:79;;:::i;:::-;2938:2;3089:6;3083:13;3114:90;3200:3;3192:6;3185:4;3177:6;3173:17;3114:90;:::i;:::-;3105:99;;2928:282;;;;;:::o;3216:139::-;3262:5;3300:6;3287:20;3278:29;;3316:33;3343:5;3316:33;:::i;:::-;3268:87;;;;:::o;3361:143::-;3418:5;3449:6;3443:13;3434:22;;3465:33;3492:5;3465:33;:::i;:::-;3424:80;;;;:::o;3510:135::-;3554:5;3592:6;3579:20;3570:29;;3608:31;3633:5;3608:31;:::i;:::-;3560:85;;;;:::o;3651:329::-;3710:6;3759:2;3747:9;3738:7;3734:23;3730:32;3727:2;;;3765:79;;:::i;:::-;3727:2;3885:1;3910:53;3955:7;3946:6;3935:9;3931:22;3910:53;:::i;:::-;3900:63;;3856:117;3717:263;;;;:::o;3986:1699::-;4161:6;4169;4177;4185;4193;4201;4209;4258:3;4246:9;4237:7;4233:23;4229:33;4226:2;;;4265:79;;:::i;:::-;4226:2;4385:1;4410:72;4474:7;4465:6;4454:9;4450:22;4410:72;:::i;:::-;4400:82;;4356:136;4531:2;4557:72;4621:7;4612:6;4601:9;4597:22;4557:72;:::i;:::-;4547:82;;4502:137;4678:2;4704:64;4760:7;4751:6;4740:9;4736:22;4704:64;:::i;:::-;4694:74;;4649:129;4817:2;4843:64;4899:7;4890:6;4879:9;4875:22;4843:64;:::i;:::-;4833:74;;4788:129;4956:3;4983:64;5039:7;5030:6;5019:9;5015:22;4983:64;:::i;:::-;4973:74;;4927:130;5117:3;5106:9;5102:19;5096:26;5149:18;5141:6;5138:30;5135:2;;;5171:79;;:::i;:::-;5135:2;5276:74;5342:7;5333:6;5322:9;5318:22;5276:74;:::i;:::-;5266:84;;5067:293;5420:3;5409:9;5405:19;5399:26;5452:18;5444:6;5441:30;5438:2;;;5474:79;;:::i;:::-;5438:2;5579:89;5660:7;5651:6;5640:9;5636:22;5579:89;:::i;:::-;5569:99;;5370:308;4216:1469;;;;;;;;;;:::o;5691:474::-;5759:6;5767;5816:2;5804:9;5795:7;5791:23;5787:32;5784:2;;;5822:79;;:::i;:::-;5784:2;5942:1;5967:53;6012:7;6003:6;5992:9;5988:22;5967:53;:::i;:::-;5957:63;;5913:117;6069:2;6095:53;6140:7;6131:6;6120:9;6116:22;6095:53;:::i;:::-;6085:63;;6040:118;5774:391;;;;;:::o;6171:507::-;6239:6;6288:2;6276:9;6267:7;6263:23;6259:32;6256:2;;;6294:79;;:::i;:::-;6256:2;6442:1;6431:9;6427:17;6414:31;6472:18;6464:6;6461:30;6458:2;;;6494:79;;:::i;:::-;6458:2;6599:62;6653:7;6644:6;6633:9;6629:22;6599:62;:::i;:::-;6589:72;;6385:286;6246:432;;;;:::o;6684:329::-;6743:6;6792:2;6780:9;6771:7;6767:23;6763:32;6760:2;;;6798:79;;:::i;:::-;6760:2;6918:1;6943:53;6988:7;6979:6;6968:9;6964:22;6943:53;:::i;:::-;6933:63;;6889:117;6750:263;;;;:::o;7019:351::-;7089:6;7138:2;7126:9;7117:7;7113:23;7109:32;7106:2;;;7144:79;;:::i;:::-;7106:2;7264:1;7289:64;7345:7;7336:6;7325:9;7321:22;7289:64;:::i;:::-;7279:74;;7235:128;7096:274;;;;:::o;7376:474::-;7444:6;7452;7501:2;7489:9;7480:7;7476:23;7472:32;7469:2;;;7507:79;;:::i;:::-;7469:2;7627:1;7652:53;7697:7;7688:6;7677:9;7673:22;7652:53;:::i;:::-;7642:63;;7598:117;7754:2;7780:53;7825:7;7816:6;7805:9;7801:22;7780:53;:::i;:::-;7770:63;;7725:118;7459:391;;;;;:::o;7856:793::-;7940:6;7948;7956;8005:2;7993:9;7984:7;7980:23;7976:32;7973:2;;;8011:79;;:::i;:::-;7973:2;8131:1;8156:53;8201:7;8192:6;8181:9;8177:22;8156:53;:::i;:::-;8146:63;;8102:117;8258:2;8284:51;8327:7;8318:6;8307:9;8303:22;8284:51;:::i;:::-;8274:61;;8229:116;8412:2;8401:9;8397:18;8384:32;8443:18;8435:6;8432:30;8429:2;;;8465:79;;:::i;:::-;8429:2;8570:62;8624:7;8615:6;8604:9;8600:22;8570:62;:::i;:::-;8560:72;;8355:287;7963:686;;;;;:::o;8655:1117::-;8757:6;8765;8773;8781;8830:3;8818:9;8809:7;8805:23;8801:33;8798:2;;;8837:79;;:::i;:::-;8798:2;8957:1;8982:53;9027:7;9018:6;9007:9;9003:22;8982:53;:::i;:::-;8972:63;;8928:117;9084:2;9110:51;9153:7;9144:6;9133:9;9129:22;9110:51;:::i;:::-;9100:61;;9055:116;9238:2;9227:9;9223:18;9210:32;9269:18;9261:6;9258:30;9255:2;;;9291:79;;:::i;:::-;9255:2;9396:62;9450:7;9441:6;9430:9;9426:22;9396:62;:::i;:::-;9386:72;;9181:287;9535:2;9524:9;9520:18;9507:32;9566:18;9558:6;9555:30;9552:2;;;9588:79;;:::i;:::-;9552:2;9693:62;9747:7;9738:6;9727:9;9723:22;9693:62;:::i;:::-;9683:72;;9478:287;8788:984;;;;;;;:::o;9778:118::-;9865:24;9883:5;9865:24;:::i;:::-;9860:3;9853:37;9843:53;;:::o;9902:109::-;9983:21;9998:5;9983:21;:::i;:::-;9978:3;9971:34;9961:50;;:::o;10017:118::-;10104:24;10122:5;10104:24;:::i;:::-;10099:3;10092:37;10082:53;;:::o;10141:157::-;10246:45;10266:24;10284:5;10266:24;:::i;:::-;10246:45;:::i;:::-;10241:3;10234:58;10224:74;;:::o;10304:364::-;10392:3;10420:39;10453:5;10420:39;:::i;:::-;10475:71;10539:6;10534:3;10475:71;:::i;:::-;10468:78;;10555:52;10600:6;10595:3;10588:4;10581:5;10577:16;10555:52;:::i;:::-;10632:29;10654:6;10632:29;:::i;:::-;10627:3;10623:39;10616:46;;10396:272;;;;;:::o;10674:366::-;10816:3;10837:67;10901:2;10896:3;10837:67;:::i;:::-;10830:74;;10913:93;11002:3;10913:93;:::i;:::-;11031:2;11026:3;11022:12;11015:19;;10820:220;;;:::o;11046:366::-;11188:3;11209:67;11273:2;11268:3;11209:67;:::i;:::-;11202:74;;11285:93;11374:3;11285:93;:::i;:::-;11403:2;11398:3;11394:12;11387:19;;11192:220;;;:::o;11418:366::-;11560:3;11581:67;11645:2;11640:3;11581:67;:::i;:::-;11574:74;;11657:93;11746:3;11657:93;:::i;:::-;11775:2;11770:3;11766:12;11759:19;;11564:220;;;:::o;11790:366::-;11932:3;11953:67;12017:2;12012:3;11953:67;:::i;:::-;11946:74;;12029:93;12118:3;12029:93;:::i;:::-;12147:2;12142:3;12138:12;12131:19;;11936:220;;;:::o;12162:366::-;12304:3;12325:67;12389:2;12384:3;12325:67;:::i;:::-;12318:74;;12401:93;12490:3;12401:93;:::i;:::-;12519:2;12514:3;12510:12;12503:19;;12308:220;;;:::o;12534:366::-;12676:3;12697:67;12761:2;12756:3;12697:67;:::i;:::-;12690:74;;12773:93;12862:3;12773:93;:::i;:::-;12891:2;12886:3;12882:12;12875:19;;12680:220;;;:::o;12906:366::-;13048:3;13069:67;13133:2;13128:3;13069:67;:::i;:::-;13062:74;;13145:93;13234:3;13145:93;:::i;:::-;13263:2;13258:3;13254:12;13247:19;;13052:220;;;:::o;13278:400::-;13438:3;13459:84;13541:1;13536:3;13459:84;:::i;:::-;13452:91;;13552:93;13641:3;13552:93;:::i;:::-;13670:1;13665:3;13661:11;13654:18;;13442:236;;;:::o;13684:366::-;13826:3;13847:67;13911:2;13906:3;13847:67;:::i;:::-;13840:74;;13923:93;14012:3;13923:93;:::i;:::-;14041:2;14036:3;14032:12;14025:19;;13830:220;;;:::o;14056:366::-;14198:3;14219:67;14283:2;14278:3;14219:67;:::i;:::-;14212:74;;14295:93;14384:3;14295:93;:::i;:::-;14413:2;14408:3;14404:12;14397:19;;14202:220;;;:::o;14428:366::-;14570:3;14591:67;14655:2;14650:3;14591:67;:::i;:::-;14584:74;;14667:93;14756:3;14667:93;:::i;:::-;14785:2;14780:3;14776:12;14769:19;;14574:220;;;:::o;14800:366::-;14942:3;14963:67;15027:2;15022:3;14963:67;:::i;:::-;14956:74;;15039:93;15128:3;15039:93;:::i;:::-;15157:2;15152:3;15148:12;15141:19;;14946:220;;;:::o;15172:366::-;15314:3;15335:67;15399:2;15394:3;15335:67;:::i;:::-;15328:74;;15411:93;15500:3;15411:93;:::i;:::-;15529:2;15524:3;15520:12;15513:19;;15318:220;;;:::o;15544:366::-;15686:3;15707:67;15771:2;15766:3;15707:67;:::i;:::-;15700:74;;15783:93;15872:3;15783:93;:::i;:::-;15901:2;15896:3;15892:12;15885:19;;15690:220;;;:::o;15916:366::-;16058:3;16079:67;16143:2;16138:3;16079:67;:::i;:::-;16072:74;;16155:93;16244:3;16155:93;:::i;:::-;16273:2;16268:3;16264:12;16257:19;;16062:220;;;:::o;16288:366::-;16430:3;16451:67;16515:2;16510:3;16451:67;:::i;:::-;16444:74;;16527:93;16616:3;16527:93;:::i;:::-;16645:2;16640:3;16636:12;16629:19;;16434:220;;;:::o;16660:366::-;16802:3;16823:67;16887:2;16882:3;16823:67;:::i;:::-;16816:74;;16899:93;16988:3;16899:93;:::i;:::-;17017:2;17012:3;17008:12;17001:19;;16806:220;;;:::o;17032:366::-;17174:3;17195:67;17259:2;17254:3;17195:67;:::i;:::-;17188:74;;17271:93;17360:3;17271:93;:::i;:::-;17389:2;17384:3;17380:12;17373:19;;17178:220;;;:::o;17404:366::-;17546:3;17567:67;17631:2;17626:3;17567:67;:::i;:::-;17560:74;;17643:93;17732:3;17643:93;:::i;:::-;17761:2;17756:3;17752:12;17745:19;;17550:220;;;:::o;17776:366::-;17918:3;17939:67;18003:2;17998:3;17939:67;:::i;:::-;17932:74;;18015:93;18104:3;18015:93;:::i;:::-;18133:2;18128:3;18124:12;18117:19;;17922:220;;;:::o;18148:366::-;18290:3;18311:67;18375:2;18370:3;18311:67;:::i;:::-;18304:74;;18387:93;18476:3;18387:93;:::i;:::-;18505:2;18500:3;18496:12;18489:19;;18294:220;;;:::o;18520:118::-;18607:24;18625:5;18607:24;:::i;:::-;18602:3;18595:37;18585:53;;:::o;18644:112::-;18727:22;18743:5;18727:22;:::i;:::-;18722:3;18715:35;18705:51;;:::o;18762:663::-;19003:3;19025:148;19169:3;19025:148;:::i;:::-;19018:155;;19183:75;19254:3;19245:6;19183:75;:::i;:::-;19283:2;19278:3;19274:12;19267:19;;19296:75;19367:3;19358:6;19296:75;:::i;:::-;19396:2;19391:3;19387:12;19380:19;;19416:3;19409:10;;19007:418;;;;;:::o;19431:222::-;19524:4;19562:2;19551:9;19547:18;19539:26;;19575:71;19643:1;19632:9;19628:17;19619:6;19575:71;:::i;:::-;19529:124;;;;:::o;19659:545::-;19832:4;19870:3;19859:9;19855:19;19847:27;;19884:71;19952:1;19941:9;19937:17;19928:6;19884:71;:::i;:::-;19965:72;20033:2;20022:9;20018:18;20009:6;19965:72;:::i;:::-;20047:68;20111:2;20100:9;20096:18;20087:6;20047:68;:::i;:::-;20125:72;20193:2;20182:9;20178:18;20169:6;20125:72;:::i;:::-;19837:367;;;;;;;:::o;20210:210::-;20297:4;20335:2;20324:9;20320:18;20312:26;;20348:65;20410:1;20399:9;20395:17;20386:6;20348:65;:::i;:::-;20302:118;;;;:::o;20426:222::-;20519:4;20557:2;20546:9;20542:18;20534:26;;20570:71;20638:1;20627:9;20623:17;20614:6;20570:71;:::i;:::-;20524:124;;;;:::o;20654:664::-;20859:4;20897:3;20886:9;20882:19;20874:27;;20911:71;20979:1;20968:9;20964:17;20955:6;20911:71;:::i;:::-;20992:72;21060:2;21049:9;21045:18;21036:6;20992:72;:::i;:::-;21074;21142:2;21131:9;21127:18;21118:6;21074:72;:::i;:::-;21156;21224:2;21213:9;21209:18;21200:6;21156:72;:::i;:::-;21238:73;21306:3;21295:9;21291:19;21282:6;21238:73;:::i;:::-;20864:454;;;;;;;;:::o;21324:434::-;21469:4;21507:2;21496:9;21492:18;21484:26;;21520:71;21588:1;21577:9;21573:17;21564:6;21520:71;:::i;:::-;21601:72;21669:2;21658:9;21654:18;21645:6;21601:72;:::i;:::-;21683:68;21747:2;21736:9;21732:18;21723:6;21683:68;:::i;:::-;21474:284;;;;;;:::o;21764:545::-;21937:4;21975:3;21964:9;21960:19;21952:27;;21989:71;22057:1;22046:9;22042:17;22033:6;21989:71;:::i;:::-;22070:68;22134:2;22123:9;22119:18;22110:6;22070:68;:::i;:::-;22148:72;22216:2;22205:9;22201:18;22192:6;22148:72;:::i;:::-;22230;22298:2;22287:9;22283:18;22274:6;22230:72;:::i;:::-;21942:367;;;;;;;:::o;22315:313::-;22428:4;22466:2;22455:9;22451:18;22443:26;;22515:9;22509:4;22505:20;22501:1;22490:9;22486:17;22479:47;22543:78;22616:4;22607:6;22543:78;:::i;:::-;22535:86;;22433:195;;;;:::o;22634:419::-;22800:4;22838:2;22827:9;22823:18;22815:26;;22887:9;22881:4;22877:20;22873:1;22862:9;22858:17;22851:47;22915:131;23041:4;22915:131;:::i;:::-;22907:139;;22805:248;;;:::o;23059:419::-;23225:4;23263:2;23252:9;23248:18;23240:26;;23312:9;23306:4;23302:20;23298:1;23287:9;23283:17;23276:47;23340:131;23466:4;23340:131;:::i;:::-;23332:139;;23230:248;;;:::o;23484:419::-;23650:4;23688:2;23677:9;23673:18;23665:26;;23737:9;23731:4;23727:20;23723:1;23712:9;23708:17;23701:47;23765:131;23891:4;23765:131;:::i;:::-;23757:139;;23655:248;;;:::o;23909:419::-;24075:4;24113:2;24102:9;24098:18;24090:26;;24162:9;24156:4;24152:20;24148:1;24137:9;24133:17;24126:47;24190:131;24316:4;24190:131;:::i;:::-;24182:139;;24080:248;;;:::o;24334:419::-;24500:4;24538:2;24527:9;24523:18;24515:26;;24587:9;24581:4;24577:20;24573:1;24562:9;24558:17;24551:47;24615:131;24741:4;24615:131;:::i;:::-;24607:139;;24505:248;;;:::o;24759:419::-;24925:4;24963:2;24952:9;24948:18;24940:26;;25012:9;25006:4;25002:20;24998:1;24987:9;24983:17;24976:47;25040:131;25166:4;25040:131;:::i;:::-;25032:139;;24930:248;;;:::o;25184:419::-;25350:4;25388:2;25377:9;25373:18;25365:26;;25437:9;25431:4;25427:20;25423:1;25412:9;25408:17;25401:47;25465:131;25591:4;25465:131;:::i;:::-;25457:139;;25355:248;;;:::o;25609:419::-;25775:4;25813:2;25802:9;25798:18;25790:26;;25862:9;25856:4;25852:20;25848:1;25837:9;25833:17;25826:47;25890:131;26016:4;25890:131;:::i;:::-;25882:139;;25780:248;;;:::o;26034:419::-;26200:4;26238:2;26227:9;26223:18;26215:26;;26287:9;26281:4;26277:20;26273:1;26262:9;26258:17;26251:47;26315:131;26441:4;26315:131;:::i;:::-;26307:139;;26205:248;;;:::o;26459:419::-;26625:4;26663:2;26652:9;26648:18;26640:26;;26712:9;26706:4;26702:20;26698:1;26687:9;26683:17;26676:47;26740:131;26866:4;26740:131;:::i;:::-;26732:139;;26630:248;;;:::o;26884:419::-;27050:4;27088:2;27077:9;27073:18;27065:26;;27137:9;27131:4;27127:20;27123:1;27112:9;27108:17;27101:47;27165:131;27291:4;27165:131;:::i;:::-;27157:139;;27055:248;;;:::o;27309:419::-;27475:4;27513:2;27502:9;27498:18;27490:26;;27562:9;27556:4;27552:20;27548:1;27537:9;27533:17;27526:47;27590:131;27716:4;27590:131;:::i;:::-;27582:139;;27480:248;;;:::o;27734:419::-;27900:4;27938:2;27927:9;27923:18;27915:26;;27987:9;27981:4;27977:20;27973:1;27962:9;27958:17;27951:47;28015:131;28141:4;28015:131;:::i;:::-;28007:139;;27905:248;;;:::o;28159:419::-;28325:4;28363:2;28352:9;28348:18;28340:26;;28412:9;28406:4;28402:20;28398:1;28387:9;28383:17;28376:47;28440:131;28566:4;28440:131;:::i;:::-;28432:139;;28330:248;;;:::o;28584:419::-;28750:4;28788:2;28777:9;28773:18;28765:26;;28837:9;28831:4;28827:20;28823:1;28812:9;28808:17;28801:47;28865:131;28991:4;28865:131;:::i;:::-;28857:139;;28755:248;;;:::o;29009:419::-;29175:4;29213:2;29202:9;29198:18;29190:26;;29262:9;29256:4;29252:20;29248:1;29237:9;29233:17;29226:47;29290:131;29416:4;29290:131;:::i;:::-;29282:139;;29180:248;;;:::o;29434:419::-;29600:4;29638:2;29627:9;29623:18;29615:26;;29687:9;29681:4;29677:20;29673:1;29662:9;29658:17;29651:47;29715:131;29841:4;29715:131;:::i;:::-;29707:139;;29605:248;;;:::o;29859:419::-;30025:4;30063:2;30052:9;30048:18;30040:26;;30112:9;30106:4;30102:20;30098:1;30087:9;30083:17;30076:47;30140:131;30266:4;30140:131;:::i;:::-;30132:139;;30030:248;;;:::o;30284:419::-;30450:4;30488:2;30477:9;30473:18;30465:26;;30537:9;30531:4;30527:20;30523:1;30512:9;30508:17;30501:47;30565:131;30691:4;30565:131;:::i;:::-;30557:139;;30455:248;;;:::o;30709:419::-;30875:4;30913:2;30902:9;30898:18;30890:26;;30962:9;30956:4;30952:20;30948:1;30937:9;30933:17;30926:47;30990:131;31116:4;30990:131;:::i;:::-;30982:139;;30880:248;;;:::o;31134:222::-;31227:4;31265:2;31254:9;31250:18;31242:26;;31278:71;31346:1;31335:9;31331:17;31322:6;31278:71;:::i;:::-;31232:124;;;;:::o;31362:332::-;31483:4;31521:2;31510:9;31506:18;31498:26;;31534:71;31602:1;31591:9;31587:17;31578:6;31534:71;:::i;:::-;31615:72;31683:2;31672:9;31668:18;31659:6;31615:72;:::i;:::-;31488:206;;;;;:::o;31700:664::-;31905:4;31943:3;31932:9;31928:19;31920:27;;31957:71;32025:1;32014:9;32010:17;32001:6;31957:71;:::i;:::-;32038:72;32106:2;32095:9;32091:18;32082:6;32038:72;:::i;:::-;32120;32188:2;32177:9;32173:18;32164:6;32120:72;:::i;:::-;32202;32270:2;32259:9;32255:18;32246:6;32202:72;:::i;:::-;32284:73;32352:3;32341:9;32337:19;32328:6;32284:73;:::i;:::-;31910:454;;;;;;;;:::o;32370:129::-;32404:6;32431:20;;:::i;:::-;32421:30;;32460:33;32488:4;32480:6;32460:33;:::i;:::-;32411:88;;;:::o;32505:75::-;32538:6;32571:2;32565:9;32555:19;;32545:35;:::o;32586:311::-;32663:4;32753:18;32745:6;32742:30;32739:2;;;32775:18;;:::i;:::-;32739:2;32825:4;32817:6;32813:17;32805:25;;32885:4;32879;32875:15;32867:23;;32668:229;;;:::o;32903:307::-;32964:4;33054:18;33046:6;33043:30;33040:2;;;33076:18;;:::i;:::-;33040:2;33114:29;33136:6;33114:29;:::i;:::-;33106:37;;33198:4;33192;33188:15;33180:23;;32969:241;;;:::o;33216:308::-;33278:4;33368:18;33360:6;33357:30;33354:2;;;33390:18;;:::i;:::-;33354:2;33428:29;33450:6;33428:29;:::i;:::-;33420:37;;33512:4;33506;33502:15;33494:23;;33283:241;;;:::o;33530:99::-;33582:6;33616:5;33610:12;33600:22;;33589:40;;;:::o;33635:169::-;33719:11;33753:6;33748:3;33741:19;33793:4;33788:3;33784:14;33769:29;;33731:73;;;;:::o;33810:148::-;33912:11;33949:3;33934:18;;33924:34;;;;:::o;33964:305::-;34004:3;34023:20;34041:1;34023:20;:::i;:::-;34018:25;;34057:20;34075:1;34057:20;:::i;:::-;34052:25;;34211:1;34143:66;34139:74;34136:1;34133:81;34130:2;;;34217:18;;:::i;:::-;34130:2;34261:1;34258;34254:9;34247:16;;34008:261;;;;:::o;34275:185::-;34315:1;34332:20;34350:1;34332:20;:::i;:::-;34327:25;;34366:20;34384:1;34366:20;:::i;:::-;34361:25;;34405:1;34395:2;;34410:18;;:::i;:::-;34395:2;34452:1;34449;34445:9;34440:14;;34317:143;;;;:::o;34466:348::-;34506:7;34529:20;34547:1;34529:20;:::i;:::-;34524:25;;34563:20;34581:1;34563:20;:::i;:::-;34558:25;;34751:1;34683:66;34679:74;34676:1;34673:81;34668:1;34661:9;34654:17;34650:105;34647:2;;;34758:18;;:::i;:::-;34647:2;34806:1;34803;34799:9;34788:20;;34514:300;;;;:::o;34820:96::-;34857:7;34886:24;34904:5;34886:24;:::i;:::-;34875:35;;34865:51;;;:::o;34922:104::-;34967:7;34996:24;35014:5;34996:24;:::i;:::-;34985:35;;34975:51;;;:::o;35032:90::-;35066:7;35109:5;35102:13;35095:21;35084:32;;35074:48;;;:::o;35128:77::-;35165:7;35194:5;35183:16;;35173:32;;;:::o;35211:126::-;35248:7;35288:42;35281:5;35277:54;35266:65;;35256:81;;;:::o;35343:77::-;35380:7;35409:5;35398:16;;35388:32;;;:::o;35426:86::-;35461:7;35501:4;35494:5;35490:16;35479:27;;35469:43;;;:::o;35518:154::-;35602:6;35597:3;35592;35579:30;35664:1;35655:6;35650:3;35646:16;35639:27;35569:103;;;:::o;35678:307::-;35746:1;35756:113;35770:6;35767:1;35764:13;35756:113;;;35855:1;35850:3;35846:11;35840:18;35836:1;35831:3;35827:11;35820:39;35792:2;35789:1;35785:10;35780:15;;35756:113;;;35887:6;35884:1;35881:13;35878:2;;;35967:1;35958:6;35953:3;35949:16;35942:27;35878:2;35727:258;;;;:::o;35991:171::-;36030:3;36053:24;36071:5;36053:24;:::i;:::-;36044:33;;36099:4;36092:5;36089:15;36086:2;;;36107:18;;:::i;:::-;36086:2;36154:1;36147:5;36143:13;36136:20;;36034:128;;;:::o;36168:320::-;36212:6;36249:1;36243:4;36239:12;36229:22;;36296:1;36290:4;36286:12;36317:18;36307:2;;36373:4;36365:6;36361:17;36351:27;;36307:2;36435;36427:6;36424:14;36404:18;36401:38;36398:2;;;36454:18;;:::i;:::-;36398:2;36219:269;;;;:::o;36494:281::-;36577:27;36599:4;36577:27;:::i;:::-;36569:6;36565:40;36707:6;36695:10;36692:22;36671:18;36659:10;36656:34;36653:62;36650:2;;;36718:18;;:::i;:::-;36650:2;36758:10;36754:2;36747:22;36537:238;;;:::o;36781:233::-;36820:3;36843:24;36861:5;36843:24;:::i;:::-;36834:33;;36889:66;36882:5;36879:77;36876:2;;;36959:18;;:::i;:::-;36876:2;37006:1;36999:5;36995:13;36988:20;;36824:190;;;:::o;37020:79::-;37059:7;37088:5;37077:16;;37067:32;;;:::o;37105:180::-;37153:77;37150:1;37143:88;37250:4;37247:1;37240:15;37274:4;37271:1;37264:15;37291:180;37339:77;37336:1;37329:88;37436:4;37433:1;37426:15;37460:4;37457:1;37450:15;37477:180;37525:77;37522:1;37515:88;37622:4;37619:1;37612:15;37646:4;37643:1;37636:15;37663:180;37711:77;37708:1;37701:88;37808:4;37805:1;37798:15;37832:4;37829:1;37822:15;37849:180;37897:77;37894:1;37887:88;37994:4;37991:1;37984:15;38018:4;38015:1;38008:15;38035:180;38083:77;38080:1;38073:88;38180:4;38177:1;38170:15;38204:4;38201:1;38194:15;38221:117;38330:1;38327;38320:12;38344:117;38453:1;38450;38443:12;38467:117;38576:1;38573;38566:12;38590:117;38699:1;38696;38689:12;38713:117;38822:1;38819;38812:12;38836:102;38877:6;38928:2;38924:7;38919:2;38912:5;38908:14;38904:28;38894:38;;38884:54;;;:::o;38944:174::-;39084:26;39080:1;39072:6;39068:14;39061:50;39050:68;:::o;39124:222::-;39264:34;39260:1;39252:6;39248:14;39241:58;39333:5;39328:2;39320:6;39316:15;39309:30;39230:116;:::o;39352:179::-;39492:31;39488:1;39480:6;39476:14;39469:55;39458:73;:::o;39537:181::-;39677:33;39673:1;39665:6;39661:14;39654:57;39643:75;:::o;39724:174::-;39864:26;39860:1;39852:6;39848:14;39841:50;39830:68;:::o;39904:233::-;40044:34;40040:1;40032:6;40028:14;40021:58;40113:16;40108:2;40100:6;40096:15;40089:41;40010:127;:::o;40143:225::-;40283:34;40279:1;40271:6;40267:14;40260:58;40352:8;40347:2;40339:6;40335:15;40328:33;40249:119;:::o;40374:214::-;40514:66;40510:1;40502:6;40498:14;40491:90;40480:108;:::o;40594:178::-;40734:30;40730:1;40722:6;40718:14;40711:54;40700:72;:::o;40778:221::-;40918:34;40914:1;40906:6;40902:14;40895:58;40987:4;40982:2;40974:6;40970:15;40963:29;40884:115;:::o;41005:173::-;41145:25;41141:1;41133:6;41129:14;41122:49;41111:67;:::o;41184:233::-;41324:34;41320:1;41312:6;41308:14;41301:58;41393:16;41388:2;41380:6;41376:15;41369:41;41290:127;:::o;41423:221::-;41563:34;41559:1;41551:6;41547:14;41540:58;41632:4;41627:2;41619:6;41615:15;41608:29;41529:115;:::o;41650:176::-;41790:28;41786:1;41778:6;41774:14;41767:52;41756:70;:::o;41832:182::-;41972:34;41968:1;41960:6;41956:14;41949:58;41938:76;:::o;42020:182::-;42160:34;42156:1;42148:6;42144:14;42137:58;42126:76;:::o;42208:225::-;42348:34;42344:1;42336:6;42332:14;42325:58;42417:8;42412:2;42404:6;42400:15;42393:33;42314:119;:::o;42439:171::-;42579:23;42575:1;42567:6;42563:14;42556:47;42545:65;:::o;42616:174::-;42756:26;42752:1;42744:6;42740:14;42733:50;42722:68;:::o;42796:230::-;42936:34;42932:1;42924:6;42920:14;42913:58;43005:13;43000:2;42992:6;42988:15;42981:38;42902:124;:::o;43032:181::-;43172:33;43168:1;43160:6;43156:14;43149:57;43138:75;:::o;43219:122::-;43292:24;43310:5;43292:24;:::i;:::-;43285:5;43282:35;43272:2;;43331:1;43328;43321:12;43272:2;43262:79;:::o;43347:138::-;43428:32;43454:5;43428:32;:::i;:::-;43421:5;43418:43;43408:2;;43475:1;43472;43465:12;43408:2;43398:87;:::o;43491:122::-;43564:24;43582:5;43564:24;:::i;:::-;43557:5;43554:35;43544:2;;43603:1;43600;43593:12;43544:2;43534:79;:::o;43619:118::-;43690:22;43706:5;43690:22;:::i;:::-;43683:5;43680:33;43670:2;;43727:1;43724;43717:12;43670:2;43660:77;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2924600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "UsulModule()": "2625",
            "VOTE_TYPEHASH()": "374",
            "addMember(address)": "infinite",
            "calculateWeight(address,uint256)": "infinite",
            "finalizeStrategy(uint256)": "infinite",
            "hasVoted(uint256,address)": "3230",
            "isPassed(uint256)": "infinite",
            "memberCount()": "2541",
            "members(address)": "2913",
            "name()": "infinite",
            "owner()": "2589",
            "proposals(uint256)": "infinite",
            "quorum(uint256)": "infinite",
            "quorumDenominator()": "426",
            "quorumNumerator()": "2482",
            "receiveProposal(bytes)": "infinite",
            "removeMember(address)": "infinite",
            "renounceOwnership()": "30463",
            "setUp(bytes)": "infinite",
            "setUsul(address)": "30723",
            "timeLockPeriod()": "2475",
            "transferOwnership(address)": "30811",
            "updateQuorumNumerator(uint256)": "infinite",
            "updateTimeLockPeriod(uint256)": "infinite",
            "updateVotingPeriod(uint256)": "infinite",
            "version()": "infinite",
            "vote(uint256,uint8,bytes)": "infinite",
            "voteSignature(uint256,uint8,bytes,bytes)": "infinite",
            "votingPeriod()": "2498"
          }
        },
        "methodIdentifiers": {
          "UsulModule()": "747691df",
          "VOTE_TYPEHASH()": "86522973",
          "addMember(address)": "ca6d56dc",
          "calculateWeight(address,uint256)": "d69be91c",
          "finalizeStrategy(uint256)": "79bfb089",
          "hasVoted(uint256,address)": "43859632",
          "isPassed(uint256)": "49403183",
          "memberCount()": "11aee380",
          "members(address)": "08ae4b0c",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "proposals(uint256)": "013cf08b",
          "quorum(uint256)": "f8ce560a",
          "quorumDenominator()": "97c3d334",
          "quorumNumerator()": "a7713a70",
          "receiveProposal(bytes)": "224f3263",
          "removeMember(address)": "0b1ca49a",
          "renounceOwnership()": "715018a6",
          "setUp(bytes)": "a4f9edbf",
          "setUsul(address)": "a8a829c1",
          "timeLockPeriod()": "78446bc1",
          "transferOwnership(address)": "f2fde38b",
          "updateQuorumNumerator(uint256)": "06f3f9e6",
          "updateTimeLockPeriod(uint256)": "7a3ff4d2",
          "updateVotingPeriod(uint256)": "ef00ef43",
          "version()": "54fd4d50",
          "vote(uint256,uint8,bytes)": "bf1b5efd",
          "voteSignature(uint256,uint8,bytes,bytes)": "1f2c562e",
          "votingPeriod()": "02a251a3"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UsulModule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumNumerator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UsulModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StrategySetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTimeLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeLockPeriod\",\"type\":\"uint256\"}],\"name\":\"TimeLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousUsul\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUsul\",\"type\":\"address\"}],\"name\":\"UsulSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VoteFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UsulModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calculateWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"finalizeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initParams\",\"type\":\"bytes\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Usul\",\"type\":\"address\"}],\"name\":\"setUsul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimeLockPeriod\",\"type\":\"uint256\"}],\"name\":\"updateTimeLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"updateVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"voteSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nathan Ginnever - <team@hyphal.xyz>\",\"kind\":\"dev\",\"methods\":{\"finalizeStrategy(uint256)\":{\"details\":\"Calls the proposal module to notify that a quorum has been reached.\",\"params\":{\"proposalId\":\"the proposal to vote for.\"}},\"hasVoted(uint256,address)\":{\"details\":\"Returns true if an account has voted on a specific proposal.\",\"params\":{\"account\":\"the account to inspect.\",\"proposalId\":\"the proposal to inspect.\"},\"returns\":{\"_0\":\"boolean.\"}},\"isPassed(uint256)\":{\"details\":\"Determines if a proposal has succeeded.\",\"params\":{\"proposalId\":\"the proposal to vote for.\"},\"returns\":{\"_0\":\"boolean.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveProposal(bytes)\":{\"details\":\"Called by the proposal module, this notifes the strategy of a new proposal.\",\"params\":{\"data\":\"any extra data to pass to the voting strategy\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setUsul(address)\":{\"details\":\"Sets the executor to a new account (`newExecutor`).\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTimeLockPeriod(uint256)\":{\"details\":\"Updates the grace period time after a proposal passed before it can execute.\",\"params\":{\"newTimeLockPeriod\":\"the new delay before execution.\"}},\"updateVotingPeriod(uint256)\":{\"details\":\"Updates the time that proposals are active for voting.\",\"params\":{\"newPeriod\":\"the voting window.\"}},\"version()\":{\"details\":\"ERC712 version.\"},\"vote(uint256,uint8,bytes)\":{\"details\":\"Submits a vote for a proposal.\",\"params\":{\"proposalId\":\"the proposal to vote for.\",\"support\":\"against, for, or abstain.\"}},\"voteSignature(uint256,uint8,bytes,bytes)\":{\"details\":\"Submits a vote for a proposal by ERC712 signature.\",\"params\":{\"proposalId\":\"the proposal to vote for.\",\"signature\":\"712 signed vote.\",\"support\":\"against, for, or abstain.\"}}},\"title\":\"OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setUsul(address)\":{\"notice\":\"Can only be called by the current owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/votingStrategies/SimpleMemberVoting.sol\":\"SimpleMemberVoting\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IProposal.sol\\\";\\nimport \\\"./common/FactoryFriendly.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract BaseStrategy is OwnableUpgradeable, FactoryFriendly {\\n    /// @dev Emitted each time the avatar is set.\\n    event UsulSet(address indexed previousUsul, address indexed newUsul);\\n    event StrategySetup(address indexed UsulModule, address indexed owner);\\n\\n    address public UsulModule;\\n\\n    modifier onlyUsul() {\\n        require(msg.sender == UsulModule, \\\"only Usul module may enter\\\");\\n        _;\\n    }\\n\\n    /// @dev Sets the executor to a new account (`newExecutor`).\\n    /// @notice Can only be called by the current owner.\\n    function setUsul(address _Usul) public onlyOwner {\\n        address previousUsul = UsulModule;\\n        UsulModule = _Usul;\\n        emit UsulSet(previousUsul, _Usul);\\n    }\\n\\n    /// @dev Called by the proposal module, this notifes the strategy of a new proposal.\\n    /// @param data any extra data to pass to the voting strategy\\n    function receiveProposal(bytes memory data) external virtual;\\n\\n    /// @dev Calls the proposal module to notify that a quorum has been reached.\\n    /// @param proposalId the proposal to vote for.\\n    function finalizeStrategy(uint256 proposalId) external virtual;\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xb159d12bf7553bf009f1daa7a79ca8e1f50464bd8f8eb1d010490692456a57ae\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/FactoryFriendly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\",\"keccak256\":\"0x96e61585b7340a901a54eb4c157ce28b630bff3d9d4597dfaac692128ea458c4\",\"license\":\"LGPL-3.0-only\"},\"contracts/extensions/BaseMember.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../BaseStrategy.sol\\\";\\n\\n/// @title Base Membership - A Usul strategy extension that enables membership gates.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseMember is BaseStrategy {\\n    uint256 public memberCount;\\n\\n    mapping(address => bool) public members;\\n\\n    modifier onlyMember(address voter) {\\n        require(members[voter], \\\"voter is not a member\\\");\\n        _;\\n    }\\n\\n    event MemberAdded(address member);\\n    event MemberRemoved(address member);\\n\\n    function addMember(address member) public virtual onlyOwner {\\n        require(members[member] == false, \\\"member is already registered\\\");\\n        members[member] = true;\\n        memberCount++;\\n        emit MemberAdded(member);\\n    }\\n\\n    function removeMember(address member) public virtual onlyOwner {\\n        require(members[member] == true, \\\"member is not registered\\\");\\n        members[member] = false;\\n        memberCount--;\\n        emit MemberRemoved(member);\\n    }\\n}\\n\",\"keccak256\":\"0xbb1632c0c8898c0ce16c2c529b406f2852b3404539cc7a8c86a02dc6d3d4c95a\",\"license\":\"LGPL-3.0-only\"},\"contracts/extensions/BaseQuorumPercent.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\npragma solidity >=0.8.0;\\n\\n/// @title BaseQuorumPercent - A Usul strategy extension that enables percent based quorums.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseQuorumPercent is OwnableUpgradeable {\\n    uint256 private _quorumNumerator;\\n\\n    event QuorumNumeratorUpdated(\\n        uint256 oldQuorumNumerator,\\n        uint256 newQuorumNumerator\\n    );\\n\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumerator;\\n    }\\n\\n    function quorumDenominator() public pure virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    function updateQuorumNumerator(uint256 newQuorumNumerator)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator)\\n        internal\\n        virtual\\n    {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = _quorumNumerator;\\n        _quorumNumerator = newQuorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\",\"keccak256\":\"0xa8d57128ee0725c3f53828e6cea15f798372e8b5fc90edddada27890420faf39\",\"license\":\"LGPL-3.0-only\"},\"contracts/extensions/BaseTokenVoting.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../BaseStrategy.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compound like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseTokenVoting is BaseStrategy, EIP712Upgradeable {\\n    bytes32 public constant VOTE_TYPEHASH =\\n        keccak256(\\\"Vote(uint256 proposalId,uint8 vote)\\\");\\n\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVoting {\\n        uint256 yesVotes; // the total number of YES votes for this proposal\\n        uint256 noVotes; // the total number of NO votes for this proposal\\n        uint256 abstainVotes; // introduce abstain votes\\n        uint256 deadline; // voting deadline TODO: consider using block number\\n        uint256 startBlock; // the starting block of the proposal\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    uint256 public votingPeriod; // the length of time voting is valid for a proposal\\n    uint256 public timeLockPeriod;\\n    string public name;\\n\\n    mapping(uint256 => ProposalVoting) public proposals;\\n\\n    event TimeLockUpdated(uint256 previousTimeLock, uint256 newTimeLockPeriod);\\n    event VotingPeriodUpdated(\\n        uint256 previousVotingPeriod,\\n        uint256 newVotingPeriod\\n    );\\n    event ProposalReceived(uint256 proposalId, uint256 timestamp);\\n    event VoteFinalized(uint256 proposalId, uint256 timestamp);\\n    event Voted(\\n        address voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight\\n    );\\n\\n    ///@dev ERC712 version.\\n    function version() public view virtual returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /// @dev Updates the time that proposals are active for voting.\\n    /// @param newPeriod the voting window.\\n    function updateVotingPeriod(uint256 newPeriod) external onlyOwner {\\n        uint256 previousVotingPeriod = votingPeriod;\\n        votingPeriod = newPeriod;\\n        emit VotingPeriodUpdated(previousVotingPeriod, newPeriod);\\n    }\\n\\n    /// @dev Updates the grace period time after a proposal passed before it can execute.\\n    /// @param newTimeLockPeriod the new delay before execution.\\n    function updateTimeLockPeriod(uint256 newTimeLockPeriod)\\n        external\\n        onlyOwner\\n    {\\n        uint256 previousTimeLock = timeLockPeriod;\\n        timeLockPeriod = newTimeLockPeriod;\\n        emit TimeLockUpdated(previousTimeLock, newTimeLockPeriod);\\n    }\\n\\n    /// @dev Returns true if an account has voted on a specific proposal.\\n    /// @param proposalId the proposal to inspect.\\n    /// @param account the account to inspect.\\n    /// @return boolean.\\n    function hasVoted(uint256 proposalId, address account)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return proposals[proposalId].hasVoted[account];\\n    }\\n\\n    /// @dev Submits a vote for a proposal.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    function vote(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory\\n    ) external virtual {\\n        _vote(proposalId, msg.sender, support);\\n    }\\n\\n    /// @dev Submits a vote for a proposal by ERC712 signature.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    /// @param signature 712 signed vote.\\n    function voteSignature(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory signature,\\n        bytes memory\\n    ) external virtual {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(abi.encode(VOTE_TYPEHASH, proposalId, support))\\n            ),\\n            signature\\n        );\\n        _vote(proposalId, voter, support);\\n    }\\n\\n    function _vote(\\n        uint256 proposalId,\\n        address voter,\\n        uint8 support\\n    ) internal {\\n        require(\\n            block.timestamp <= proposals[proposalId].deadline,\\n            \\\"voting period has passed\\\"\\n        );\\n        require(!hasVoted(proposalId, voter), \\\"voter has already voted\\\");\\n        proposals[proposalId].hasVoted[voter] = true;\\n        uint256 weight = calculateWeight(voter, proposalId);\\n        if (support == uint8(VoteType.Against)) {\\n            proposals[proposalId].noVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposals[proposalId].yesVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposals[proposalId].abstainVotes += weight;\\n        } else {\\n            revert(\\\"invalid value for enum VoteType\\\");\\n        }\\n        emit Voted(voter, proposalId, support, weight);\\n    }\\n\\n    /// @dev Called by the proposal module, this notifes the strategy of a new proposal.\\n    /// @param data any extra data to pass to the voting strategy\\n    function receiveProposal(bytes memory data)\\n        external\\n        virtual\\n        override\\n        onlyUsul\\n    {\\n        uint256 proposalId = abi.decode(data, (uint256));\\n        proposals[proposalId].deadline = votingPeriod + block.timestamp;\\n        proposals[proposalId].startBlock = block.number;\\n        emit ProposalReceived(proposalId, block.timestamp);\\n    }\\n\\n    /// @dev Calls the proposal module to notify that a quorum has been reached.\\n    /// @param proposalId the proposal to vote for.\\n    function finalizeStrategy(uint256 proposalId) public virtual override {\\n        if (isPassed(proposalId)) {\\n            IProposal(UsulModule).receiveStrategy(proposalId, timeLockPeriod);\\n        }\\n        emit VoteFinalized(proposalId, block.timestamp);\\n    }\\n\\n    function calculateWeight(address voter, uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x1069c7a04da05f7ed68fde78d88e4a6789ba2ad026cf28ca0daea6ee6ec6e2d3\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity ^0.8.6;\\n\\ninterface IProposal {\\n    function receiveStrategy(uint256 proposalId, uint256 timeLockPeriod)\\n        external;\\n}\\n\",\"keccak256\":\"0x6fa8325ce583332dca1657f96cfa9ec80df6cf7325ef483a72de49093f8a28e9\",\"license\":\"LGPL-3.0-only\"},\"contracts/votingStrategies/SimpleMemberVoting.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseMember.sol\\\";\\nimport \\\"../extensions/BaseQuorumPercent.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract SimpleMemberVoting is BaseTokenVoting, BaseMember, BaseQuorumPercent {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 members;\\n    }\\n\\n    Checkpoint[] private _totalMemberCheckpoints;\\n\\n    constructor(\\n        address _owner,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumNumerator_,\\n        uint256 _timeLockPeriod,\\n        string memory name_,\\n        address[] memory _members\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumNumerator_,\\n            _timeLockPeriod,\\n            name_,\\n            _members\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumNumerator_,\\n            uint256 _timeLockPeriod,\\n            string memory name_,\\n            address[] memory _members\\n        ) = abi.decode(\\n                initParams,\\n                (address, address, uint256, uint256, uint256, string, address[])\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        __Ownable_init();\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            addMember(_members[i]);\\n        }\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumNumerator(quorumNumerator_);\\n        transferOwnership(_owner);\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(block.number),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum(uint256) public view override returns (uint256) {\\n        return (memberCount * quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    function calculateWeight(address voter, uint256)\\n        public\\n        view\\n        override\\n        onlyMember(voter)\\n        returns (uint256)\\n    {\\n        return 1;\\n    }\\n}\\n\",\"keccak256\":\"0x428c5a9848ede8e6a678cf678fdc23881932428c75a3833f94ee4c82a91ac4e0\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 3500,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3503,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3851,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage"
          },
          {
            "astId": 3380,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address"
          },
          {
            "astId": 3492,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage"
          },
          {
            "astId": 7346,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "UsulModule",
            "offset": 0,
            "slot": "101",
            "type": "t_address"
          },
          {
            "astId": 4471,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32"
          },
          {
            "astId": 4473,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "103",
            "type": "t_bytes32"
          },
          {
            "astId": 4611,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "__gap",
            "offset": 0,
            "slot": "104",
            "type": "t_array(t_uint256)50_storage"
          },
          {
            "astId": 9646,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "votingPeriod",
            "offset": 0,
            "slot": "154",
            "type": "t_uint256"
          },
          {
            "astId": 9648,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "timeLockPeriod",
            "offset": 0,
            "slot": "155",
            "type": "t_uint256"
          },
          {
            "astId": 9650,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "name",
            "offset": 0,
            "slot": "156",
            "type": "t_string_storage"
          },
          {
            "astId": 9655,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "proposals",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_uint256,t_struct(ProposalVoting)9644_storage)"
          },
          {
            "astId": 9162,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "memberCount",
            "offset": 0,
            "slot": "158",
            "type": "t_uint256"
          },
          {
            "astId": 9166,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "members",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9315,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_quorumNumerator",
            "offset": 0,
            "slot": "160",
            "type": "t_uint256"
          },
          {
            "astId": 14040,
            "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
            "label": "_totalMemberCheckpoints",
            "offset": 0,
            "slot": "161",
            "type": "t_array(t_struct(Checkpoint)14036_storage)dyn_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Checkpoint)14036_storage)dyn_storage": {
            "base": "t_struct(Checkpoint)14036_storage",
            "encoding": "dynamic_array",
            "label": "struct SimpleMemberVoting.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_uint256,t_struct(ProposalVoting)9644_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct BaseTokenVoting.ProposalVoting)",
            "numberOfBytes": "32",
            "value": "t_struct(ProposalVoting)9644_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Checkpoint)14036_storage": {
            "encoding": "inplace",
            "label": "struct SimpleMemberVoting.Checkpoint",
            "members": [
              {
                "astId": 14033,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "fromBlock",
                "offset": 0,
                "slot": "0",
                "type": "t_uint32"
              },
              {
                "astId": 14035,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "members",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProposalVoting)9644_storage": {
            "encoding": "inplace",
            "label": "struct BaseTokenVoting.ProposalVoting",
            "members": [
              {
                "astId": 9631,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "yesVotes",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 9633,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "noVotes",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 9635,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "abstainVotes",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 9637,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "deadline",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 9639,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "startBlock",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 9643,
                "contract": "contracts/votingStrategies/SimpleMemberVoting.sol:SimpleMemberVoting",
                "label": "hasVoted",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_bool)"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "setUsul(address)": {
            "notice": "Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/BaseStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IProposal.sol\\\";\\nimport \\\"./common/FactoryFriendly.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract BaseStrategy is OwnableUpgradeable, FactoryFriendly {\\n    /// @dev Emitted each time the avatar is set.\\n    event UsulSet(address indexed previousUsul, address indexed newUsul);\\n    event StrategySetup(address indexed UsulModule, address indexed owner);\\n\\n    address public UsulModule;\\n\\n    modifier onlyUsul() {\\n        require(msg.sender == UsulModule, \\\"only Usul module may enter\\\");\\n        _;\\n    }\\n\\n    /// @dev Sets the executor to a new account (`newExecutor`).\\n    /// @notice Can only be called by the current owner.\\n    function setUsul(address _Usul) public onlyOwner {\\n        address previousUsul = UsulModule;\\n        UsulModule = _Usul;\\n        emit UsulSet(previousUsul, _Usul);\\n    }\\n\\n    /// @dev Called by the proposal module, this notifes the strategy of a new proposal.\\n    /// @param data any extra data to pass to the voting strategy\\n    function receiveProposal(bytes memory data) external virtual;\\n\\n    /// @dev Calls the proposal module to notify that a quorum has been reached.\\n    /// @param proposalId the proposal to vote for.\\n    function finalizeStrategy(uint256 proposalId) external virtual;\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view virtual returns (bool);\\n}\\n\"\n    },\n    \"contracts/interfaces/IProposal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity ^0.8.6;\\n\\ninterface IProposal {\\n    function receiveStrategy(uint256 proposalId, uint256 timeLockPeriod)\\n        external;\\n}\\n\"\n    },\n    \"contracts/common/FactoryFriendly.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/extensions/BaseTokenVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../BaseStrategy.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compound like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseTokenVoting is BaseStrategy, EIP712Upgradeable {\\n    bytes32 public constant VOTE_TYPEHASH =\\n        keccak256(\\\"Vote(uint256 proposalId,uint8 vote)\\\");\\n\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVoting {\\n        uint256 yesVotes; // the total number of YES votes for this proposal\\n        uint256 noVotes; // the total number of NO votes for this proposal\\n        uint256 abstainVotes; // introduce abstain votes\\n        uint256 deadline; // voting deadline TODO: consider using block number\\n        uint256 startBlock; // the starting block of the proposal\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    uint256 public votingPeriod; // the length of time voting is valid for a proposal\\n    uint256 public timeLockPeriod;\\n    string public name;\\n\\n    mapping(uint256 => ProposalVoting) public proposals;\\n\\n    event TimeLockUpdated(uint256 previousTimeLock, uint256 newTimeLockPeriod);\\n    event VotingPeriodUpdated(\\n        uint256 previousVotingPeriod,\\n        uint256 newVotingPeriod\\n    );\\n    event ProposalReceived(uint256 proposalId, uint256 timestamp);\\n    event VoteFinalized(uint256 proposalId, uint256 timestamp);\\n    event Voted(\\n        address voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight\\n    );\\n\\n    ///@dev ERC712 version.\\n    function version() public view virtual returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /// @dev Updates the time that proposals are active for voting.\\n    /// @param newPeriod the voting window.\\n    function updateVotingPeriod(uint256 newPeriod) external onlyOwner {\\n        uint256 previousVotingPeriod = votingPeriod;\\n        votingPeriod = newPeriod;\\n        emit VotingPeriodUpdated(previousVotingPeriod, newPeriod);\\n    }\\n\\n    /// @dev Updates the grace period time after a proposal passed before it can execute.\\n    /// @param newTimeLockPeriod the new delay before execution.\\n    function updateTimeLockPeriod(uint256 newTimeLockPeriod)\\n        external\\n        onlyOwner\\n    {\\n        uint256 previousTimeLock = timeLockPeriod;\\n        timeLockPeriod = newTimeLockPeriod;\\n        emit TimeLockUpdated(previousTimeLock, newTimeLockPeriod);\\n    }\\n\\n    /// @dev Returns true if an account has voted on a specific proposal.\\n    /// @param proposalId the proposal to inspect.\\n    /// @param account the account to inspect.\\n    /// @return boolean.\\n    function hasVoted(uint256 proposalId, address account)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return proposals[proposalId].hasVoted[account];\\n    }\\n\\n    /// @dev Submits a vote for a proposal.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    function vote(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory\\n    ) external virtual {\\n        _vote(proposalId, msg.sender, support);\\n    }\\n\\n    /// @dev Submits a vote for a proposal by ERC712 signature.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    /// @param signature 712 signed vote.\\n    function voteSignature(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory signature,\\n        bytes memory\\n    ) external virtual {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(abi.encode(VOTE_TYPEHASH, proposalId, support))\\n            ),\\n            signature\\n        );\\n        _vote(proposalId, voter, support);\\n    }\\n\\n    function _vote(\\n        uint256 proposalId,\\n        address voter,\\n        uint8 support\\n    ) internal {\\n        require(\\n            block.timestamp <= proposals[proposalId].deadline,\\n            \\\"voting period has passed\\\"\\n        );\\n        require(!hasVoted(proposalId, voter), \\\"voter has already voted\\\");\\n        proposals[proposalId].hasVoted[voter] = true;\\n        uint256 weight = calculateWeight(voter, proposalId);\\n        if (support == uint8(VoteType.Against)) {\\n            proposals[proposalId].noVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposals[proposalId].yesVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposals[proposalId].abstainVotes += weight;\\n        } else {\\n            revert(\\\"invalid value for enum VoteType\\\");\\n        }\\n        emit Voted(voter, proposalId, support, weight);\\n    }\\n\\n    /// @dev Called by the proposal module, this notifes the strategy of a new proposal.\\n    /// @param data any extra data to pass to the voting strategy\\n    function receiveProposal(bytes memory data)\\n        external\\n        virtual\\n        override\\n        onlyUsul\\n    {\\n        uint256 proposalId = abi.decode(data, (uint256));\\n        proposals[proposalId].deadline = votingPeriod + block.timestamp;\\n        proposals[proposalId].startBlock = block.number;\\n        emit ProposalReceived(proposalId, block.timestamp);\\n    }\\n\\n    /// @dev Calls the proposal module to notify that a quorum has been reached.\\n    /// @param proposalId the proposal to vote for.\\n    function finalizeStrategy(uint256 proposalId) public virtual override {\\n        if (isPassed(proposalId)) {\\n            IProposal(UsulModule).receiveStrategy(proposalId, timeLockPeriod);\\n        }\\n        emit VoteFinalized(proposalId, block.timestamp);\\n    }\\n\\n    function calculateWeight(address voter, uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"contracts/votingStrategies/SimpleMemberVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseMember.sol\\\";\\nimport \\\"../extensions/BaseQuorumPercent.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract SimpleMemberVoting is BaseTokenVoting, BaseMember, BaseQuorumPercent {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 members;\\n    }\\n\\n    Checkpoint[] private _totalMemberCheckpoints;\\n\\n    constructor(\\n        address _owner,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumNumerator_,\\n        uint256 _timeLockPeriod,\\n        string memory name_,\\n        address[] memory _members\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumNumerator_,\\n            _timeLockPeriod,\\n            name_,\\n            _members\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumNumerator_,\\n            uint256 _timeLockPeriod,\\n            string memory name_,\\n            address[] memory _members\\n        ) = abi.decode(\\n                initParams,\\n                (address, address, uint256, uint256, uint256, string, address[])\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        __Ownable_init();\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            addMember(_members[i]);\\n        }\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumNumerator(quorumNumerator_);\\n        transferOwnership(_owner);\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(block.number),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum(uint256) public view override returns (uint256) {\\n        return (memberCount * quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    function calculateWeight(address voter, uint256)\\n        public\\n        view\\n        override\\n        onlyMember(voter)\\n        returns (uint256)\\n    {\\n        return 1;\\n    }\\n}\\n\"\n    },\n    \"contracts/extensions/BaseMember.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../BaseStrategy.sol\\\";\\n\\n/// @title Base Membership - A Usul strategy extension that enables membership gates.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseMember is BaseStrategy {\\n    uint256 public memberCount;\\n\\n    mapping(address => bool) public members;\\n\\n    modifier onlyMember(address voter) {\\n        require(members[voter], \\\"voter is not a member\\\");\\n        _;\\n    }\\n\\n    event MemberAdded(address member);\\n    event MemberRemoved(address member);\\n\\n    function addMember(address member) public virtual onlyOwner {\\n        require(members[member] == false, \\\"member is already registered\\\");\\n        members[member] = true;\\n        memberCount++;\\n        emit MemberAdded(member);\\n    }\\n\\n    function removeMember(address member) public virtual onlyOwner {\\n        require(members[member] == true, \\\"member is not registered\\\");\\n        members[member] = false;\\n        memberCount--;\\n        emit MemberRemoved(member);\\n    }\\n}\\n\"\n    },\n    \"contracts/extensions/BaseQuorumPercent.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\npragma solidity >=0.8.0;\\n\\n/// @title BaseQuorumPercent - A Usul strategy extension that enables percent based quorums.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseQuorumPercent is OwnableUpgradeable {\\n    uint256 private _quorumNumerator;\\n\\n    event QuorumNumeratorUpdated(\\n        uint256 oldQuorumNumerator,\\n        uint256 newQuorumNumerator\\n    );\\n\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumerator;\\n    }\\n\\n    function quorumDenominator() public pure virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    function updateQuorumNumerator(uint256 newQuorumNumerator)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator)\\n        internal\\n        virtual\\n    {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = _quorumNumerator;\\n        _quorumNumerator = newQuorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        return _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/votingStrategies/OZSingleVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseQuorumFixed.sol\\\";\\n\\n/// @title OpenZeppelin Single Voting Strategy - A Usul strategy that enables compound like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract OZSingleVoting is BaseTokenVoting, BaseQuorumFixed {\\n    ERC20Votes public governanceToken;\\n\\n    constructor(\\n        address _owner,\\n        ERC20Votes _governanceToken,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumThreshold_,\\n        uint256 _timeLockPeriod,\\n        string memory name_\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _governanceToken,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumThreshold_,\\n            _timeLockPeriod,\\n            name_\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            ERC20Votes _governanceToken,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumThreshold_,\\n            uint256 _timeLockPeriod,\\n            string memory name_\\n        ) = abi.decode(\\n                initParams,\\n                (\\n                    address,\\n                    ERC20Votes,\\n                    address,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    string\\n                )\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        require(_UsulModule != address(0), \\\"invalid Usul module\\\");\\n        require(quorumThreshold_ > 0, \\\"threshold must ne non-zero\\\");\\n        require(\\n            _governanceToken != ERC20Votes(address(0)),\\n            \\\"invalid governance token address\\\"\\n        );\\n        governanceToken = _governanceToken;\\n        __Ownable_init();\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumThreshold(quorumThreshold_);\\n        transferOwnership(_owner);\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum() public view override returns (uint256) {\\n        return quorumThreshold();\\n    }\\n\\n    function calculateWeight(address delegatee, uint256 proposalId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            governanceToken.getPastVotes(\\n                delegatee,\\n                proposals[proposalId].startBlock\\n            ) > 0,\\n            \\\"voter does not hold any ERC20 tokens\\\"\\n        );\\n        return 1;\\n    }\\n}\\n\"\n    },\n    \"contracts/extensions/BaseQuorumFixed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\npragma solidity >=0.8.0;\\n\\n/// @title BaseQuorumThreshold - A Usul strategy extension that enables threshold based quorums.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseQuorumFixed is OwnableUpgradeable {\\n    uint256 private _quorumThreshold;\\n\\n    event QuorumThresholdUpdated(\\n        uint256 oldQuorumThreshold,\\n        uint256 newQuorumThreshold\\n    );\\n\\n    function quorumThreshold() public view returns (uint256) {\\n        return _quorumThreshold;\\n    }\\n\\n    function quorum() public view virtual returns (uint256);\\n\\n    function updateQuorumThreshold(uint256 newQuorumThreshold)\\n        public\\n        onlyOwner\\n    {\\n        _updateQuorumThreshold(newQuorumThreshold);\\n    }\\n\\n    function _updateQuorumThreshold(uint256 newQuorumThreshold) internal {\\n        uint256 oldQuorumThreshold = _quorumThreshold;\\n        _quorumThreshold = newQuorumThreshold;\\n\\n        emit QuorumThresholdUpdated(oldQuorumThreshold, newQuorumThreshold);\\n    }\\n}\\n\"\n    },\n    \"contracts/votingStrategies/NFTLinearVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseQuorumFixed.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract NFTLinearVoting is BaseTokenVoting, BaseQuorumFixed {\\n    \\n    IERC721 public tokenAddress;\\n    mapping(uint256 => mapping(uint256 => bool)) idHasVoted; // map proposalId to nft ids to hasBeenUsed\\n\\n    constructor(\\n        address _owner,\\n        IERC721 _governanceToken,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumThreshold_,\\n        uint256 _timeLockPeriod,\\n        string memory name_\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _governanceToken,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumThreshold_,\\n            _timeLockPeriod,\\n            name_\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            IERC721 _governanceToken,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumThreshold_,\\n            uint256 _timeLockPeriod,\\n            string memory name_\\n        ) = abi.decode(\\n                initParams,\\n                (address, IERC721, address, uint256, uint256, uint256, string)\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        require(\\n            _governanceToken != IERC721(address(0)),\\n            \\\"invalid governance token address\\\"\\n        );\\n        tokenAddress = _governanceToken;\\n        __Ownable_init();\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumThreshold(quorumThreshold_);\\n        transferOwnership(_owner);\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum() public view override returns (uint256) {\\n        return quorumThreshold();\\n    }\\n\\n    function checkPreviousVote(uint256[] memory ids, uint256 proposalId)\\n        internal\\n    {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(\\n                idHasVoted[proposalId][ids[i]] == false,\\n                \\\"no weight, contains an id that has already voted\\\"\\n            );\\n            require(\\n                tokenAddress.ownerOf(ids[i]) == msg.sender,\\n                \\\"voter does not own an id\\\"\\n            );\\n            idHasVoted[proposalId][ids[i]] = true;\\n        }\\n    }\\n\\n    /// @dev Submits a vote for a proposal.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    function vote(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory extraData\\n    ) external override {\\n        uint256[] memory ids = abi.decode(extraData, (uint256[]));\\n        checkPreviousVote(ids, proposalId);\\n        _vote(proposalId, msg.sender, support);\\n    }\\n\\n    /// @dev Submits a vote for a proposal by ERC712 signature.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    /// @param signature 712 signed vote\\n    function voteSignature(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory signature,\\n        bytes memory extraData\\n    ) external override {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(abi.encode(VOTE_TYPEHASH, proposalId, support))\\n            ),\\n            signature\\n        );\\n        uint256[] memory ids = abi.decode(extraData, (uint256[]));\\n        checkPreviousVote(ids, proposalId);\\n        _vote(proposalId, voter, support);\\n    }\\n\\n    function calculateWeight(address voter, uint256)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return tokenAddress.balanceOf(voter);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/votingStrategies/MemberNFTSingleVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseQuorumFixed.sol\\\";\\nimport \\\"../extensions/BaseMember.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract NFTLinearVoting is BaseTokenVoting, BaseMember, BaseQuorumFixed {\\n    \\n    IERC721 public tokenAddress;\\n    mapping(uint256 => mapping(uint256 => bool)) idHasVoted; // map proposalId to nft ids to hasBeenUsed\\n\\n    constructor(\\n        address _owner,\\n        IERC721 _governanceToken,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumThreshold_,\\n        uint256 _timeLockPeriod,\\n        string memory name_\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _governanceToken,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumThreshold_,\\n            _timeLockPeriod,\\n            name_\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            IERC721 _governanceToken,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumThreshold_,\\n            uint256 _timeLockPeriod,\\n            string memory name_\\n        ) = abi.decode(\\n                initParams,\\n                (address, IERC721, address, uint256, uint256, uint256, string)\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        require(\\n            _governanceToken != IERC721(address(0)),\\n            \\\"invalid governance token address\\\"\\n        );\\n        tokenAddress = _governanceToken;\\n        __Ownable_init();\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumThreshold(quorumThreshold_);\\n        transferOwnership(_owner);\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum() public view override returns (uint256) {\\n        return quorumThreshold();\\n    }\\n\\n    function checkPreviousVote(uint256[] memory ids, uint256 proposalId)\\n        internal\\n    {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(\\n                idHasVoted[proposalId][ids[i]] == false,\\n                \\\"no weight, contains an id that has already voted\\\"\\n            );\\n            require(\\n                tokenAddress.ownerOf(ids[i]) == msg.sender,\\n                \\\"voter does not own an id\\\"\\n            );\\n            idHasVoted[proposalId][ids[i]] = true;\\n        }\\n    }\\n\\n    /// @dev Submits a vote for a proposal.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    function vote(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory extraData\\n    ) onlyMember(msg.sender) override external {\\n        uint256[] memory ids = abi.decode(extraData, (uint256[]));\\n        checkPreviousVote(ids, proposalId);\\n        _vote(proposalId, msg.sender, support);\\n    }\\n\\n    /// @dev Submits a vote for a proposal by ERC712 signature.\\n    /// @param proposalId the proposal to vote for.\\n    /// @param support against, for, or abstain.\\n    /// @param signature 712 signed vote\\n    function voteSignature(\\n        uint256 proposalId,\\n        uint8 support,\\n        bytes memory signature,\\n        bytes memory extraData\\n    ) override external {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(abi.encode(VOTE_TYPEHASH, proposalId, support))\\n            ),\\n            signature\\n        );\\n        require(members[voter], \\\"voter is not a member\\\");\\n        uint256[] memory ids = abi.decode(extraData, (uint256[]));\\n        checkPreviousVote(ids, proposalId);\\n        _vote(proposalId, voter, support);\\n    }\\n\\n    function calculateWeight(address voter, uint256)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return tokenAddress.balanceOf(voter);\\n    }\\n}\\n\"\n    },\n    \"contracts/votingStrategies/MemberLinearVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseMember.sol\\\";\\nimport \\\"../extensions/BaseQuorumPercent.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compount like voting.\\n/// @author Nathan Ginnever - <team@sekerdao.com>\\ncontract MemberLinearVoting is BaseTokenVoting, BaseMember, BaseQuorumPercent {\\n    ERC20Votes public governanceToken;\\n\\n    constructor(\\n        address _owner,\\n        ERC20Votes _governanceToken,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumNumerator_,\\n        uint256 _timeLockPeriod,\\n        string memory name_,\\n        address[] memory _members\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _governanceToken,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumNumerator_,\\n            _timeLockPeriod,\\n            name_,\\n            _members\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            ERC20Votes _governanceToken,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumNumerator_,\\n            uint256 _timeLockPeriod,\\n            string memory name_,\\n            address[] memory _members\\n        ) = abi.decode(\\n                initParams,\\n                (\\n                    address,\\n                    ERC20Votes,\\n                    address,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    string,\\n                    address[]\\n                )\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        require(\\n            _governanceToken != ERC20Votes(address(0)),\\n            \\\"invalid governance token address\\\"\\n        );\\n        __Ownable_init();\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            addMember(_members[i]);\\n        }\\n        governanceToken = _governanceToken;\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumNumerator(quorumNumerator_);\\n        transferOwnership(_owner);\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(proposals[proposalId].startBlock),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            (governanceToken.getPastTotalSupply(blockNumber) *\\n                quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    function calculateWeight(address voter, uint256 proposalId)\\n        public\\n        view\\n        override\\n        onlyMember(voter)\\n        returns (uint256)\\n    {\\n        return\\n            governanceToken.getPastVotes(\\n                voter,\\n                proposals[proposalId].startBlock\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/votingStrategies/OZLinearVoting.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"../extensions/BaseTokenVoting.sol\\\";\\nimport \\\"../extensions/BaseQuorumPercent.sol\\\";\\n\\n/// @title OpenZeppelin Linear Voting Strategy - A Usul strategy that enables compound like voting.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract OZLinearVoting is BaseTokenVoting, BaseQuorumPercent {\\n    ERC20Votes public governanceToken;\\n\\n    constructor(\\n        address _owner,\\n        ERC20Votes _governanceToken,\\n        address _UsulModule,\\n        uint256 _votingPeriod,\\n        uint256 quorumNumerator_,\\n        uint256 _timeLockPeriod,\\n        string memory name_\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _governanceToken,\\n            _UsulModule,\\n            _votingPeriod,\\n            quorumNumerator_,\\n            _timeLockPeriod,\\n            name_\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            ERC20Votes _governanceToken,\\n            address _UsulModule,\\n            uint256 _votingPeriod,\\n            uint256 quorumNumerator_,\\n            uint256 _timeLockPeriod,\\n            string memory name_\\n        ) = abi.decode(\\n                initParams,\\n                (\\n                    address,\\n                    ERC20Votes,\\n                    address,\\n                    uint256,\\n                    uint256,\\n                    uint256,\\n                    string\\n                )\\n            );\\n        require(_votingPeriod > 1, \\\"votingPeriod must be greater than 1\\\");\\n        require(\\n            _governanceToken != ERC20Votes(address(0)),\\n            \\\"invalid governance token address\\\"\\n        );\\n        governanceToken = _governanceToken;\\n        __Ownable_init();\\n        __EIP712_init_unchained(name_, version());\\n        updateQuorumNumerator(quorumNumerator_);\\n        transferOwnership(_owner);\\n        // call setUsul\\n        votingPeriod = _votingPeriod * 1 seconds; // switch to hours in prod\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockPeriod * 1 seconds;\\n        name = name_;\\n        emit StrategySetup(_UsulModule, _owner);\\n    }\\n\\n    /// @dev Determines if a proposal has succeeded.\\n    /// @param proposalId the proposal to vote for.\\n    /// @return boolean.\\n    function isPassed(uint256 proposalId) public view override returns (bool) {\\n        require(\\n            proposals[proposalId].yesVotes > proposals[proposalId].noVotes,\\n            \\\"majority yesVotes not reached\\\"\\n        );\\n        require(\\n            proposals[proposalId].yesVotes +\\n                proposals[proposalId].abstainVotes >=\\n                quorum(proposals[proposalId].startBlock),\\n            \\\"a quorum has not been reached for the proposal\\\"\\n        );\\n        require(\\n            proposals[proposalId].deadline < block.timestamp,\\n            \\\"voting period has not passed yet\\\"\\n        );\\n        return true;\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            (governanceToken.getPastTotalSupply(blockNumber) *\\n                quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    function calculateWeight(address delegatee, uint256 proposalId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            governanceToken.getPastVotes(\\n                delegatee,\\n                proposals[proposalId].startBlock\\n            );\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/guard/Guardable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"./BaseGuard.sol\\\";\\n\\n/// @title Guardable - A contract that manages fallback calls made to this contract\\ncontract Guardable is OwnableUpgradeable {\\n    event ChangedGuard(address guard);\\n\\n    address public guard;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param _guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address _guard) external onlyOwner {\\n        if (_guard != address(0)) {\\n            require(\\n                BaseGuard(_guard).supportsInterface(type(IGuard).interfaceId),\\n                \\\"Guard does not implement IERC165\\\"\\n            );\\n        }\\n        guard = _guard;\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() external view returns (address _guard) {\\n        return guard;\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"../interfaces/IGuard.sol\\\";\\n\\nabstract contract BaseGuard is IERC165 {\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IGuard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n\\n    /// Module transactions only use the first four parameters: to, value, data, and operation.\\n    /// Module.sol hardcodes the remaining parameters as 0 since they are not used for module transactions.\\n    /// This interface is used to maintain compatibilty with Gnosis Safe transaction guards.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external virtual;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external virtual;\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IGuard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IAvatar {\\n    /// @dev Enables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Modules should be stored as a linked list.\\n    /// @notice Must emit EnabledModule(address module) if successful.\\n    /// @param module Module to be enabled.\\n    function enableModule(address module) external;\\n\\n    /// @dev Disables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Must emit DisabledModule(address module) if successful.\\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a transaction.\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a transaction and return data\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/core/Module.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/IAvatar.sol\\\";\\nimport \\\"../factory/FactoryFriendly.sol\\\";\\nimport \\\"../guard/Guardable.sol\\\";\\n\\nabstract contract Module is FactoryFriendly, Guardable {\\n    /// @dev Emitted each time the avatar is set.\\n    event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\\n    /// @dev Emitted each time the Target is set.\\n    event TargetSet(address indexed previousTarget, address indexed newTarget);\\n\\n    /// @dev Address that will ultimately execute function calls.\\n    address public avatar;\\n    /// @dev Address that this module will pass transactions to.\\n    address public target;\\n\\n    /// @dev Sets the avatar to a new avatar (`newAvatar`).\\n    /// @notice Can only be called by the current owner.\\n    function setAvatar(address _avatar) public onlyOwner {\\n        address previousAvatar = avatar;\\n        avatar = _avatar;\\n        emit AvatarSet(previousAvatar, _avatar);\\n    }\\n\\n    /// @dev Sets the target to a new target (`newTarget`).\\n    /// @notice Can only be called by the current owner.\\n    function setTarget(address _target) public onlyOwner {\\n        address previousTarget = target;\\n        target = _target;\\n        emit TargetSet(previousTarget, _target);\\n    }\\n\\n    /// @dev Passes a transaction to be executed by the avatar.\\n    /// @notice Can only be called by this contract.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (bool success) {\\n        /// check if a transactioon guard is enabled.\\n        if (guard != address(0)) {\\n            IGuard(guard).checkTransaction(\\n                /// Transaction info used by module transactions\\n                to,\\n                value,\\n                data,\\n                operation,\\n                /// Zero out the redundant transaction information only used for Safe multisig transctions\\n                0,\\n                0,\\n                0,\\n                address(0),\\n                payable(0),\\n                bytes(\\\"0x\\\"),\\n                address(0)\\n            );\\n        }\\n        success = IAvatar(target).execTransactionFromModule(\\n            to,\\n            value,\\n            data,\\n            operation\\n        );\\n        if (guard != address(0)) {\\n            IGuard(guard).checkAfterExecution(bytes32(\\\"0x\\\"), success);\\n        }\\n        return success;\\n    }\\n\\n    /// @dev Passes a transaction to be executed by the target and returns data.\\n    /// @notice Can only be called by this contract.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execAndReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (bool success, bytes memory returnData) {\\n        /// check if a transactioon guard is enabled.\\n        if (guard != address(0)) {\\n            IGuard(guard).checkTransaction(\\n                /// Transaction info used by module transactions\\n                to,\\n                value,\\n                data,\\n                operation,\\n                /// Zero out the redundant transaction information only used for Safe multisig transctions\\n                0,\\n                0,\\n                0,\\n                address(0),\\n                payable(0),\\n                bytes(\\\"0x\\\"),\\n                address(0)\\n            );\\n        }\\n        (success, returnData) = IAvatar(target)\\n            .execTransactionFromModuleReturnData(to, value, data, operation);\\n        if (guard != address(0)) {\\n            IGuard(guard).checkAfterExecution(bytes32(\\\"0x\\\"), success);\\n        }\\n        return (success, returnData);\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\"\n    },\n    \"contracts/Usul.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@gnosis.pm/zodiac/contracts/core/Module.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n/// @title Usul Module - A Zodiac module that enables a voting agnostic proposal mechanism.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\ncontract Usul is Module {\\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n\\n    bytes32 public constant TRANSACTION_TYPEHASH =\\n        0x72e9670a7ee00f5fbf1049b8c38e3f22fab7e9b85029e85cf9412f17fdd5c2ad;\\n    // keccak256(\\n    //     \\\"Transaction(address to,uint256 value,bytes data,uint8 operation,uint256 nonce)\\\"\\n    // );\\n\\n    enum ProposalState {\\n        Active,\\n        Canceled,\\n        TimeLocked,\\n        Executed,\\n        Executing,\\n        Uninitialized\\n    }\\n\\n    struct Proposal {\\n        bool canceled;\\n        uint256 timeLockPeriod; // queue period for safety\\n        bytes32[] txHashes;\\n        uint256 executionCounter;\\n        address strategy; // the module that is allowed to vote on this\\n    }\\n\\n    uint256 public totalProposalCount; // total number of submitted proposals\\n    address internal constant SENTINEL_STRATEGY = address(0x1);\\n\\n    // mapping of proposal id to proposal\\n    mapping(uint256 => Proposal) public proposals;\\n    // Mapping of modules\\n    mapping(address => address) internal strategies;\\n\\n    event ProposalCreated(\\n        address strategy,\\n        uint256 proposalNumber,\\n        address proposer\\n    );\\n    event ProposalCanceled(uint256 proposalId);\\n    event TransactionExecuted(uint256 proposalId, bytes32 txHash);\\n    event TransactionExecutedBatch(uint256 startIndex, uint256 endIndex);\\n    event StrategyFinalized(uint256 proposalId, uint256 endDate);\\n    event ProposalExecuted(uint256 id);\\n    event UsulSetup(\\n        address indexed initiator,\\n        address indexed owner,\\n        address indexed avatar,\\n        address target\\n    );\\n    event EnabledStrategy(address strategy);\\n    event DisabledStrategy(address strategy);\\n\\n    constructor(\\n        address _owner,\\n        address _avatar,\\n        address _target,\\n        address[] memory _strategies\\n    ) {\\n        bytes memory initParams = abi.encode(\\n            _owner,\\n            _avatar,\\n            _target,\\n            _strategies\\n        );\\n        setUp(initParams);\\n    }\\n\\n    function setUp(bytes memory initParams) public override initializer {\\n        (\\n            address _owner,\\n            address _avatar,\\n            address _target,\\n            address[] memory _strategies\\n        ) = abi.decode(initParams, (address, address, address, address[]));\\n        __Ownable_init();\\n        avatar = _avatar;\\n        target = _target;\\n        setupStrategies(_strategies);\\n        transferOwnership(_owner);\\n        emit UsulSetup(msg.sender, _owner, _avatar, _target);\\n    }\\n\\n    function setupStrategies(address[] memory _strategies) internal {\\n        require(\\n            strategies[SENTINEL_STRATEGY] == address(0),\\n            \\\"setUpModules has already been called\\\"\\n        );\\n        strategies[SENTINEL_STRATEGY] = SENTINEL_STRATEGY;\\n        for (uint256 i = 0; i < _strategies.length; i++) {\\n            enableStrategy(_strategies[i]);\\n        }\\n    }\\n\\n    /// @dev Disables a voting strategy on the module\\n    /// @param prevStrategy Strategy that pointed to the strategy to be removed in the linked list\\n    /// @param strategy Strategy to be removed\\n    /// @notice This can only be called by the owner\\n    function disableStrategy(address prevStrategy, address strategy)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            strategy != address(0) && strategy != SENTINEL_STRATEGY,\\n            \\\"Invalid strategy\\\"\\n        );\\n        require(\\n            strategies[prevStrategy] == strategy,\\n            \\\"Strategy already disabled\\\"\\n        );\\n        strategies[prevStrategy] = strategies[strategy];\\n        strategies[strategy] = address(0);\\n        emit DisabledStrategy(strategy);\\n    }\\n\\n    /// @dev Enables a voting strategy that can vote on proposals\\n    /// @param strategy Address of the strategy to be enabled\\n    /// @notice This can only be called by the owner\\n    function enableStrategy(address strategy) public onlyOwner {\\n        require(\\n            strategy != address(0) && strategy != SENTINEL_STRATEGY,\\n            \\\"Invalid strategy\\\"\\n        );\\n        require(strategies[strategy] == address(0), \\\"Strategy already enabled\\\");\\n        strategies[strategy] = strategies[SENTINEL_STRATEGY];\\n        strategies[SENTINEL_STRATEGY] = strategy;\\n        emit EnabledStrategy(strategy);\\n    }\\n\\n    /// @dev Returns if a strategy is enabled\\n    /// @return True if the strategy is enabled\\n    function isStrategyEnabled(address _strategy) public view returns (bool) {\\n        return\\n            SENTINEL_STRATEGY != _strategy &&\\n            strategies[_strategy] != address(0);\\n    }\\n\\n    /// @dev Returns array of strategy.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of strategy that should be returned.\\n    /// @return array Array of strategy.\\n    /// @return next Start of the next page.\\n    function getStrategiesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next)\\n    {\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 strategyCount = 0;\\n        address currentStrategy = strategies[start];\\n        while (\\n            currentStrategy != address(0x0) &&\\n            currentStrategy != SENTINEL_STRATEGY &&\\n            strategyCount < pageSize\\n        ) {\\n            array[strategyCount] = currentStrategy;\\n            currentStrategy = strategies[currentStrategy];\\n            strategyCount++;\\n        }\\n        next = currentStrategy;\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, strategyCount)\\n        }\\n    }\\n\\n    /// @dev Returns true if a proposal transaction by index is exectuted.\\n    /// @param proposalId the proposal to inspect.\\n    /// @param index the transaction to inspect.\\n    /// @return boolean.\\n    function isTxExecuted(uint256 proposalId, uint256 index)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            proposals[proposalId].txHashes.length > 0,\\n            \\\"no executions in this proposal\\\"\\n        );\\n        return proposals[proposalId].executionCounter > index;\\n    }\\n\\n    /// @dev Returns the hash of a transaction in a proposal.\\n    /// @param proposalId the proposal to inspect.\\n    /// @param index the transaction to inspect.\\n    /// @return transaction hash.\\n    function getTxHash(uint256 proposalId, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return proposals[proposalId].txHashes[index];\\n    }\\n\\n    /// @dev Submits a new proposal.\\n    /// @param txHashes an array of hashed transaction data to execute\\n    /// @param strategy the voting strategy to be used with this proposal\\n    /// @param data any extra data to pass to the strategy\\n    function submitProposal(\\n        bytes32[] memory txHashes,\\n        address strategy,\\n        bytes memory data\\n    ) external {\\n        require(\\n            isStrategyEnabled(strategy),\\n            \\\"voting strategy is not enabled for proposal\\\"\\n        );\\n        require(txHashes.length > 0, \\\"proposal must contain transactions\\\");\\n        proposals[totalProposalCount].txHashes = txHashes;\\n        proposals[totalProposalCount].strategy = strategy;\\n        totalProposalCount++;\\n        IStrategy(strategy).receiveProposal(\\n            abi.encode(totalProposalCount - 1, txHashes, data)\\n        );\\n        emit ProposalCreated(strategy, totalProposalCount - 1, msg.sender);\\n    }\\n\\n    /// @dev Cancels a proposal.\\n    /// @param proposalIds array of proposals to cancel.\\n    function cancelProposals(uint256[] memory proposalIds) external onlyOwner {\\n        for (uint256 i = 0; i < proposalIds.length; i++) {\\n            Proposal storage _proposal = proposals[proposalIds[i]];\\n            require(\\n                _proposal.executionCounter < _proposal.txHashes.length,\\n                \\\"nothing to cancel\\\"\\n            );\\n            require(\\n                _proposal.canceled == false,\\n                \\\"proposal is already canceled\\\"\\n            );\\n            _proposal.canceled = true;\\n            emit ProposalCanceled(proposalIds[i]);\\n        }\\n    }\\n\\n    /// @dev Signals a successful proposal, timelock is optional\\n    /// @param proposalId the identifier of the proposal\\n    /// @param timeLockPeriod the optional delay time\\n    function receiveStrategy(uint256 proposalId, uint256 timeLockPeriod)\\n        external\\n    {\\n        require(\\n            strategies[msg.sender] != address(0),\\n            \\\"Strategy not authorized\\\"\\n        );\\n        require(\\n            state(proposalId) == ProposalState.Active,\\n            \\\"cannot receive strategy, proposal is not active\\\"\\n        );\\n        require(\\n            msg.sender == proposals[proposalId].strategy,\\n            \\\"cannot receive strategy, incorrect strategy for proposal\\\"\\n        );\\n        proposals[proposalId].timeLockPeriod = block.timestamp + timeLockPeriod;\\n        emit StrategyFinalized(\\n            proposalId,\\n            proposals[proposalId].timeLockPeriod\\n        );\\n    }\\n\\n    /// @dev Executes a transaction inside of a proposal.\\n    /// @notice Transactions must be called in ascending index order\\n    /// @param proposalId the identifier of the proposal\\n    /// @param target the contract to be called by the avatar\\n    /// @param value ether value to pass with the call\\n    /// @param data the data to be executed from the call\\n    /// @param operation Call or Delegatecall\\n    function executeProposalByIndex(\\n        uint256 proposalId,\\n        address target,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public {\\n        // force calls from strat so we can scope\\n        require(\\n            state(proposalId) == ProposalState.Executing,\\n            \\\"proposal is not in execution state\\\"\\n        );\\n        bytes32 txHash = getTransactionHash(target, value, data, operation);\\n        require(\\n            proposals[proposalId].txHashes[\\n                proposals[proposalId].executionCounter\\n            ] == txHash,\\n            \\\"transaction hash does not match indexed hash\\\"\\n        );\\n        proposals[proposalId].executionCounter++;\\n        require(\\n            exec(target, value, data, operation),\\n            \\\"Module transaction failed\\\"\\n        );\\n        emit TransactionExecuted(proposalId, txHash);\\n    }\\n\\n    /// @dev Executes batches of transactions inside of a proposal.\\n    /// @notice Transactions must be called in ascending index order\\n    /// @param proposalId the identifier of the proposal\\n    /// @param targets the contracts to be called by the avatar\\n    /// @param values ether values to pass with the calls\\n    /// @param data the data to be executed from the calls\\n    /// @param operations Calls or Delegatecalls\\n    function executeProposalBatch(\\n        uint256 proposalId,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory data,\\n        Enum.Operation[] memory operations\\n    ) external {\\n        require(\\n            targets.length != 0,\\n            \\\"no transactions to execute supplied to batch\\\"\\n        );\\n        require(\\n            targets.length == values.length &&\\n                targets.length == data.length &&\\n                targets.length == operations.length,\\n            \\\"execution parameters missmatch\\\"\\n        );\\n        require(\\n            proposals[proposalId].executionCounter + targets.length <=\\n                proposals[proposalId].txHashes.length,\\n            \\\"attempting to execute too many transactions\\\"\\n        );\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            executeProposalByIndex(\\n                proposalId,\\n                targets[i],\\n                values[i],\\n                data[i],\\n                operations[i]\\n            );\\n        }\\n        emit TransactionExecutedBatch(\\n            proposals[proposalId].executionCounter,\\n            proposals[proposalId].executionCounter + targets.length\\n        );\\n    }\\n\\n    /// @dev Get the state of a proposal\\n    /// @param proposalId the identifier of the proposal\\n    /// @return ProposalState the enum of the state of the proposal\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\n        Proposal storage _proposal = proposals[proposalId];\\n        if (_proposal.strategy == address(0)) {\\n            return ProposalState.Uninitialized;\\n        } else if (_proposal.executionCounter == _proposal.txHashes.length) {\\n            return ProposalState.Executed;\\n        } else if (_proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (_proposal.timeLockPeriod == 0) {\\n            return ProposalState.Active;\\n        } else if (block.timestamp < _proposal.timeLockPeriod) {\\n            return ProposalState.TimeLocked;\\n        } else if (block.timestamp >= _proposal.timeLockPeriod) {\\n            return ProposalState.Executing;\\n        } else {\\n            revert(\\\"unknown proposal id state\\\");\\n        }\\n    }\\n\\n    /// @dev Generates the data for the module transaction hash (required for signing)\\n    function generateTransactionHashData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 nonce\\n    ) public view returns (bytes memory) {\\n        uint256 chainId = block.chainid;\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this)\\n        );\\n        bytes32 transactionHash = keccak256(\\n            abi.encode(\\n                TRANSACTION_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                nonce\\n            )\\n        );\\n        return\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0x01),\\n                domainSeparator,\\n                transactionHash\\n            );\\n    }\\n\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                generateTransactionHashData(to, value, data, operation, 0)\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity ^0.8.6;\\n\\ninterface IStrategy {\\n    function receiveProposal(bytes memory data) external;\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\ninterface Guard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address guard);\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external authorized {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    function internalSetFallbackHandler(address handler) internal {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a Safe transaction.\\n    /// @param handler contract to handle fallbacks calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/EtherPaymentFallback.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport \\\"./common/StorageAccessible.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/GnosisSafeMath.sol\\\";\\n\\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract GnosisSafe is\\n    EtherPaymentFallback,\\n    Singleton,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using GnosisSafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\\n    constructor() {\\n        // By setting the threshold it is not possible to call setup anymore,\\n        // so we create a Safe with 0 owners and threshold 1.\\n        // This is an unusable Safe, perfect for the singleton\\n        threshold = 1;\\n    }\\n\\n    /// @dev Setup function sets initial storage of contract.\\n    /// @param _owners List of Safe owners.\\n    /// @param _threshold Number of required confirmations for a Safe transaction.\\n    /// @param to Contract address for optional delegate call.\\n    /// @param data Data payload for optional delegate call.\\n    /// @param fallbackHandler Handler for fallback calls to this contract\\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\\n    /// @param payment Value that should be paid\\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\\n    ///      Note: The fees are always transferred, even if the user transaction fails.\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Gas price that should be used for the payment calculation.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData =\\n                encodeTransactionData(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    nonce\\n                );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(\\n        bytes32 dataHash,\\n        bytes memory data,\\n        bytes memory signatures\\n    ) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(\\n        bytes32 dataHash,\\n        bytes memory data,\\n        bytes memory signatures,\\n        uint256 requiredSignatures\\n    ) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /// @dev Allows to estimate a Safe transaction.\\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\\n    function requiredTxGas(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (uint256) {\\n        uint256 startGas = gasleft();\\n        // We don't provide an error message here, as we use it to return the estimate\\n        require(execute(to, value, data, operation, gasleft()));\\n        uint256 requiredGas = startGas - gasleft();\\n        // Convert response to string and return via error message\\n        revert(string(abi.encodePacked(requiredGas)));\\n    }\\n\\n    /**\\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /// @dev Returns the bytes that are hashed to be signed by owners.\\n    /// @param to Destination address.\\n    /// @param value Ether value.\\n    /// @param data Data payload.\\n    /// @param operation Operation type.\\n    /// @param safeTxGas Gas that should be used for the safe transaction.\\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param _nonce Transaction nonce.\\n    /// @return Transaction hash bytes.\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash =\\n            keccak256(\\n                abi.encode(\\n                    SAFE_TX_TYPEHASH,\\n                    to,\\n                    value,\\n                    keccak256(data),\\n                    operation,\\n                    safeTxGas,\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    _nonce\\n                )\\n            );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /// @dev Returns hash to be signed by owners.\\n    /// @param to Destination address.\\n    /// @param value Ether value.\\n    /// @param data Data payload.\\n    /// @param operation Operation type.\\n    /// @param safeTxGas Fas that should be used for the safe transaction.\\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param _nonce Transaction nonce.\\n    /// @return Transaction hash.\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0))\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \\\"GS000\\\");\\n    }\\n\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        address currentModule = modules[start];\\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = currentModule;\\n            currentModule = modules[currentModule];\\n            moduleCount++;\\n        }\\n        next = currentModule;\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address owner);\\n    event RemovedOwner(address owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /// @dev Setup function sets initial storage of contract.\\n    /// @param _owners List of Safe owners.\\n    /// @param _threshold Number of required confirmations for a Safe transaction.\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n    /// @param owner New owner address.\\n    /// @param _threshold New threshold.\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n    /// @param owner Owner address to be removed.\\n    /// @param _threshold New threshold.\\n    function removeOwner(\\n        address prevOwner,\\n        address owner,\\n        uint256 _threshold\\n    ) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n    /// @param oldOwner Owner address to be replaced.\\n    /// @param newOwner New owner address.\\n    function swapOwner(\\n        address prevOwner,\\n        address oldOwner,\\n        address newOwner\\n    ) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /// @dev Allows to update the number of required confirmations by Safe owners.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Changes the threshold of the Safe to `_threshold`.\\n    /// @param _threshold New threshold.\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract EtherPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /// @dev Fallback function accepts Ether transactions.\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/Singleton.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract Singleton {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SignatureDecoder {\\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\\n    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\\n    /// @param signatures concatenated rsv signatures\\n    function signatureSplit(bytes memory signatures, uint256 pos)\\n        internal\\n        pure\\n        returns (\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        )\\n    {\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            // Here we are loading the last 32 bytes, including 31 bytes\\n            // of 's'. There is no 'mload8' to do this.\\n            //\\n            // 'byte' is not working due to the Solidity parser, so lets\\n            // use the second best option, 'and'\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SecuredTokenTransfer - Secure token transfer\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SecuredTokenTransfer {\\n    /// @dev Transfers a token and returns if it was a success\\n    /// @param token Token that should be transferred\\n    /// @param receiver Receiver to whom the token should be transferred\\n    /// @param amount The amount of tokens that should be transferred\\n    function transferToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n                case 0 {\\n                    transferred := success\\n                }\\n                case 0x20 {\\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\\n                }\\n                default {\\n                    transferred := 0\\n                }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\ncontract StorageAccessible {\\n    /**\\n     * @dev Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title GnosisSafeMath\\n * @dev Math operations with safety checks that revert on error\\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\\n * TODO: remove once open zeppelin update to solc 0.5.0\\n */\\nlibrary GnosisSafeMath {\\n    /**\\n     * @dev Multiplies two numbers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/base/Executor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/// @title Executor - A contract that can execute transactions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Executor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/GnosisSafeL2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./GnosisSafe.sol\\\";\\n\\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract GnosisSafeL2 is GnosisSafe {\\n    event SafeMultiSigTransaction(\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes signatures,\\n        // We combine nonce, sender and threshold into one to avoid stack too deep\\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\\n        bytes additionalInfo\\n    );\\n\\n    event SafeModuleTransaction(address module, address to, uint256 value, bytes data, Enum.Operation operation);\\n\\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\\n    ///      Note: The fees are always transferred, even if the user transaction fails.\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Gas price that should be used for the payment calculation.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable override returns (bool) {\\n        bytes memory additionalInfo;\\n        {\\n            additionalInfo = abi.encode(nonce, msg.sender, threshold);\\n        }\\n        emit SafeMultiSigTransaction(\\n            to,\\n            value,\\n            data,\\n            operation,\\n            safeTxGas,\\n            baseGas,\\n            gasPrice,\\n            gasToken,\\n            refundReceiver,\\n            signatures,\\n            additionalInfo\\n        );\\n        return super.execTransaction(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public override returns (bool success) {\\n        emit SafeModuleTransaction(msg.sender, to, value, data, operation);\\n        success = super.execTransactionFromModule(to, value, data, operation);\\n    }\\n}\\n\"\n    },\n    \"contracts/test/TestFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/GnosisSafeL2.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol\\\";\\nimport \\\"@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol\\\";\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./GnosisSafeProxy.sol\\\";\\nimport \\\"./IProxyCreationCallback.sol\\\";\\n\\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n/// @author Stefan George - <stefan@gnosis.pm>\\ncontract GnosisSafeProxyFactory {\\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\\n\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\\n        proxy = new GnosisSafeProxy(singleton);\\n        if (data.length > 0)\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        emit ProxyCreation(proxy, singleton);\\n    }\\n\\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\\n    function proxyRuntimeCode() public pure returns (bytes memory) {\\n        return type(GnosisSafeProxy).runtimeCode;\\n    }\\n\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\n    function proxyCreationCode() public pure returns (bytes memory) {\\n        return type(GnosisSafeProxy).creationCode;\\n    }\\n\\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\\n    ///      This method is only meant as an utility to be called from other methods\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function deployProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) internal returns (GnosisSafeProxy proxy) {\\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n    }\\n\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function createProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) public returns (GnosisSafeProxy proxy) {\\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\\n        if (initializer.length > 0)\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        emit ProxyCreation(proxy, _singleton);\\n    }\\n\\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\\n    function createProxyWithCallback(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce,\\n        IProxyCreationCallback callback\\n    ) public returns (GnosisSafeProxy proxy) {\\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\\n    }\\n\\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function calculateCreateProxyWithNonceAddress(\\n        address _singleton,\\n        bytes calldata initializer,\\n        uint256 saltNonce\\n    ) external returns (GnosisSafeProxy proxy) {\\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\\n        revert(string(abi.encodePacked(proxy)));\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Multi Send - Allows to batch multiple transactions into one.\\n/// @author Nick Dodson - <nick.dodson@consensys.net>\\n/// @author Gonçalo Sá - <goncalo.sa@consensys.net>\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract MultiSend {\\n    address private immutable multisendSingleton;\\n\\n    constructor() {\\n        multisendSingleton = address(this);\\n    }\\n\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) public payable {\\n        require(address(this) != multisendSingleton, \\\"MultiSend should only be called via delegatecall\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    case 1 {\\n                        success := delegatecall(gas(), to, data, dataLength, 0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ncontract ModuleProxyFactory {\\n    event ModuleProxyCreation(\\n        address indexed proxy,\\n        address indexed masterCopy\\n    );\\n\\n    function createProxy(address target, bytes32 salt)\\n        internal\\n        returns (address result)\\n    {\\n        require(\\n            address(target) != address(0),\\n            \\\"createProxy: address can not be zero\\\"\\n        );\\n        bytes memory deployment = abi.encodePacked(\\n            hex\\\"602d8060093d393df3363d3d373d3d3d363d73\\\",\\n            target,\\n            hex\\\"5af43d82803e903d91602b57fd5bf3\\\"\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := create2(0, add(deployment, 0x20), mload(deployment), salt)\\n        }\\n        require(result != address(0), \\\"createProxy: address already taken\\\");\\n    }\\n\\n    function deployModule(\\n        address masterCopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) public returns (address proxy) {\\n        proxy = createProxy(\\n            masterCopy,\\n            keccak256(abi.encodePacked(keccak256(initializer), saltNonce))\\n        );\\n        (bool success, ) = proxy.call(initializer);\\n        require(success, \\\"deployModule: initialization failed\\\");\\n\\n        emit ModuleProxyCreation(proxy, masterCopy);\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\\n/// @author Richard Meissner - <richard@gnosis.io>\\ninterface IProxy {\\n    function masterCopy() external view returns (address);\\n}\\n\\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract GnosisSafeProxy {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\n    address internal singleton;\\n\\n    /// @dev Constructor function sets address of singleton contract.\\n    /// @param _singleton Singleton address.\\n    constructor(address _singleton) {\\n        require(_singleton != address(0), \\\"Invalid singleton address provided\\\");\\n        singleton = _singleton;\\n    }\\n\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\n    fallback() external payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\\n                mstore(0, _singleton)\\n                return(0, 0x20)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\"\n    },\n    \"@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"./GnosisSafeProxy.sol\\\";\\n\\ninterface IProxyCreationCallback {\\n    function proxyCreated(\\n        GnosisSafeProxy proxy,\\n        address _singleton,\\n        bytes calldata initializer,\\n        uint256 saltNonce\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/extensions/BaseScope.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../BaseStrategy.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\n/// @title Base scope - A Usul strategy extension that scopes execution of proposals.\\n/// @author Nathan Ginnever - <team@hyphal.xyz>\\nabstract contract BaseScope is BaseStrategy {\\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n\\n    bytes32 public constant TRANSACTION_TYPEHASH =\\n        0x72e9670a7ee00f5fbf1049b8c38e3f22fab7e9b85029e85cf9412f17fdd5c2ad;\\n    // keccak256(\\n    //     \\\"Transaction(address to,uint256 value,bytes data,uint8 operation,uint256 nonce)\\\"\\n    // );\\n\\n    mapping(uint256 => bool[]) public checkedProposals;\\n    bytes4 public allowedSignature;\\n    //bytes4(keccak256(\\\"cancelProposals(uint256[])\\\")); // 0xe0a8f6f5\\n    address public allowedTarget;\\n\\n    event SignatureSet(\\n        bytes4 indexed previousSignature,\\n        bytes4 indexed newSignature\\n    );\\n    event TargetSet(address indexed previousTarget, address indexed newTarget);\\n\\n    function updateAllowedSignature(bytes4 _newSignature) public onlyOwner {\\n        bytes4 previousSignature = allowedSignature;\\n        allowedSignature = _newSignature;\\n        emit SignatureSet(previousSignature, _newSignature);\\n    }\\n\\n    function updateAllowedTarget(address _newTarget) public onlyOwner {\\n        address previousTarget = allowedTarget;\\n        allowedTarget = _newTarget;\\n        emit TargetSet(previousTarget, _newTarget);\\n    }\\n\\n    function checkTransaction(\\n        uint256 proposalId,\\n        bytes32 txHash,\\n        bytes memory _tx\\n    ) internal virtual {\\n        (\\n            address target,\\n            uint256 value,\\n            bytes memory txData,\\n            Enum.Operation operation\\n        ) = abi.decode(_tx, (address, uint256, bytes, Enum.Operation));\\n        require(target == allowedTarget, \\\"only calls to allowedTarget\\\");\\n        require(\\n            txHash ==\\n                keccak256(\\n                    generateTransactionHashData(\\n                        target,\\n                        value,\\n                        txData,\\n                        operation,\\n                        0\\n                    )\\n                ),\\n            \\\"supplied calldata does not match proposal hash\\\"\\n        );\\n        require(\\n            bytes4(txData) == allowedSignature,\\n            \\\"proposal is not a cancel signature\\\"\\n        );\\n        checkedProposals[proposalId].push(true);\\n    }\\n\\n    /// @dev Generates the data for the module transaction hash (required for signing)\\n    function generateTransactionHashData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 nonce\\n    ) internal view returns (bytes memory) {\\n        uint256 chainId = getChainId();\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, UsulModule) // use Usul as the verifying contract\\n        );\\n        bytes32 transactionHash = keccak256(\\n            abi.encode(\\n                TRANSACTION_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                nonce\\n            )\\n        );\\n        return\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0x01),\\n                domainSeparator,\\n                transactionHash\\n            );\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/GovernanceToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract GovernanceToken is ERC20, ERC20Permit, ERC20Votes {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _totalSupply\\n    ) ERC20(_name, _symbol) ERC20Permit(_name) {\\n        _mint(msg.sender, _totalSupply);\\n        // TODO: allow DAO to mint more\\n    }\\n\\n    // The functions below are overrides required by Solidity.\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20, ERC20Votes) {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/common/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(\\n            typeHash,\\n            hashedName,\\n            hashedVersion\\n        );\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (\\n            address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID\\n        ) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return\\n                _buildDomainSeparator(\\n                    _TYPE_HASH,\\n                    _HASHED_NAME,\\n                    _HASHED_VERSION\\n                );\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    typeHash,\\n                    nameHash,\\n                    versionHash,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32)\\n    {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"contracts/common/VotingNFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract VotingNFT {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    constructor() {\\n        for (uint256 i = 0; i < 10; i++) {\\n            _mint(msg.sender, i);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos)\\n        public\\n        view\\n        virtual\\n        returns (Checkpoint memory)\\n    {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account)\\n        public\\n        view\\n        virtual\\n        returns (uint32)\\n    {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal {\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n    }\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(\\n                    _checkpoints[src],\\n                    _subtract,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(\\n                    _checkpoints[dst],\\n                    _add,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(\\n                Checkpoint({\\n                    fromBlock: SafeCast.toUint32(block.number),\\n                    votes: SafeCast.toUint224(newWeight)\\n                })\\n            );\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/TestStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IProposal.sol\\\";\\n\\ncontract TestStrategy {\\n    address public UsulModule;\\n    uint256 public timeLockPeriod;\\n\\n    constructor(address _UsulModule, uint256 _timeLockedPeriod) {\\n        UsulModule = _UsulModule;\\n        timeLockPeriod = _timeLockedPeriod;\\n    }\\n\\n    function finalizeStrategy(uint256 proposalId) public {\\n        IProposal(UsulModule).receiveStrategy(proposalId, timeLockPeriod);\\n    }\\n\\n    function receiveProposal(bytes memory data) public {}\\n}\\n\"\n    },\n    \"contracts/test/CompToken.sol\": {\n      \"content\": \"pragma solidity ^0.8.6;\\n\\ncontract CompToken {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Compound\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"COMP\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public constant totalSupply = 10000000e18; // 10 million Comp\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Construct a new Comp token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(address account) {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount)\\n        external\\n        returns (bool)\\n    {\\n        uint96 amount;\\n        if (rawAmount == type(uint256).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Comp::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::transfer: amount exceeds 96 bits\\\"\\n        );\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::approve: amount exceeds 96 bits\\\"\\n        );\\n\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\n            uint96 newAllowance = sub96(\\n                spenderAllowance,\\n                amount,\\n                \\\"Comp::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"Comp::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"Comp::delegateBySig: invalid nonce\\\"\\n        );\\n        require(\\n            block.timestamp <= expiry,\\n            \\\"Comp::delegateBySig: signature expired\\\"\\n        );\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"Comp::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint96 amount\\n    ) internal {\\n        require(\\n            src != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer from the zero address\\\"\\n        );\\n        require(\\n            dst != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer to the zero address\\\"\\n        );\\n\\n        balances[src] = sub96(\\n            balances[src],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount exceeds balance\\\"\\n        );\\n        balances[dst] = add96(\\n            balances[dst],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount overflows\\\"\\n        );\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\n                    : 0;\\n                uint96 srcRepNew = sub96(\\n                    srcRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount underflows\\\"\\n                );\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\n                    : 0;\\n                uint96 dstRepNew = add96(\\n                    dstRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount overflows\\\"\\n                );\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            \\\"Comp::_writeCheckpoint: block number exceeds 32 bits\\\"\\n        );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/MockContract.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0;\\n\\ninterface MockInterface {\\n    /**\\n     * @dev After calling this method, the mock will return `response` when it is called\\n     * with any calldata that is not mocked more specifically below\\n     * (e.g. using givenMethodReturn).\\n     * @param response ABI encoded response that will be returned if method is invoked\\n     */\\n    function givenAnyReturn(bytes calldata response) external;\\n\\n    function givenAnyReturnBool(bool response) external;\\n\\n    function givenAnyReturnUint(uint256 response) external;\\n\\n    function givenAnyReturnAddress(address response) external;\\n\\n    function givenAnyRevert() external;\\n\\n    function givenAnyRevertWithMessage(string calldata message) external;\\n\\n    function givenAnyRunOutOfGas() external;\\n\\n    /**\\n     * @dev After calling this method, the mock will return `response` when the given\\n     * methodId is called regardless of arguments. If the methodId and arguments\\n     * are mocked more specifically (using `givenMethodAndArguments`) the latter\\n     * will take precedence.\\n     * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n     * @param response ABI encoded response that will be returned if method is invoked\\n     */\\n    function givenMethodReturn(bytes calldata method, bytes calldata response)\\n        external;\\n\\n    function givenMethodReturnBool(bytes calldata method, bool response)\\n        external;\\n\\n    function givenMethodReturnUint(bytes calldata method, uint256 response)\\n        external;\\n\\n    function givenMethodReturnAddress(bytes calldata method, address response)\\n        external;\\n\\n    function givenMethodRevert(bytes calldata method) external;\\n\\n    function givenMethodRevertWithMessage(\\n        bytes calldata method,\\n        string calldata message\\n    ) external;\\n\\n    function givenMethodRunOutOfGas(bytes calldata method) external;\\n\\n    /**\\n     * @dev After calling this method, the mock will return `response` when the given\\n     * methodId is called with matching arguments. These exact calldataMocks will take\\n     * precedence over all other calldataMocks.\\n     * @param call ABI encoded calldata (methodId and arguments)\\n     * @param response ABI encoded response that will be returned if contract is invoked with calldata\\n     */\\n    function givenCalldataReturn(bytes calldata call, bytes calldata response)\\n        external;\\n\\n    function givenCalldataReturnBool(bytes calldata call, bool response)\\n        external;\\n\\n    function givenCalldataReturnUint(bytes calldata call, uint256 response)\\n        external;\\n\\n    function givenCalldataReturnAddress(bytes calldata call, address response)\\n        external;\\n\\n    function givenCalldataRevert(bytes calldata call) external;\\n\\n    function givenCalldataRevertWithMessage(\\n        bytes calldata call,\\n        string calldata message\\n    ) external;\\n\\n    function givenCalldataRunOutOfGas(bytes calldata call) external;\\n\\n    /**\\n     * @dev Returns the number of times anything has been called on this mock since last reset\\n     */\\n    function invocationCount() external returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of times the given method has been called on this mock since last reset\\n     * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n     */\\n    function invocationCountForMethod(bytes calldata method)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\\n     * @param call ABI encoded calldata (methodId and arguments)\\n     */\\n    function invocationCountForCalldata(bytes calldata call)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev Resets all mocked methods and invocation counts.\\n     */\\n    function reset() external;\\n}\\n\\n/**\\n * Implementation of the MockInterface.\\n */\\ncontract MockContract is MockInterface {\\n    enum MockType {\\n        Return,\\n        Revert,\\n        OutOfGas\\n    }\\n\\n    bytes32 public constant MOCKS_LIST_START = hex\\\"01\\\";\\n    bytes public constant MOCKS_LIST_END = \\\"0xff\\\";\\n    bytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\\n    bytes4 public constant SENTINEL_ANY_MOCKS = hex\\\"01\\\";\\n    bytes public constant DEFAULT_FALLBACK_VALUE = abi.encode(false);\\n\\n    // A linked list allows easy iteration and inclusion checks\\n    mapping(bytes32 => bytes) calldataMocks;\\n    mapping(bytes => MockType) calldataMockTypes;\\n    mapping(bytes => bytes) calldataExpectations;\\n    mapping(bytes => string) calldataRevertMessage;\\n    mapping(bytes32 => uint256) calldataInvocations;\\n\\n    mapping(bytes4 => bytes4) methodIdMocks;\\n    mapping(bytes4 => MockType) methodIdMockTypes;\\n    mapping(bytes4 => bytes) methodIdExpectations;\\n    mapping(bytes4 => string) methodIdRevertMessages;\\n    mapping(bytes32 => uint256) methodIdInvocations;\\n\\n    MockType fallbackMockType;\\n    bytes fallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n    string fallbackRevertMessage;\\n    uint256 invocations;\\n    uint256 resetCount;\\n\\n    constructor() {\\n        calldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n        methodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n    }\\n\\n    function trackCalldataMock(bytes memory call) private {\\n        bytes32 callHash = keccak256(call);\\n        if (calldataMocks[callHash].length == 0) {\\n            calldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\\n            calldataMocks[MOCKS_LIST_START] = call;\\n        }\\n    }\\n\\n    function trackMethodIdMock(bytes4 methodId) private {\\n        if (methodIdMocks[methodId] == 0x0) {\\n            methodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\\n            methodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\\n        }\\n    }\\n\\n    function _givenAnyReturn(bytes memory response) internal {\\n        fallbackMockType = MockType.Return;\\n        fallbackExpectation = response;\\n    }\\n\\n    function givenAnyReturn(bytes calldata response) external override {\\n        _givenAnyReturn(response);\\n    }\\n\\n    function givenAnyReturnBool(bool response) external override {\\n        uint256 flag = response ? 1 : 0;\\n        _givenAnyReturn(uintToBytes(flag));\\n    }\\n\\n    function givenAnyReturnUint(uint256 response) external override {\\n        _givenAnyReturn(uintToBytes(response));\\n    }\\n\\n    function givenAnyReturnAddress(address response) external override {\\n        _givenAnyReturn(uintToBytes(uint256(uint160(address(response)))));\\n    }\\n\\n    function givenAnyRevert() external override {\\n        fallbackMockType = MockType.Revert;\\n        fallbackRevertMessage = \\\"\\\";\\n    }\\n\\n    function givenAnyRevertWithMessage(string calldata message)\\n        external\\n        override\\n    {\\n        fallbackMockType = MockType.Revert;\\n        fallbackRevertMessage = message;\\n    }\\n\\n    function givenAnyRunOutOfGas() external override {\\n        fallbackMockType = MockType.OutOfGas;\\n    }\\n\\n    function _givenCalldataReturn(bytes memory call, bytes memory response)\\n        private\\n    {\\n        calldataMockTypes[call] = MockType.Return;\\n        calldataExpectations[call] = response;\\n        trackCalldataMock(call);\\n    }\\n\\n    function givenCalldataReturn(bytes calldata call, bytes calldata response)\\n        external\\n        override\\n    {\\n        _givenCalldataReturn(call, response);\\n    }\\n\\n    function givenCalldataReturnBool(bytes calldata call, bool response)\\n        external\\n        override\\n    {\\n        uint256 flag = response ? 1 : 0;\\n        _givenCalldataReturn(call, uintToBytes(flag));\\n    }\\n\\n    function givenCalldataReturnUint(bytes calldata call, uint256 response)\\n        external\\n        override\\n    {\\n        _givenCalldataReturn(call, uintToBytes(response));\\n    }\\n\\n    function givenCalldataReturnAddress(bytes calldata call, address response)\\n        external\\n        override\\n    {\\n        _givenCalldataReturn(\\n            call,\\n            uintToBytes(uint256(uint160(address(response))))\\n        );\\n    }\\n\\n    function _givenMethodReturn(bytes memory call, bytes memory response)\\n        private\\n    {\\n        bytes4 method = bytesToBytes4(call);\\n        methodIdMockTypes[method] = MockType.Return;\\n        methodIdExpectations[method] = response;\\n        trackMethodIdMock(method);\\n    }\\n\\n    function givenMethodReturn(bytes calldata call, bytes calldata response)\\n        external\\n        override\\n    {\\n        _givenMethodReturn(call, response);\\n    }\\n\\n    function givenMethodReturnBool(bytes calldata call, bool response)\\n        external\\n        override\\n    {\\n        uint256 flag = response ? 1 : 0;\\n        _givenMethodReturn(call, uintToBytes(flag));\\n    }\\n\\n    function givenMethodReturnUint(bytes calldata call, uint256 response)\\n        external\\n        override\\n    {\\n        _givenMethodReturn(call, uintToBytes(response));\\n    }\\n\\n    function givenMethodReturnAddress(bytes calldata call, address response)\\n        external\\n        override\\n    {\\n        _givenMethodReturn(\\n            call,\\n            uintToBytes(uint256(uint160(address(response))))\\n        );\\n    }\\n\\n    function givenCalldataRevert(bytes calldata call) external override {\\n        calldataMockTypes[call] = MockType.Revert;\\n        calldataRevertMessage[call] = \\\"\\\";\\n        trackCalldataMock(call);\\n    }\\n\\n    function givenMethodRevert(bytes calldata call) external override {\\n        bytes4 method = bytesToBytes4(call);\\n        methodIdMockTypes[method] = MockType.Revert;\\n        trackMethodIdMock(method);\\n    }\\n\\n    function givenCalldataRevertWithMessage(\\n        bytes calldata call,\\n        string calldata message\\n    ) external override {\\n        calldataMockTypes[call] = MockType.Revert;\\n        calldataRevertMessage[call] = message;\\n        trackCalldataMock(call);\\n    }\\n\\n    function givenMethodRevertWithMessage(\\n        bytes calldata call,\\n        string calldata message\\n    ) external override {\\n        bytes4 method = bytesToBytes4(call);\\n        methodIdMockTypes[method] = MockType.Revert;\\n        methodIdRevertMessages[method] = message;\\n        trackMethodIdMock(method);\\n    }\\n\\n    function givenCalldataRunOutOfGas(bytes calldata call) external override {\\n        calldataMockTypes[call] = MockType.OutOfGas;\\n        trackCalldataMock(call);\\n    }\\n\\n    function givenMethodRunOutOfGas(bytes calldata call) external override {\\n        bytes4 method = bytesToBytes4(call);\\n        methodIdMockTypes[method] = MockType.OutOfGas;\\n        trackMethodIdMock(method);\\n    }\\n\\n    function invocationCount() external view override returns (uint256) {\\n        return invocations;\\n    }\\n\\n    function invocationCountForMethod(bytes calldata call)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes4 method = bytesToBytes4(call);\\n        return\\n            methodIdInvocations[\\n                keccak256(abi.encodePacked(resetCount, method))\\n            ];\\n    }\\n\\n    function invocationCountForCalldata(bytes calldata call)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\\n    }\\n\\n    function reset() external override {\\n        // Reset all exact calldataMocks\\n        bytes memory nextMock = calldataMocks[MOCKS_LIST_START];\\n        bytes32 mockHash = keccak256(nextMock);\\n        // We cannot compary bytes\\n        while (mockHash != MOCKS_LIST_END_HASH) {\\n            // Reset all mock maps\\n            calldataMockTypes[nextMock] = MockType.Return;\\n            calldataExpectations[nextMock] = hex\\\"\\\";\\n            calldataRevertMessage[nextMock] = \\\"\\\";\\n            // Set next mock to remove\\n            nextMock = calldataMocks[mockHash];\\n            // Remove from linked list\\n            calldataMocks[mockHash] = \\\"\\\";\\n            // Update mock hash\\n            mockHash = keccak256(nextMock);\\n        }\\n        // Clear list\\n        calldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\n        // Reset all any calldataMocks\\n        bytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\\n        while (nextAnyMock != SENTINEL_ANY_MOCKS) {\\n            bytes4 currentAnyMock = nextAnyMock;\\n            methodIdMockTypes[currentAnyMock] = MockType.Return;\\n            methodIdExpectations[currentAnyMock] = hex\\\"\\\";\\n            methodIdRevertMessages[currentAnyMock] = \\\"\\\";\\n            nextAnyMock = methodIdMocks[currentAnyMock];\\n            // Remove from linked list\\n            methodIdMocks[currentAnyMock] = 0x0;\\n        }\\n        // Clear list\\n        methodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\n        fallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n        fallbackMockType = MockType.Return;\\n        invocations = 0;\\n        resetCount += 1;\\n    }\\n\\n    function useAllGas() private {\\n        while (true) {\\n            bool s;\\n            assembly {\\n                //expensive call to EC multiply contract\\n                s := call(sub(gas(), 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\\n            }\\n        }\\n    }\\n\\n    function bytesToBytes4(bytes memory b) private pure returns (bytes4) {\\n        bytes4 out;\\n        for (uint256 i = 0; i < 4; i++) {\\n            out |= bytes4(b[i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    function uintToBytes(uint256 x) private pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    function updateInvocationCount(\\n        bytes4 methodId,\\n        bytes memory originalMsgData\\n    ) public {\\n        require(\\n            msg.sender == address(this),\\n            \\\"Can only be called from the contract itself\\\"\\n        );\\n        invocations += 1;\\n        methodIdInvocations[\\n            keccak256(abi.encodePacked(resetCount, methodId))\\n        ] += 1;\\n        calldataInvocations[\\n            keccak256(abi.encodePacked(resetCount, originalMsgData))\\n        ] += 1;\\n    }\\n\\n    receive() external payable {\\n        fallbackImpl();\\n    }\\n\\n    fallback() external payable {\\n        fallbackImpl();\\n    }\\n\\n    function fallbackImpl() internal {\\n        bytes4 methodId = msg.sig;\\n\\n        // First, check exact matching overrides\\n        if (calldataMockTypes[msg.data] == MockType.Revert) {\\n            revert(calldataRevertMessage[msg.data]);\\n        }\\n        if (calldataMockTypes[msg.data] == MockType.OutOfGas) {\\n            useAllGas();\\n        }\\n        bytes memory result = calldataExpectations[msg.data];\\n\\n        // Then check method Id overrides\\n        if (result.length == 0) {\\n            if (methodIdMockTypes[methodId] == MockType.Revert) {\\n                revert(methodIdRevertMessages[methodId]);\\n            }\\n            if (methodIdMockTypes[methodId] == MockType.OutOfGas) {\\n                useAllGas();\\n            }\\n            result = methodIdExpectations[methodId];\\n        }\\n\\n        // Last, use the fallback override\\n        if (result.length == 0) {\\n            if (fallbackMockType == MockType.Revert) {\\n                revert(fallbackRevertMessage);\\n            }\\n            if (fallbackMockType == MockType.OutOfGas) {\\n                useAllGas();\\n            }\\n            result = fallbackExpectation;\\n        }\\n\\n        // Record invocation as separate call so we don't rollback in case we are called with STATICCALL\\n        (, bytes memory r) = address(this).call{gas: 100000}(\\n            abi.encodeWithSignature(\\n                \\\"updateInvocationCount(bytes4,bytes)\\\",\\n                methodId,\\n                msg.data\\n            )\\n        );\\n        assert(r.length == 0);\\n\\n        assembly {\\n            return(add(0x20, result), mload(result))\\n        }\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "edce3d662e76b3807939966d8c7d0c2f",
      "transactionHash": "0x9d5c7bfc8cf698ab74eda7d7bfa10a692b6291544cbf68597e4ef2851b814b9c",
      "args": [
        "0x0000000000000000000000000000000000000001",
        "0x0000000000000000000000000000000000000001",
        2,
        1,
        1,
        "SimpleMemberVoting",
        [
          "0x0000000000000000000000000000000000000001"
        ]
      ]
    },
    "rawTx": "0xf952f5800a833701f8944e59b44847b379578588920ca78fbf26c0b4956c80b95293000000000000000000000000000000000000000000000000000000000000000060806040523480156200001157600080fd5b506040516200511338038062005113833981810160405281019062000037919062000d90565b600087878787878787604051602001620000589796959493929190620010a7565b60405160208183030381529060405290506200007a816200008860201b60201c565b5050505050505050620017e4565b600060019054906101000a900460ff16620000b25760008054906101000a900460ff1615620000c3565b620000c26200037b60201b60201c565b5b62000105576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fc9062001198565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000156576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60008060008060008060008880602001905181019062000177919062000c9f565b965096509650965096509650965060018511620001cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c29062001132565b60405180910390fd5b620001db6200039960201b60201c565b60005b81518110156200022c576200021682828151811062000202576200020162001531565b5b6020026020010151620003fd60201b60201c565b8080620002239062001485565b915050620001de565b506200024e8262000242620005d060201b60201c565b6200060d60201b60201c565b6200025f846200068b60201b60201c565b62000270876200072e60201b60201c565b6001856200027f919062001330565b609a8190555085606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183620002d5919062001330565b609b8190555081609c9080519060200190620002f392919062000a7e565b508673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f61586574b8b0edca97136ad4cb664eec4742d53de53403d531506632e6342a3960405160405180910390a3505050505050508015620003775760008060016101000a81548160ff0219169083151502179055505b5050565b600062000393306200084460201b620017321760201c565b15905090565b600060019054906101000a900460ff16620003eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003e290620011fe565b60405180910390fd5b620003fb6200086760201b60201c565b565b6200040d620008db60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000433620008e360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200048c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200048390620011ba565b60405180910390fd5b60001515609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151462000522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005199062001176565b60405180910390fd5b6001609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550609e60008154809291906200058f9062001485565b91905055507fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd91481604051620005c591906200108a565b60405180910390a150565b60606040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250905090565b600060019054906101000a900460ff166200065f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065690620011fe565b60405180910390fd5b600082805190602001209050600082805190602001209050816066819055508060678190555050505050565b6200069b620008db60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620006c1620008e360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200071a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200071190620011ba565b60405180910390fd5b6200072b816200090d60201b60201c565b50565b6200073e620008db60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000764620008e360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620007bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007b490620011ba565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000830576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008279062001154565b60405180910390fd5b6200084181620009af60201b60201c565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16620008b9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008b090620011fe565b60405180910390fd5b620008d9620008cd620008db60201b60201c565b620009af60201b60201c565b565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6200091d62000a7560201b60201c565b81111562000962576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200095990620011dc565b60405180910390fd5b600060a05490508160a0819055507f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b46339978183604051620009a392919062001220565b60405180910390a15050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006064905090565b82805462000a8c9062001419565b90600052602060002090601f01602090048101928262000ab0576000855562000afc565b82601f1062000acb57805160ff191683800117855562000afc565b8280016001018555821562000afc579182015b8281111562000afb57825182559160200191906001019062000ade565b5b50905062000b0b919062000b0f565b5090565b5b8082111562000b2a57600081600090555060010162000b10565b5090565b600062000b4562000b3f8462001276565b6200124d565b9050808382526020820190508285602086028201111562000b6b5762000b6a62001594565b5b60005b8581101562000b9f578162000b84888262000bf4565b84526020840193506020830192505060018101905062000b6e565b5050509392505050565b600062000bc062000bba84620012a5565b6200124d565b90508281526020810184848401111562000bdf5762000bde62001599565b5b62000bec848285620013e3565b509392505050565b60008151905062000c058162001796565b92915050565b60008151905062000c1c81620017b0565b92915050565b600082601f83011262000c3a5762000c396200158f565b5b815162000c4c84826020860162000b2e565b91505092915050565b600082601f83011262000c6d5762000c6c6200158f565b5b815162000c7f84826020860162000ba9565b91505092915050565b60008151905062000c9981620017ca565b92915050565b600080600080600080600060e0888a03121562000cc15762000cc0620015a3565b5b600062000cd18a828b0162000c0b565b975050602062000ce48a828b0162000c0b565b965050604062000cf78a828b0162000c88565b955050606062000d0a8a828b0162000c88565b945050608062000d1d8a828b0162000c88565b93505060a088015167ffffffffffffffff81111562000d415762000d406200159e565b5b62000d4f8a828b0162000c55565b92505060c088015167ffffffffffffffff81111562000d735762000d726200159e565b5b62000d818a828b0162000c22565b91505092959891949750929550565b600080600080600080600060e0888a03121562000db25762000db1620015a3565b5b600062000dc28a828b0162000bf4565b975050602062000dd58a828b0162000bf4565b965050604062000de88a828b0162000c88565b955050606062000dfb8a828b0162000c88565b945050608062000e0e8a828b0162000c88565b93505060a088015167ffffffffffffffff81111562000e325762000e316200159e565b5b62000e408a828b0162000c55565b92505060c088015167ffffffffffffffff81111562000e645762000e636200159e565b5b62000e728a828b0162000c22565b91505092959891949750929550565b600062000e8f838362000e9b565b60208301905092915050565b62000ea68162001391565b82525050565b62000eb78162001391565b82525050565b600062000eca82620012eb565b62000ed681856200130e565b935062000ee383620012db565b8060005b8381101562000f1a57815162000efe888262000e81565b975062000f0b8362001301565b92505060018101905062000ee7565b5085935050505092915050565b600062000f3482620012f6565b62000f4081856200131f565b935062000f52818560208601620013e3565b62000f5d81620015a8565b840191505092915050565b600062000f776023836200131f565b915062000f8482620015b9565b604082019050919050565b600062000f9e6026836200131f565b915062000fab8262001608565b604082019050919050565b600062000fc5601c836200131f565b915062000fd28262001657565b602082019050919050565b600062000fec602e836200131f565b915062000ff98262001680565b604082019050919050565b6000620010136020836200131f565b91506200102082620016cf565b602082019050919050565b60006200103a6026836200131f565b91506200104782620016f8565b604082019050919050565b600062001061602b836200131f565b91506200106e8262001747565b604082019050919050565b6200108481620013d9565b82525050565b6000602082019050620010a1600083018462000eac565b92915050565b600060e082019050620010be600083018a62000eac565b620010cd602083018962000eac565b620010dc604083018862001079565b620010eb606083018762001079565b620010fa608083018662001079565b81810360a08301526200110e818562000f27565b905081810360c083015262001124818462000ebd565b905098975050505050505050565b600060208201905081810360008301526200114d8162000f68565b9050919050565b600060208201905081810360008301526200116f8162000f8f565b9050919050565b60006020820190508181036000830152620011918162000fb6565b9050919050565b60006020820190508181036000830152620011b38162000fdd565b9050919050565b60006020820190508181036000830152620011d58162001004565b9050919050565b60006020820190508181036000830152620011f7816200102b565b9050919050565b60006020820190508181036000830152620012198162001052565b9050919050565b600060408201905062001237600083018562001079565b62001246602083018462001079565b9392505050565b6000620012596200126c565b90506200126782826200144f565b919050565b6000604051905090565b600067ffffffffffffffff82111562001294576200129362001560565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620012c357620012c262001560565b5b620012ce82620015a8565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200133d82620013d9565b91506200134a83620013d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620013865762001385620014d3565b5b828202905092915050565b60006200139e82620013b9565b9050919050565b6000620013b282620013b9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562001403578082015181840152602081019050620013e6565b8381111562001413576000848401525b50505050565b600060028204905060018216806200143257607f821691505b6020821081141562001449576200144862001502565b5b50919050565b6200145a82620015a8565b810181811067ffffffffffffffff821117156200147c576200147b62001560565b5b80604052505050565b60006200149282620013d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620014c857620014c7620014d3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f766f74696e67506572696f64206d75737420626520677265617465722074686160008201527f6e20310000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6d656d62657220697320616c7265616479207265676973746572656400000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f71756f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d60008201527f696e61746f720000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b620017a18162001391565b8114620017ad57600080fd5b50565b620017bb81620013a5565b8114620017c757600080fd5b50565b620017d581620013d9565b8114620017e157600080fd5b50565b61391f80620017f46000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806378446bc111610104578063a7713a70116100a2578063d69be91c11610071578063d69be91c146104e6578063ef00ef4314610516578063f2fde38b14610532578063f8ce560a1461054e576101cf565b8063a7713a7014610474578063a8a829c114610492578063bf1b5efd146104ae578063ca6d56dc146104ca576101cf565b806386522973116100de57806386522973146103fe5780638da5cb5b1461041c57806397c3d3341461043a578063a4f9edbf14610458576101cf565b806378446bc1146103a857806379bfb089146103c65780637a3ff4d2146103e2576101cf565b80631f2c562e11610171578063494031831161014b578063494031831461033257806354fd4d5014610362578063715018a614610380578063747691df1461038a576101cf565b80631f2c562e146102ca578063224f3263146102e65780634385963214610302576101cf565b806306fdde03116101ad57806306fdde031461024257806308ae4b0c146102605780630b1ca49a1461029057806311aee380146102ac576101cf565b8063013cf08b146101d457806302a251a31461020857806306f3f9e614610226575b600080fd5b6101ee60048036038101906101e99190612577565b61057e565b6040516101ff959493929190612f1b565b60405180910390f35b6102106105b4565b60405161021d9190612ed7565b60405180910390f35b610240600480360381019061023b9190612577565b6105ba565b005b61024a610642565b6040516102579190612c35565b60405180910390f35b61027a600480360381019061027591906123e7565b6106d0565b6040516102879190612b30565b60405180910390f35b6102aa60048036038101906102a591906123e7565b6106f0565b005b6102b46108a9565b6040516102c19190612ed7565b60405180910390f35b6102e460048036038101906102df9190612680565b6108af565b005b61030060048036038101906102fb919061252e565b610921565b005b61031c600480360381019061031791906125d1565b610a49565b6040516103299190612b30565b60405180910390f35b61034c60048036038101906103479190612577565b610ab4565b6040516103599190612b30565b60405180910390f35b61036a610c07565b6040516103779190612c35565b60405180910390f35b610388610c44565b005b610392610ccc565b60405161039f9190612ad0565b60405180910390f35b6103b0610cf2565b6040516103bd9190612ed7565b60405180910390f35b6103e060048036038101906103db9190612577565b610cf8565b005b6103fc60048036038101906103f79190612577565b610dd4565b005b610406610e9b565b6040516104139190612b4b565b60405180910390f35b610424610ebf565b6040516104319190612ad0565b60405180910390f35b610442610ee9565b60405161044f9190612ed7565b60405180910390f35b610472600480360381019061046d919061252e565b610ef2565b005b61047c611194565b6040516104899190612ed7565b60405180910390f35b6104ac60048036038101906104a791906123e7565b61119e565b005b6104c860048036038101906104c39190612611565b6112e0565b005b6104e460048036038101906104df91906123e7565b6112f0565b005b61050060048036038101906104fb91906124ee565b6114a9565b60405161050d9190612ed7565b60405180910390f35b610530600480360381019061052b9190612577565b611543565b005b61054c600480360381019061054791906123e7565b61160a565b005b61056860048036038101906105639190612577565b611702565b6040516105759190612ed7565b60405180910390f35b609d6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b609a5481565b6105c2611755565b73ffffffffffffffffffffffffffffffffffffffff166105e0610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90612df7565b60405180910390fd5b61063f8161175d565b50565b609c805461064f90613206565b80601f016020809104026020016040519081016040528092919081815260200182805461067b90613206565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b505050505081565b609f6020528060005260406000206000915054906101000a900460ff1681565b6106f8611755565b73ffffffffffffffffffffffffffffffffffffffff16610716610ebf565b73ffffffffffffffffffffffffffffffffffffffff161461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390612df7565b60405180910390fd5b60011515609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690612e77565b60405180910390fd5b6000609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550609e600081548092919061086a906131dc565b91905055507f6e76fb4c77256006d9c38ec7d82b45a8c8f3c27b1d6766fffc42dfb8de6844928160405161089e9190612ad0565b60405180910390a150565b609e5481565b600061090d6109077fb780761e36898d7ec1cc0fb66fdd6a8a42e635ee643709d6b20652c68a3b29f587876040516020016108ec93929190612bb9565b604051602081830303815290604052805190602001206117f2565b8461180c565b905061091a858286611833565b5050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890612dd7565b60405180910390fd5b6000818060200190518101906109c791906125a4565b905042609a546109d79190613048565b609d60008381526020019081526020016000206003018190555043609d6000838152602001908152602001600020600401819055507f3aeda78f6230a590817748b94b63d690cec4d1a15d494dfc7006e0a39e77f81a8142604051610a3d929190612ef2565b60405180910390a15050565b6000609d600084815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000609d600083815260200190815260200160002060010154609d60008481526020019081526020016000206000015411610b24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1b90612c97565b60405180910390fd5b610b2d43611702565b609d600084815260200190815260200160002060020154609d600085815260200190815260200160002060000154610b659190613048565b1015610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d90612cf7565b60405180910390fd5b42609d60008481526020019081526020016000206003015410610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf590612e17565b60405180910390fd5b60019050919050565b60606040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250905090565b610c4c611755565b73ffffffffffffffffffffffffffffffffffffffff16610c6a610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb790612df7565b60405180910390fd5b610cca6000611ac8565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b609b5481565b610d0181610ab4565b15610d9857606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd6134882609b546040518363ffffffff1660e01b8152600401610d65929190612ef2565b600060405180830381600087803b158015610d7f57600080fd5b505af1158015610d93573d6000803e3d6000fd5b505050505b7f54ffcee03e8b80c05e4d1c55e3dc60602d9082a899e50337b680c9c4c4d80a3a8142604051610dc9929190612ef2565b60405180910390a150565b610ddc611755565b73ffffffffffffffffffffffffffffffffffffffff16610dfa610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614610e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4790612df7565b60405180910390fd5b6000609b54905081609b819055507f2a72574d775756e698a258fc07c826b7185131fff8a96b868feacab45fb234328183604051610e8f929190612ef2565b60405180910390a15050565b7fb780761e36898d7ec1cc0fb66fdd6a8a42e635ee643709d6b20652c68a3b29f581565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006064905090565b600060019054906101000a900460ff16610f1a5760008054906101000a900460ff1615610f23565b610f22611b8e565b5b610f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5990612d97565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fb2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600080600080600080600088806020019051810190610fd19190612414565b965096509650965096509650965060018511611022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101990612c77565b60405180910390fd5b61102a611b9f565b60005b815181101561106c5761105982828151811061104c5761104b613378565b5b60200260200101516112f0565b808061106490613269565b91505061102d565b5061107e82611079610c07565b611bf8565b611087846105ba565b6110908761160a565b60018561109d91906130cf565b609a8190555085606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001836110f191906130cf565b609b8190555081609c908051906020019061110d929190612148565b508673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f61586574b8b0edca97136ad4cb664eec4742d53de53403d531506632e6342a3960405160405180910390a35050505050505080156111905760008060016101000a81548160ff0219169083151502179055505b5050565b600060a054905090565b6111a6611755565b73ffffffffffffffffffffffffffffffffffffffff166111c4610ebf565b73ffffffffffffffffffffffffffffffffffffffff161461121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121190612df7565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f20c8544544aefaefdf339d996d855f2d4040cf93548344aa7dcb03b19e160cd160405160405180910390a35050565b6112eb833384611833565b505050565b6112f8611755565b73ffffffffffffffffffffffffffffffffffffffff16611316610ebf565b73ffffffffffffffffffffffffffffffffffffffff161461136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390612df7565b60405180910390fd5b60001515609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f690612d37565b60405180910390fd5b6001609f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550609e600081548092919061146a90613269565b91905055507fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9148160405161149e9190612ad0565b60405180910390a150565b600082609f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152f90612e57565b60405180910390fd5b600191505092915050565b61154b611755565b73ffffffffffffffffffffffffffffffffffffffff16611569610ebf565b73ffffffffffffffffffffffffffffffffffffffff16146115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690612df7565b60405180910390fd5b6000609a54905081609a819055507fffc708f072ca56e3d45ef0cb288b96cb9378f5f63e1646868bfbc9c38f4263a181836040516115fe929190612ef2565b60405180910390a15050565b611612611755565b73ffffffffffffffffffffffffffffffffffffffff16611630610ebf565b73ffffffffffffffffffffffffffffffffffffffff1614611686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167d90612df7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ed90612d17565b60405180910390fd5b6116ff81611ac8565b50565b600061170c610ee9565b611714611194565b609e5461172191906130cf565b61172b919061309e565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b611765610ee9565b8111156117a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179e90612e37565b60405180910390fd5b600060a05490508160a0819055507f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b463399781836040516117e6929190612ef2565b60405180910390a15050565b60006118056117ff611c73565b83611cb3565b9050919050565b600080600061181b8585611ce6565b9150915061182881611d69565b819250505092915050565b609d60008481526020019081526020016000206003015442111561188c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188390612cd7565b60405180910390fd5b6118968383610a49565b156118d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cd90612d77565b60405180910390fd5b6001609d600085815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600061194e83856114a9565b9050600060028111156119645761196361331a565b5b60ff168260ff1614156119a35780609d600086815260200190815260200160002060010160008282546119979190613048565b92505081905550611a85565b600160028111156119b7576119b661331a565b5b60ff168260ff1614156119f65780609d600086815260200190815260200160002060000160008282546119ea9190613048565b92505081905550611a84565b600280811115611a0957611a0861331a565b5b60ff168260ff161415611a485780609d60008681526020019081526020016000206002016000828254611a3c9190613048565b92505081905550611a83565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7a90612eb7565b60405180910390fd5b5b5b7f27eb20ecadc80d52f641a540b295d208f7c3735545d321b08e505116c601319983858484604051611aba9493929190612aeb565b60405180910390a150505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611b9930611732565b15905090565b600060019054906101000a900460ff16611bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be590612e97565b60405180910390fd5b611bf6611f3e565b565b600060019054906101000a900460ff16611c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3e90612e97565b60405180910390fd5b600082805190602001209050600082805190602001209050816066819055508060678190555050505050565b6000611cae7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ca1611f9f565b611ca9611fa9565b611fb3565b905090565b60008282604051602001611cc8929190612a99565b60405160208183030381529060405280519060200120905092915050565b600080604183511415611d285760008060006020860151925060408601519150606086015160001a9050611d1c87828585611fed565b94509450505050611d62565b604083511415611d59576000806020850151915060408501519050611d4e8683836120fa565b935093505050611d62565b60006002915091505b9250929050565b60006004811115611d7d57611d7c61331a565b5b816004811115611d9057611d8f61331a565b5b1415611d9b57611f3b565b60016004811115611daf57611dae61331a565b5b816004811115611dc257611dc161331a565b5b1415611e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfa90612c57565b60405180910390fd5b60026004811115611e1757611e1661331a565b5b816004811115611e2a57611e2961331a565b5b1415611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290612cb7565b60405180910390fd5b60036004811115611e7f57611e7e61331a565b5b816004811115611e9257611e9161331a565b5b1415611ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eca90612d57565b60405180910390fd5b600480811115611ee657611ee561331a565b5b816004811115611ef957611ef861331a565b5b1415611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3190612db7565b60405180910390fd5b5b50565b600060019054906101000a900460ff16611f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8490612e97565b60405180910390fd5b611f9d611f98611755565b611ac8565b565b6000606654905090565b6000606754905090565b60008383834630604051602001611fce959493929190612b66565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156120285760006003915091506120f1565b601b8560ff16141580156120405750601c8560ff1614155b156120525760006004915091506120f1565b6000600187878787604051600081526020016040526040516120779493929190612bf0565b6020604051602081039080840390855afa158015612099573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120e8576000600192509250506120f1565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061213a87828885611fed565b935093505050935093915050565b82805461215490613206565b90600052602060002090601f01602090048101928261217657600085556121bd565b82601f1061218f57805160ff19168380011785556121bd565b828001600101855582156121bd579182015b828111156121bc5782518255916020019190600101906121a1565b5b5090506121ca91906121ce565b5090565b5b808211156121e75760008160009055506001016121cf565b5090565b60006121fe6121f984612f93565b612f6e565b90508083825260208201905082856020860282011115612221576122206133db565b5b60005b85811015612251578161223788826122f4565b845260208401935060208301925050600181019050612224565b5050509392505050565b600061226e61226984612fbf565b612f6e565b90508281526020810184848401111561228a576122896133e0565b5b61229584828561319a565b509392505050565b60006122b06122ab84612ff0565b612f6e565b9050828152602081018484840111156122cc576122cb6133e0565b5b6122d78482856131a9565b509392505050565b6000813590506122ee8161388d565b92915050565b6000815190506123038161388d565b92915050565b600081519050612318816138a4565b92915050565b600082601f830112612333576123326133d6565b5b81516123438482602086016121eb565b91505092915050565b600082601f830112612361576123606133d6565b5b813561237184826020860161225b565b91505092915050565b600082601f83011261238f5761238e6133d6565b5b815161239f84826020860161229d565b91505092915050565b6000813590506123b7816138bb565b92915050565b6000815190506123cc816138bb565b92915050565b6000813590506123e1816138d2565b92915050565b6000602082840312156123fd576123fc6133ea565b5b600061240b848285016122df565b91505092915050565b600080600080600080600060e0888a031215612433576124326133ea565b5b60006124418a828b01612309565b97505060206124528a828b01612309565b96505060406124638a828b016123bd565b95505060606124748a828b016123bd565b94505060806124858a828b016123bd565b93505060a088015167ffffffffffffffff8111156124a6576124a56133e5565b5b6124b28a828b0161237a565b92505060c088015167ffffffffffffffff8111156124d3576124d26133e5565b5b6124df8a828b0161231e565b91505092959891949750929550565b60008060408385031215612505576125046133ea565b5b6000612513858286016122df565b9250506020612524858286016123a8565b9150509250929050565b600060208284031215612544576125436133ea565b5b600082013567ffffffffffffffff811115612562576125616133e5565b5b61256e8482850161234c565b91505092915050565b60006020828403121561258d5761258c6133ea565b5b600061259b848285016123a8565b91505092915050565b6000602082840312156125ba576125b96133ea565b5b60006125c8848285016123bd565b91505092915050565b600080604083850312156125e8576125e76133ea565b5b60006125f6858286016123a8565b9250506020612607858286016122df565b9150509250929050565b60008060006060848603121561262a576126296133ea565b5b6000612638868287016123a8565b9350506020612649868287016123d2565b925050604084013567ffffffffffffffff81111561266a576126696133e5565b5b6126768682870161234c565b9150509250925092565b6000806000806080858703121561269a576126996133ea565b5b60006126a8878288016123a8565b94505060206126b9878288016123d2565b935050604085013567ffffffffffffffff8111156126da576126d96133e5565b5b6126e68782880161234c565b925050606085013567ffffffffffffffff811115612707576127066133e5565b5b6127138782880161234c565b91505092959194509250565b61272881613129565b82525050565b6127378161314d565b82525050565b61274681613159565b82525050565b61275d61275882613159565b6132b2565b82525050565b600061276e82613021565b612778818561302c565b93506127888185602086016131a9565b612791816133ef565b840191505092915050565b60006127a960188361302c565b91506127b482613400565b602082019050919050565b60006127cc60238361302c565b91506127d782613429565b604082019050919050565b60006127ef601d8361302c565b91506127fa82613478565b602082019050919050565b6000612812601f8361302c565b915061281d826134a1565b602082019050919050565b600061283560188361302c565b9150612840826134ca565b602082019050919050565b6000612858602e8361302c565b9150612863826134f3565b604082019050919050565b600061287b60268361302c565b915061288682613542565b604082019050919050565b600061289e60028361303d565b91506128a982613591565b600282019050919050565b60006128c1601c8361302c565b91506128cc826135ba565b602082019050919050565b60006128e460228361302c565b91506128ef826135e3565b604082019050919050565b600061290760178361302c565b915061291282613632565b602082019050919050565b600061292a602e8361302c565b91506129358261365b565b604082019050919050565b600061294d60228361302c565b9150612958826136aa565b604082019050919050565b6000612970601a8361302c565b915061297b826136f9565b602082019050919050565b600061299360208361302c565b915061299e82613722565b602082019050919050565b60006129b660208361302c565b91506129c18261374b565b602082019050919050565b60006129d960268361302c565b91506129e482613774565b604082019050919050565b60006129fc60158361302c565b9150612a07826137c3565b602082019050919050565b6000612a1f60188361302c565b9150612a2a826137ec565b602082019050919050565b6000612a42602b8361302c565b9150612a4d82613815565b604082019050919050565b6000612a65601f8361302c565b9150612a7082613864565b602082019050919050565b612a8481613183565b82525050565b612a938161318d565b82525050565b6000612aa482612891565b9150612ab0828561274c565b602082019150612ac0828461274c565b6020820191508190509392505050565b6000602082019050612ae5600083018461271f565b92915050565b6000608082019050612b00600083018761271f565b612b0d6020830186612a7b565b612b1a6040830185612a8a565b612b276060830184612a7b565b95945050505050565b6000602082019050612b45600083018461272e565b92915050565b6000602082019050612b60600083018461273d565b92915050565b600060a082019050612b7b600083018861273d565b612b88602083018761273d565b612b95604083018661273d565b612ba26060830185612a7b565b612baf608083018461271f565b9695505050505050565b6000606082019050612bce600083018661273d565b612bdb6020830185612a7b565b612be86040830184612a8a565b949350505050565b6000608082019050612c05600083018761273d565b612c126020830186612a8a565b612c1f604083018561273d565b612c2c606083018461273d565b95945050505050565b60006020820190508181036000830152612c4f8184612763565b905092915050565b60006020820190508181036000830152612c708161279c565b9050919050565b60006020820190508181036000830152612c90816127bf565b9050919050565b60006020820190508181036000830152612cb0816127e2565b9050919050565b60006020820190508181036000830152612cd081612805565b9050919050565b60006020820190508181036000830152612cf081612828565b9050919050565b60006020820190508181036000830152612d108161284b565b9050919050565b60006020820190508181036000830152612d308161286e565b9050919050565b60006020820190508181036000830152612d50816128b4565b9050919050565b60006020820190508181036000830152612d70816128d7565b9050919050565b60006020820190508181036000830152612d90816128fa565b9050919050565b60006020820190508181036000830152612db08161291d565b9050919050565b60006020820190508181036000830152612dd081612940565b9050919050565b60006020820190508181036000830152612df081612963565b9050919050565b60006020820190508181036000830152612e1081612986565b9050919050565b60006020820190508181036000830152612e30816129a9565b9050919050565b60006020820190508181036000830152612e50816129cc565b9050919050565b60006020820190508181036000830152612e70816129ef565b9050919050565b60006020820190508181036000830152612e9081612a12565b9050919050565b60006020820190508181036000830152612eb081612a35565b9050919050565b60006020820190508181036000830152612ed081612a58565b9050919050565b6000602082019050612eec6000830184612a7b565b92915050565b6000604082019050612f076000830185612a7b565b612f146020830184612a7b565b9392505050565b600060a082019050612f306000830188612a7b565b612f3d6020830187612a7b565b612f4a6040830186612a7b565b612f576060830185612a7b565b612f646080830184612a7b565b9695505050505050565b6000612f78612f89565b9050612f848282613238565b919050565b6000604051905090565b600067ffffffffffffffff821115612fae57612fad6133a7565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612fda57612fd96133a7565b5b612fe3826133ef565b9050602081019050919050565b600067ffffffffffffffff82111561300b5761300a6133a7565b5b613014826133ef565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061305382613183565b915061305e83613183565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613093576130926132bc565b5b828201905092915050565b60006130a982613183565b91506130b483613183565b9250826130c4576130c36132eb565b5b828204905092915050565b60006130da82613183565b91506130e583613183565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561311e5761311d6132bc565b5b828202905092915050565b600061313482613163565b9050919050565b600061314682613163565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156131c75780820151818401526020810190506131ac565b838111156131d6576000848401525b50505050565b60006131e782613183565b915060008214156131fb576131fa6132bc565b5b600182039050919050565b6000600282049050600182168061321e57607f821691505b6020821081141561323257613231613349565b5b50919050565b613241826133ef565b810181811067ffffffffffffffff821117156132605761325f6133a7565b5b80604052505050565b600061327482613183565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132a7576132a66132bc565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f766f74696e67506572696f64206d75737420626520677265617465722074686160008201527f6e20310000000000000000000000000000000000000000000000000000000000602082015250565b7f6d616a6f7269747920796573566f746573206e6f742072656163686564000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f766f74696e6720706572696f6420686173207061737365640000000000000000600082015250565b7f612071756f72756d20686173206e6f74206265656e207265616368656420666f60008201527f72207468652070726f706f73616c000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f6d656d62657220697320616c7265616479207265676973746572656400000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f766f7465722068617320616c726561647920766f746564000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f6f6e6c79205573756c206d6f64756c65206d617920656e746572000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f766f74696e6720706572696f6420686173206e6f742070617373656420796574600082015250565b7f71756f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d60008201527f696e61746f720000000000000000000000000000000000000000000000000000602082015250565b7f766f746572206973206e6f742061206d656d6265720000000000000000000000600082015250565b7f6d656d626572206973206e6f7420726567697374657265640000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f696e76616c69642076616c756520666f7220656e756d20566f74655479706500600082015250565b61389681613129565b81146138a157600080fd5b50565b6138ad8161313b565b81146138b857600080fd5b50565b6138c481613183565b81146138cf57600080fd5b50565b6138db8161318d565b81146138e657600080fd5b5056fea26469706673582212202998d3ac12686723d61ca7d42d7e69c70a3e57b6229f6c3802dcc0214f4c6a2b64736f6c634300080600330000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001253696d706c654d656d626572566f74696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000177a047ee2c8e02914550f0fb6a3586e4912a9282f760a83a39c92b1a88a99ebda8d2a053ad7314125c3f9648e7e94c3d2274d7b5a2c0617800961b40111d9e5beadff7"
  }
}